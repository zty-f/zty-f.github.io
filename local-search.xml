<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>个人轻记录~~~</title>
    <link href="/9999/09/09/%E4%B8%AA%E4%BA%BA%E8%BD%BB%E8%AE%B0%E5%BD%95/"/>
    <url>/9999/09/09/%E4%B8%AA%E4%BA%BA%E8%BD%BB%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><h2 id="证书记录（不定时更新-）"><a href="#证书记录（不定时更新-）" class="headerlink" title="证书记录（不定时更新~~~~）"></a>证书记录（不定时更新~~~~）</h2></blockquote><ul><li><h3 id="软件设计师职业资格证书"><a href="#软件设计师职业资格证书" class="headerlink" title="软件设计师职业资格证书"></a><strong>软件设计师职业资格证书</strong></h3></li></ul><p>​工作之余备考，一次通关！</p><p><img src="https://s3.bmp.ovh/imgs/2024/12/28/9a822fcbb75e0fa5.jpg" alt="软件设计师证书内容"></p><p><img src="https://s3.bmp.ovh/imgs/2024/12/28/6c87443d563756f4.jpg" alt="软件设计师证书首页"></p><ul><li><h3 id="希望学产品研发部门年度优秀个人"><a href="#希望学产品研发部门年度优秀个人" class="headerlink" title="希望学产品研发部门年度优秀个人"></a>希望学产品研发部门年度优秀个人</h3><p><img src="https://s3.bmp.ovh/imgs/2025/02/24/7e86e8e8f765a1b0.jpg"></p></li><li><h3 id="2023届省级优秀毕业生"><a href="#2023届省级优秀毕业生" class="headerlink" title="2023届省级优秀毕业生"></a>2023届省级优秀毕业生</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/06/18/943bd7c80a38e2c1.jpg"></p><ul><li><h3 id="2023届校级优秀毕业生"><a href="#2023届校级优秀毕业生" class="headerlink" title="2023届校级优秀毕业生"></a>2023届校级优秀毕业生</h3><p><img src="https://s3.bmp.ovh/imgs/2023/06/18/438fa7570d724122.jpg"></p></li><li><h3 id="四川省大学生“综合素质A级证书”"><a href="#四川省大学生“综合素质A级证书”" class="headerlink" title="四川省大学生“综合素质A级证书”"></a>四川省大学生“综合素质A级证书”</h3><p><img src="https://s3.bmp.ovh/imgs/2022/07/11/95d65992acd381c8.png"></p></li><li><h3 id="蓝桥杯算法大赛Java省级一等奖"><a href="#蓝桥杯算法大赛Java省级一等奖" class="headerlink" title="蓝桥杯算法大赛Java省级一等奖"></a>蓝桥杯算法大赛Java省级一等奖</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/08/16/adab8e503e0c7c7c.png"></p><ul><li><h3 id="阿里云代码规范"><a href="#阿里云代码规范" class="headerlink" title="阿里云代码规范"></a>阿里云代码规范</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/8487c4bbf71b1f1e.jpg"></p><ul><li><h3 id="字节跳动青训营后端专场——结营证书"><a href="#字节跳动青训营后端专场——结营证书" class="headerlink" title="字节跳动青训营后端专场——结营证书"></a>字节跳动青训营后端专场——结营证书</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/07/22/8be21289b86d0367.jpg"></p><ul><li><h3 id="字节跳动青训营后端专场——大项目获奖证书"><a href="#字节跳动青训营后端专场——大项目获奖证书" class="headerlink" title="字节跳动青训营后端专场——大项目获奖证书"></a>字节跳动青训营后端专场——大项目获奖证书</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/07/22/36a7c1a665da1071.jpg"></p><ul><li><h4 id="上海汉得信息技术股份有限公司后端开发培训结业证书"><a href="#上海汉得信息技术股份有限公司后端开发培训结业证书" class="headerlink" title="上海汉得信息技术股份有限公司后端开发培训结业证书"></a>上海汉得信息技术股份有限公司后端开发培训结业证书</h4></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/08/09/15c1f53c86438ed8.png"></p><ul><li><h3 id="全国大学生市场调查与分析大赛省级三等奖"><a href="#全国大学生市场调查与分析大赛省级三等奖" class="headerlink" title="全国大学生市场调查与分析大赛省级三等奖"></a>全国大学生市场调查与分析大赛省级三等奖<img src="https://s3.bmp.ovh/imgs/2022/06/23/ba1fca16d982fb14.jpg"></h3></li><li><h3 id="第十一届全国大学生电子商务“创新、创意及创业”挑战赛省级二等奖"><a href="#第十一届全国大学生电子商务“创新、创意及创业”挑战赛省级二等奖" class="headerlink" title="第十一届全国大学生电子商务“创新、创意及创业”挑战赛省级二等奖"></a>第十一届全国大学生电子商务“创新、创意及创业”挑战赛省级二等奖</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/7e6b8cd191ad7da6.png"></p><ul><li><h3 id="第十一届全国大学生电子商务“创新、创意及创业”挑战赛西南石油大学校级赛最佳创新奖"><a href="#第十一届全国大学生电子商务“创新、创意及创业”挑战赛西南石油大学校级赛最佳创新奖" class="headerlink" title="第十一届全国大学生电子商务“创新、创意及创业”挑战赛西南石油大学校级赛最佳创新奖"></a>第十一届全国大学生电子商务“创新、创意及创业”挑战赛西南石油大学校级赛最佳创新奖</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/54806bdc50d32345.jpeg"></p><ul><li><h3 id="第十一届全国大学生电子商务“创新、创意及创业”挑战赛西南石油大学校级赛校级特等奖"><a href="#第十一届全国大学生电子商务“创新、创意及创业”挑战赛西南石油大学校级赛校级特等奖" class="headerlink" title="第十一届全国大学生电子商务“创新、创意及创业”挑战赛西南石油大学校级赛校级特等奖"></a>第十一届全国大学生电子商务“创新、创意及创业”挑战赛西南石油大学校级赛校级特等奖</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/1ef49cbbc50eeff0.png"></p><ul><li><h3 id="国家励志奖学金四次"><a href="#国家励志奖学金四次" class="headerlink" title="国家励志奖学金四次"></a>国家励志奖学金四次</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/37da99be657d0955.jpg"></p><ul><li><h3 id="校级项目立项结项证书"><a href="#校级项目立项结项证书" class="headerlink" title="校级项目立项结项证书"></a>校级项目立项结项证书</h3><p><img src="https://s3.bmp.ovh/imgs/2023/06/18/8f5962921eabe15e.png"></p></li><li><h3 id="挑战杯院级一等奖"><a href="#挑战杯院级一等奖" class="headerlink" title="挑战杯院级一等奖"></a>挑战杯院级一等奖</h3><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/0631c059345a3ec8.jpg"></p></li><li><h3 id="优秀团员"><a href="#优秀团员" class="headerlink" title="优秀团员"></a>优秀团员</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/d242daa082c2896a.jpg"></p><ul><li><h3 id="三好学生"><a href="#三好学生" class="headerlink" title="三好学生"></a>三好学生</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/06/23/a42707a9693c299c.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/e9b6e98b7c997a7f.jpg"></p><ul><li><h3 id="预备党员"><a href="#预备党员" class="headerlink" title="预备党员"></a>预备党员</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/6304a4b52b3012b0.jpg"></p><ul><li><h3 id="党员"><a href="#党员" class="headerlink" title="党员"></a>党员</h3><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/7843bbc3e718804f.jpg"></p></li><li><h3 id="娃哈哈营销大赛一等奖"><a href="#娃哈哈营销大赛一等奖" class="headerlink" title="娃哈哈营销大赛一等奖"></a>娃哈哈营销大赛一等奖</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/475dd23b721a4a62.jpg"></p><ul><li><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><strong>通过全国大学生英语六级</strong></li><li>通过<strong>计算机二级</strong></li><li>每学期都获得校级优秀奖学金（有些没发证书）</li><li>等等~~~~~~~~</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/3c0b5e5ceeb4e68f.png"></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/c601b4203a6bcbeb.jpg"></p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/2e4015fb8c457c62.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/06/18/0b7aad840fb10f80.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/5c4a7822bee1e0fd.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/b5b2576b159fdaf3.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/477af20d98f520ed.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/7d9505ab91ba2883.jpg"></p><ul><li><h3 id="大学生职业发展大赛"><a href="#大学生职业发展大赛" class="headerlink" title="大学生职业发展大赛"></a>大学生职业发展大赛</h3></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/5f60540f4bfe298c.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/9a86ef98cc0ddd98.jpg"></p><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/ead9bab36b44cae8.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>大学</tag>
      
      <tag>证书</tag>
      
      <tag>荣誉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互帮互助,各大互联网公司/国企/银行投递渠道/简历修改</title>
    <link href="/2088/08/08/%E5%AE%A3%E4%BC%A0/"/>
    <url>/2088/08/08/%E5%AE%A3%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>群主双非本，秋招春招险获10+别人不要的offer，</p><p>希望能够帮助大家解决信息差，拿到更好的offer，</p><p>楼主提供有偿在线帮看简历服务（仅需10元，买不了吃亏，买不了上当，改满20人涨价，先到先得），</p><p>专业服务，细致提出问题，一对一讲解，满意为止，</p><p>并且分享个人面试技巧以及个人珍藏学习资料，</p><p>永久问题解答服务，</p><p>有需要的直接加Q<strong>2559247260</strong>并且备注来意即可。</p><p>详细了解：<a href="http://study.zruler.fun/">http://study.zruler.fun</a></p><p>加群免费获得更多信息，简历投递，八股文分享，各大公司投递汇总，群主私人投递汇总表。。。。。</p><p>Q群：<strong>697737224</strong></p>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>学习</tag>
      
      <tag>互助</tag>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式学习</title>
    <link href="/2025/06/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/06/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>这篇文章，用来记录正则表达式的常用语法和特点，根据二八定律，正则表达式20%的内容，就足以够覆盖80%的使用场景了。</strong></p><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><p>正则表达式的定义如下</p><blockquote><p>正则表达式是一组由字母和符号组成的特殊文本, 它可以用来从文本中找出满足你想要的格式的句子.</p></blockquote><p>正则表达式的英文原文是 “Regular expression”（简称 regex 或 regexp）） 其中把regular换一个翻译——规则的，有规律的，所以Regular expression的意思就是有规则的表达式。</p><h2 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h2><p>正则表达式的作用，用一句话概括就是——<strong>精确匹配</strong>，比如</p><ul><li>文本搜索和替换</li><li>表单验证（如邮箱、手机号验证）</li><li>数据提取</li><li>字符串解析</li></ul><p>当注册一个网站，一般都会对你的密码强度进行验证，或者强制要求你必须满足某种“规则”，不然不让你通过注册</p><p><img src="https://s3.bmp.ovh/imgs/2025/06/05/777f68ada35ebde2.png" alt="登录密码效验"></p><p>这个验证方法就是通过正则表达式实现的</p><h2 id="练习平台"><a href="#练习平台" class="headerlink" title="练习平台"></a>练习平台</h2><p>正则表达式是一种工具，所以学会工具的最好秘诀是要多练，这里我推荐两种练习的平台</p><h3 id="在线"><a href="#在线" class="headerlink" title="在线"></a>在线</h3><p><a href="https://regex101.com/">正则表达式在线测试平台</a></p><p>这个平台的使用很容易，上面是输入正则表达式，下面输出要匹配的字符串</p><p><img src="https://s3.bmp.ovh/imgs/2025/06/05/5db7ede67fb2cdc6.png"></p><h3 id="离线"><a href="#离线" class="headerlink" title="离线"></a>离线</h3><p>现在很多的编辑器基本都支持用正则表达式搜索文本，比如Goland，你可以自己找找自己用的编辑器有没有这个功能。</p><p><img src="https://s3.bmp.ovh/imgs/2025/06/05/e52acf4ce655ee00.png"></p><h2 id="正则表达式常用知识"><a href="#正则表达式常用知识" class="headerlink" title="正则表达式常用知识"></a>正则表达式常用知识</h2><h3 id="直接匹配"><a href="#直接匹配" class="headerlink" title="直接匹配"></a>直接匹配</h3><p>直接匹配其实就是普通的文本搜索，不使用任何正则表达式的语法</p><p><img src="https://s3.bmp.ovh/imgs/2025/06/05/426380b7b7a9ea40.png"></p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>正则表达式是由各个元字符组合而成的，元字符跟他原本的含义没有什么关系，只是正则表达式的作者就这样定义的，所以不用去思考为啥这个元字符会是这个意思的问题，把常用元字符的含义记下来就行了。</p><h3 id="基本匹配元字符"><a href="#基本匹配元字符" class="headerlink" title="基本匹配元字符"></a>基本匹配元字符</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除换行符外的任意字符</td></tr><tr><td><code>^</code></td><td>匹配字符串开头</td></tr><tr><td><code>$</code></td><td>匹配字符串结尾</td></tr><tr><td><code>\</code></td><td>当想要把元字符当作普通字符进行匹配，就需要用 <code>\</code>进行转义</td></tr></tbody></table><p><code>.</code>是元字符中最简单的例子.<br><code>.</code>匹配任意单个字符, 但不匹配换行符.</p><p>例如,<code>a.c</code> 匹配 “abc”, “adc”, “a#c” 等</p><p><code>^</code> 匹配字符串开头，$匹配字符串结尾</p><p>例如，<code>^hello</code> 匹配以 “hello” 开头的字符串,<code>world$</code> 匹配以 “world” 结尾的字符串</p><p><code>\</code>用来将元字符转义，当想要匹配的字符串是元字符时，就需要转义，否则会被当作正则表达式被识别</p><p>例如，<code>\.</code>能够匹配字符串中的 <code>.</code> 而不是识别成元字符</p><h3 id="数量限定符号"><a href="#数量限定符号" class="headerlink" title="数量限定符号"></a>数量限定符号</h3><table><thead><tr><th>符号</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配前面的表达式 0 次或多次</td><td><code>a*</code> 匹配 “”, “a”, “aa”, “aaa” 等</td></tr><tr><td><code>+</code></td><td>匹配前面的表达式 1 次或多次</td><td><code>a+</code> 匹配 “a”, “aa”, “aaa” 等，但不匹配 “”</td></tr><tr><td><code>?</code></td><td>匹配前面的表达式 0 次或 1 次</td><td><code>colou?r</code> 匹配 “color” 或 “colour”</td></tr><tr><td><code>&#123;n&#125;</code></td><td>匹配前面的表达式恰好 n 次</td><td><code>a&#123;3&#125;</code> 只匹配 “aaa”</td></tr><tr><td><code>&#123;n,&#125;</code></td><td>匹配前面的表达式至少 n 次</td><td><code>a&#123;2,&#125;</code> 匹配 “aa”, “aaa” 等</td></tr><tr><td><code>&#123;n,m&#125;</code></td><td>匹配前面的表达式 n 到 m 次</td><td><code>a&#123;2,4&#125;</code> 匹配 “aa”, “aaa”, “aaaa</td></tr></tbody></table><p>这里我说几个我平时很常用的做法</p><p>用 <code>.*</code>，表示匹配任意字符0次或多次，说人话就是，单独使用会选中所有文本</p><p><img src="https://s3.bmp.ovh/imgs/2025/06/05/5b42120c8ea8a840.png"></p><p>然后呢，你可以用 <code>.*</code>结合 ^ 和 <code>$</code>，匹配特定字符串开头与特定字符串结尾的文本</p><p>比如用 <code>^hello.*world</code> 匹配hello开头，world结尾的字符串</p><p><img src="https://s3.bmp.ovh/imgs/2025/06/05/a0be1c2186d5df66.png"></p><p>markdown引用图片的格式为 <code>![]()</code>，当你想删除一个markdown文件中的所有图片引用的时候，就可以使用 <code>!\[.*</code> 来匹配所有图片的引用</p><p><img src="https://s3.bmp.ovh/imgs/2025/06/05/e5ad286d156e2679.png"></p><h3 id="字符集和特殊字符"><a href="#字符集和特殊字符" class="headerlink" title="字符集和特殊字符"></a>字符集和特殊字符</h3><table><thead><tr><th>符号</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>[abc]</code></td><td>匹配方括号中的任意一个字符</td><td><code>[abc]</code> 匹配 “a”, “b” 或 “c”</td></tr><tr><td><code>[^abc]</code></td><td>匹配除方括号中字符外的任意字符</td><td><code>[^abc]</code> 匹配 “d”, “e” 等，但不匹配 “a”, “b”, “c”</td></tr><tr><td><code>[a-z]</code></td><td>匹配指定范围内的任意字符</td><td><code>[a-z]</code> 匹配任意小写字母</td></tr><tr><td><code>\d</code></td><td>匹配数字，等价于 <code>[0-9]</code></td><td><code>\d&#123;3&#125;</code> 匹配三个数字</td></tr><tr><td><code>\w</code></td><td>匹配字母、数字、下划线，等价于 <code>[a-zA-Z0-9_]</code></td><td><code>\w+</code> 匹配一个或多个字母&#x2F;数字&#x2F;下划线</td></tr><tr><td><code>\s</code></td><td>匹配空白字符（空格、制表符、换行等）</td><td><code>\s</code> 匹配一个空格</td></tr><tr><td><code>\D</code></td><td>匹配非数字字符</td><td><code>\D+</code> 匹配一个或多个非数字字符</td></tr><tr><td><code>\W</code></td><td>匹配非字母、数字、下划线的字符</td><td><code>\W</code> 匹配如 “#”, “@” 等符号</td></tr><tr><td><code>\S</code></td><td>匹配非空白字符</td><td><code>\S+</code> 匹配一个或多个非空白字符</td></tr></tbody></table><p>特殊字符常用的就这几个，我教你怎么更容易记住</p><ul><li><p>\d的是digital，数字的意思，</p></li><li><p>\w的是word，字词的意思</p></li><li><p>\s的是space，按下空格键会输入空格符，所以\s匹配空格符</p></li><li><p>大写字母和小写字母互为反义词，\d匹配数字，那\D就用来匹配非数字</p></li><li><p><code>|</code>或运算符就表示或, 用作判断条件.，可以结合 <code>[]</code>一起使用，来实现敏感词过滤</p></li></ul><p><code>fuck|shit|[傻煞沙]|[比笔逼叉缺吊碉雕]</code></p><p><img src="https://s3.bmp.ovh/imgs/2025/06/05/c45250b3321178ad.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>学会上面的这些，大多数的基础正则表达式，基本都能看懂了，如果有些复杂的表达式有高级用法，等用到的时候再去看就行。以下是一些注意事项</p><ul><li>在现实中，如果不是非常特定的需求，都是建议<strong>直接在网上用别人写好的正则表达式</strong>，因为正则表达式是由元字符构成的，一旦很长，可读性极其差，比如 <code>^(?!(.*?[A-Za-z0-9])\1&#123;5,&#125;)(?=(?:.*?[A-Z])&#123;2,&#125;)(?=(?:.*?[a-z])&#123;2,&#125;)(?=(?:.*?[0-9])&#123;2,&#125;)(?=.*?[!@#$%^&amp;*()_+\-=\[\]&#123;&#125;|;&#39;:&quot;,.&lt;&gt;/?])(?!.*?(?:admin|root|password|123456|qwerty))(?!.*?(?:(.)\1&#123;2,&#125;))(?:[a-zA-Z0-9](?:[a-zA-Z0-9](?!-&#123;2,&#125;))*(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9](?!-&#123;2,&#125;))*)*\+?)?(?:[a-zA-Z0-9](?:[a-zA-Z0-9](?!-&#123;2,&#125;))*(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9](?!-&#123;2,&#125;))*)*)?@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$</code></li><li><strong>学会正则表达式，最根本是能看懂，而不是让你能写出来，所以我都是建议直接用ai写，然后根据ai给出的表达式对你特定的场景进行优化就行，等看的多了，自然就能写出来了</strong></li></ul><p>这里附上一些经典的参考资料</p><ol><li><a href="https://stackoverflow.org.cn/regexdso/">常用正则表达式大全</a></li><li><a href="https://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html#:~:text=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%201%20%E7%9B%AE%E5%BD%95%20%E8%B7%B3%E8%BF%87%E7%9B%AE%E5%BD%95%20%E6%9C%AC%E6%96%87%E7%9B%AE%E6%A0%87%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%9C%AC%E6%95%99%E7%A8%8B%20...%202,%E5%8C%B9%E9%85%8D%20%E4%BB%BB%E6%84%8F%E7%9A%84%E7%A9%BA%E7%99%BD%E7%AC%A6%EF%BC%8C%E5%8C%85%E6%8B%AC%E7%A9%BA%E6%A0%BC%EF%BC%8C%E5%88%B6%E8%A1%A8%E7%AC%A6%20%28Tab%29%EF%BC%8C%E6%8D%A2%E8%A1%8C%E7%AC%A6%EF%BC%8C%E4%B8%AD%E6%96%87%E5%85%A8%E8%A7%92%E7%A9%BA%E6%A0%BC%E7%AD%89%E3%80%82%20...%208%20%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89%20...%20%E6%9B%B4%E5%A4%9A%E9%A1%B9%E7%9B%AE">正则表达式30分钟入门教程 - deerchao - 博客园</a></li><li><a href="https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/index.html">简介 | 正则表达式30分钟入门教程</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>正则表达式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WorkNormalRecord</title>
    <link href="/2025/02/20/work_record/"/>
    <url>/2025/02/20/work_record/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>虚心听取建议和意见，多学习，多看看有效的代码以及学习编程和业务理解思想。</p><h3 id="命令记录"><a href="#命令记录" class="headerlink" title="命令记录"></a>命令记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer config --list # 可以查看php composer的配置，里面包含依赖包更新的仓库的用户名密码。<br><br>nginx启动<br><br>sudo /opt/homebrew/bin/nginx<br><br>sudo nginx -s reload<br><br>本地nacos启动：<br><br>sh startup.sh -m standalone 单机启动   <br><br><br>php项目本地配置：<br><br>查找nginx.conf的安装位置：nginx -t<br><br>cd /opt/homebrew/etc/nginx/servers<br><br>创建一个项目对应的conf<br><br>重启加载配置<br><br>启动不了查看nginx日志，修改日志打印路径为当前文件夹，不然会出错<br><br>// php依赖下载<br>composer install -vvv<br><br>composer update -vvv<br><br>使用了wire依赖注入框架的项目本地启动:<br><br>go run .       同时启动main.go  和  wire_gen.go<br><br>Cookie 状态为httponly代表只能服务端通过脚本调用，不能在客户端浏览器获取！！！！！<br><br>curl -v  # 查看域名端口号<br><br>top / lscpu # 查看运行任务使用的资源情况 cpu等等  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询端口占用情况</span><br>1.  lsof -i :端口号 #其中端口号为需要查询的端口号。<br>2.  netstat -tln | grep 端口号 #其中端口号为需要查询的端口号。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ECS防火墙常用命令</span><br>systemctl status firewalld # 查看防火墙状态<br>firewall-cmd --list-all # 查看防火墙放行端口列表<br>firewall-cmd --permanent --add-port=8989/tcp # 永久放行8989端口<br>firewall-cmd --reload # 重载配置<br>systemctl stop firewalld  # 关闭防火墙<br>systemctl disable firewalld  # 关闭防火墙开机自启<br></code></pre></td></tr></table></figure><h3 id="Curl各个阶段时间"><a href="#Curl各个阶段时间" class="headerlink" title="Curl各个阶段时间"></a><strong>Curl各个阶段时间</strong></h3><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">curl</span> <span class="hljs-operator">-</span><span class="hljs-variable">o</span> /<span class="hljs-variable">dev</span>/<span class="hljs-literal">null</span> <span class="hljs-operator">-</span><span class="hljs-variable">s</span> <span class="hljs-operator">-</span><span class="hljs-variable">w</span> <span class="hljs-variable">time_namelookup</span>:<span class="hljs-string">&quot;<span class="hljs-char escape_">\t</span>&quot;</span><span class="hljs-operator">%</span>&#123;<span class="hljs-variable">time_namelookup</span>&#125;<span class="hljs-string">&quot;<span class="hljs-char escape_">\n</span>&quot;</span><span class="hljs-variable">time_connect</span>:<span class="hljs-string">&quot;<span class="hljs-char escape_">\t</span><span class="hljs-char escape_">\t</span>&quot;</span><span class="hljs-operator">%</span>&#123;<span class="hljs-variable">time_connect</span>&#125;<span class="hljs-string">&quot;<span class="hljs-char escape_">\n</span>&quot;</span><span class="hljs-variable">time_appconnect</span>:<span class="hljs-string">&quot;<span class="hljs-char escape_">\t</span>&quot;</span><span class="hljs-operator">%</span>&#123;<span class="hljs-variable">time_appconnect</span>&#125;<span class="hljs-string">&quot;<span class="hljs-char escape_">\n</span>&quot;</span><span class="hljs-variable">time_pretransfer</span>:<span class="hljs-string">&quot;<span class="hljs-char escape_">\t</span>&quot;</span><span class="hljs-operator">%</span>&#123;<span class="hljs-variable">time_pretransfer</span>&#125;<span class="hljs-string">&quot;<span class="hljs-char escape_">\n</span>&quot;</span><span class="hljs-variable">time_starttransfer</span>:<span class="hljs-string">&quot;<span class="hljs-char escape_">\t</span>&quot;</span><span class="hljs-operator">%</span>&#123;<span class="hljs-variable">time_starttransfer</span>&#125;<span class="hljs-string">&quot;<span class="hljs-char escape_">\n</span>&quot;</span><span class="hljs-variable">time_total</span>:<span class="hljs-string">&quot;<span class="hljs-char escape_">\t</span><span class="hljs-char escape_">\t</span>&quot;</span><span class="hljs-operator">%</span>&#123;<span class="hljs-variable">time_total</span>&#125;<span class="hljs-string">&quot;<span class="hljs-char escape_">\n</span>&quot;</span><span class="hljs-variable">time_redirect</span>:<span class="hljs-string">&quot;<span class="hljs-char escape_">\t</span><span class="hljs-char escape_">\t</span>&quot;</span><span class="hljs-operator">%</span>&#123;<span class="hljs-variable">time_redirect</span>&#125;<span class="hljs-string">&quot;<span class="hljs-char escape_">\n</span>&quot;</span><span class="hljs-variable">speed_download</span>:<span class="hljs-string">&quot;<span class="hljs-char escape_">\t</span><span class="hljs-char escape_">\t</span>&quot;</span><span class="hljs-operator">%</span>&#123;<span class="hljs-variable">speed_download</span>&#125;<span class="hljs-string">&quot;<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-variable">https</span>:<span class="hljs-comment">//www.baidu.com</span><br><br><span class="hljs-variable">time_namelookup</span>:<span class="hljs-number">0.000196</span> <span class="hljs-comment">// dns解析时间，从请求开始到DNS解析完毕所用时间</span><br><span class="hljs-variable">time_connect</span>:<span class="hljs-number">0.005290</span> <span class="hljs-comment">// 建立 tcp 链接完成时间，包括 dns 解析时间</span><br><span class="hljs-variable">time_appconnect</span>:<span class="hljs-number">0.000000</span> <span class="hljs-comment">// 建立 tcp 完成时间，包括上层ssl handshake</span><br><span class="hljs-variable">time_pretransfer</span>:<span class="hljs-number">0.005305</span> <span class="hljs-comment">// 从开始到准备传输的时间</span><br><span class="hljs-variable">time_starttransfer</span>:<span class="hljs-number">0.012730</span> <span class="hljs-comment">// 发出请求到server开始返回第一个byte的时间</span><br><span class="hljs-variable">time_total</span>:    <span class="hljs-number">0.012756</span> <span class="hljs-comment">// 总耗时</span><br><span class="hljs-variable">time_redirect</span>:<span class="hljs-number">0.000000</span> <span class="hljs-comment">// 重定向时间</span><br></code></pre></td></tr></table></figure><p><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/YNx7LnfPsrPjqj1P.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MjgzNzgyMDcsImZpbGVHVUlEIjoiZTFBejQybUxiTFVKbE5xVyIsImlhdCI6MTcyODM3MTAwNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ.BqhblR8xqVYHfwgIbBoUuXdeX3eaQYyorLFsoNq6NaY" alt="img"></p><p><a href="https://blog.cloudflare.com/a-question-of-timing/">Timing web requests with cURL and Chrome (cloudflare.com)</a></p><h3 id="K8s-安装网络工具"><a href="#K8s-安装网络工具" class="headerlink" title="K8s 安装网络工具"></a><strong>K8s 安装网络工具</strong></h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt update<br>apt <span class="hljs-keyword">install</span> net-tools <span class="hljs-comment"># ifconfig</span><br>apt <span class="hljs-keyword">install</span> iputils-ping <span class="hljs-comment"># ping</span><br>apt <span class="hljs-keyword">install</span> dnsutils <span class="hljs-comment"># dig</span><br>apt <span class="hljs-keyword">install</span> telnet <span class="hljs-comment"># telnet</span><br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2024/08/25/02dad0f828545e17.png" alt="img"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># PHP常用函数解析 </span><br><span class="hljs-keyword">empty</span>() <span class="hljs-comment">//判断一个变量是否被认为是空的。当一个变量并不存在，或者它的值等同于 FALSE，那么它会被认为不存在返回true。</span><br><br>is_array<span class="hljs-comment">//函数是一种非常常用的函数，它用来判断一个变量是否是数组</span><br><br><span class="hljs-title function_ invoke__">is_numeric</span>()<span class="hljs-comment">//函数是一个用于检测变量或值是否为数字的函数。如果变量或值为数字，则返回true，否则返回false， &quot;123abc&quot;也可以被判断为数字类型。</span><br><br><span class="hljs-keyword">isset</span>()<span class="hljs-comment">//函数用于检测变量是否已设置并且非NULL</span><br></code></pre></td></tr></table></figure><h3 id="知识点记录"><a href="#知识点记录" class="headerlink" title="知识点记录"></a>知识点记录</h3><ol><li><p>线上环境和测试环境访问通过Switchhost切换再访问。</p></li><li><p>开发新功能一定要<strong>兼容</strong>之前的版本，注意字段变更和逻辑判断问题。</p></li><li><p>写代码之前先规划一下大体结构，注意代码的优化，注意细节问题的把握。</p></li><li><p>注意日志的合理打印，不要都等有问题之后再加日志，注意日志的格式和级别。</p></li><li><p>对于代码的安全问题要严格进行效验，前后端都需要，不能嫌麻烦就不处理。</p></li><li><p>redis设置key时要添加统一前缀，比如UserID_1001:对象内容</p></li><li><p>代码中多处出现的相同的代码提取成方法来进行简化，数字进行常量提取优化</p></li><li><p>做原来的东西的修改操作时一定要仔细考虑到影响范围，要考虑到是否会影响其他东西</p></li><li><p>go strcut可以通过  Name int <code>json:&quot;name,string&quot; </code> 来指定该字段使用string类型接收来转换。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>   Name <span class="hljs-type">int</span>  <span class="hljs-string">`json:&quot;name,string&quot;`</span><br>   Age  <span class="hljs-type">bool</span> <span class="hljs-string">`json:&quot;age,string&quot;`</span><br>&#125;<br>可以将<span class="hljs-type">string</span>类型的json转换为对应的类型<br></code></pre></td></tr></table></figure></li><li><p>go - redis的setnx和hsetnx是同步的，并且同类型键值存在不会报错，虽然是string和hash两种，但是也不能出现key相同。</p></li><li><p>先set  a  然后再hset&#x2F;hsetnx a，会报错，先Hset a 然后再set a,会把之前的hash覆盖,如果是setnx则不会报错，也不会修改原hash，不会覆盖。</p></li><li><p>time.Duration(0)  redis过期时间设置0 为永久</p></li><li><p>Redis 删除不存在的key不会报错，del  srem都一样</p></li><li><p>状态码5XX表示服务端错误。</p></li></ol><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>500 Internal Server Error</td><td>服务器内部错误，服务器处理请求的过程中出现一个错误（内存地址越界、空指针等），导致服务器无法继续处理请求。</td></tr><tr><td>502 Bad Gateway</td><td>网关错误，网关请求服务器，在网关设置的超时时间之内服务器中断请求，即没有正常返回数据。 1. 服务不可用，网关找不到对应的upstream。  2. 服务进程被杀掉，php服务设置超时时间主动杀掉进程。 3. 服务进程为长连接，断开过程中被复用。</td></tr><tr><td>504 Gateway Timeout</td><td>网关超时，网关请求服务器，到了网关设置的超时时间之后服务器仍然没有返回数据。</td></tr></tbody></table><ol start="15"><li>find . -name “*.go” | xargs cat | wc -l   查询项目代码行数.</li><li>ctx.shouldBind既可以接收Get参数也可以接收Post参数，更加灵活.</li><li>新服务部署完后需要配置deployment的yaml配置文件</li></ol><p>配置后才能正常的访问内网环境域名的接口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">hostAliases:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">hostnames:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">x.x.x.com</span><br>          <span class="hljs-attr">ip:</span> <span class="hljs-string">x.x.x.x</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">hostnames:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">x.x.x.com</span><br>          <span class="hljs-attr">ip:</span> <span class="hljs-string">x.x.x.x</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">hostnames:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">x.x.x.com</span><br>          <span class="hljs-attr">ip:</span> <span class="hljs-string">x.x.x.x</span><br></code></pre></td></tr></table></figure><ol start="18"><li>MySQL  select…… For update 对于查询的数据加锁，避免其他的事务操作修改数据</li></ol><p><a href="https://www.cnblogs.com/moyui/articles/12051588.html">https://www.cnblogs.com/moyui/articles/12051588.html</a></p><ol start="19"><li>查看文件大小命令</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ls</span> -lh<br><span class="hljs-built_in">du</span> -sh<br></code></pre></td></tr></table></figure><ol start="20"><li>gorm的In查询的注意点</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">ids :<span class="hljs-operator">=</span> []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>db.Find(<span class="hljs-operator">&amp;</span>users, ids) <span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>使用上述语句进行<span class="hljs-keyword">In</span>查询对应的主键ID数组为空的时候，会查询全部的值。<br>解决办法：<br>使用db.Find(<span class="hljs-operator">&amp;</span>users,&quot;id in (?)&quot;, ids)<br>手动拼接<span class="hljs-keyword">in</span>查询语句，在数组为空的时候就不会查询出数据。<br></code></pre></td></tr></table></figure><ol start="21"><li>gorm数据库查询排序，优先根据a字段降序，再根据b字段降序</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">错误写法： 下面的a后面不指定排序方式会默认采用升序进行排序<br>db.Order(&quot;a,b desc&quot;).Find(<span class="hljs-operator">&amp;</span>users)这个语句等同于db.Order(&quot;a asc,b desc&quot;).Find(<span class="hljs-operator">&amp;</span>users)<br>正确写法：<br>db.Order(&quot;a desc,b desc&quot;).Find(<span class="hljs-operator">&amp;</span>users)<br></code></pre></td></tr></table></figure><ol start="22"><li>系统设计原则</li></ol><p>系统设计开发过程中遵循的基本原则，包括架构设计、功能实现、代码编写。</p><p><strong>简单适用原则</strong></p><p>简单，要求设计简单、理解简单、维护简单，意味着容易学习上手、开发维护成本小、不容易出问题；适用，要求系统应能够通过合适的方式满足业务需求，意味着系统应当面向我们的业务特性量身定制。</p><p>简单适用原则，要求设计应当以最简单优雅的方式，满足业务需求。能够用简单的方式解决的问题，就不要用更复杂的方式，不炫技；一些目前预见没有必要的功能，不需要实现，但在设计时应当为后续的实现预留条件，并避免过度设计。</p><p><strong>最大共性原则</strong></p><p>最大共性原则，要求在设计过程中，跳出具体的业务功能需求，从更高的视角寻找业务的共性，抽象出业务模型，针对业务模型进行开发， 进而通过业务模型实现功能需求。</p><p>优秀的业务模型，能够在后续的持续开发迭代中保证系统的逻辑一致性和可扩展性，降低开发成本并延长系统的使用周期， 避免通过不断拷贝代码、增加逻辑分支而陷入开发的绝望循环。</p><ol start="23"><li><p>项目代码开发规范</p><p>【强制】时间相关字段无特别说明MySQL中类型使用 int(11) 无符号 （支持 0-4294967295）,  golang中类型使用int64；</p><p>【强制】学生ID字段统一用stuId，数据库字段类型 bigint（20）无符号，golang中类型使用int64；</p><p>【强制】和环境（测试、灰度、生产环境）相关配置统一到app的configs中，禁止在代码中硬编码；</p><p>【推荐】数据逻辑处理，特别是涉及到多表的逻辑，尽量在biz层处理， 开启事务除外；</p><p>【强制】api的Response输出字段统一使用驼峰命名；</p><p>【强制】数据库表名、字段全部使用小写，单词间下划线分割；</p><p>【强烈推荐】Redis key 统一使用小写，统一增加前缀growth，功能或库表分割使用英文冒号（:），其他分隔符使用下划线（_）, 复杂类型的field命名使用驼峰；</p><p>【强烈推荐】日志打印原则：谁报错谁打日志的原则，即：data内报错， 由data打印错误日志，biz层直接调用data产生的错误可不打印日志； 但biz内调用data后数据处理发生的错误应该有biz层自行打印错误日志；</p><p>【强烈推荐】打印错误日志时，要把关键参数或数据放到日志中， 不要仅打印error信息；</p><p>【强烈推荐】方法或函数要加注释，特殊逻辑要加详细注释甚至文档链接加以说明；</p><p>【强烈推荐】data层入参是结构体时，要对必需属性做校验，防止外层调用漏传，进而写脏数据；</p><p>【强烈推荐】数据库新增操作：使用结构体进行创建的时候，对于有值的字段采用select区分出来，避免数据库默认值设置错误问题。比如is_deleted默认值为-1，不是字段零值；</p><p>【强烈推荐】数据库修改操作：尽量使用map结构映射字段进行更新，使用结构体更新会存在零值更新失败的问题；</p><p>【强烈推荐】数据库查询操作：尽量使用Take、Last、First进行查询，使用Find进行查询的时候查询不到不会报错，前面三个会报错record not found；</p><p>【强烈推荐】MySQL字段都设置为NOT NULL，并设置默认值；</p><p>【强制】ToC接口统一使用POST，不再区分GET和POST，和客户端使用保持统一；</p></li><li><p>Dockerfile模板</p></li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> public-<span class="hljs-keyword">env</span>-mirror-service-registry.cn-beijing.cr.aliyuncs.com/dist/golang:<span class="hljs-number">1.16</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /tmp/source</span><br><span class="hljs-comment"># 准备工作</span><br><span class="hljs-comment">#RUN export</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> go.mod .</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> go.sum .</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-comment">#加入git访问权限</span><br><span class="hljs-comment">#COPY .netrc /root/.netrc</span><br><br><span class="hljs-comment"># 编译</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> go <span class="hljs-built_in">env</span> -w GOPRIVATE=xxx.xxx.com</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> go <span class="hljs-built_in">env</span></span><br><span class="hljs-comment">#WORKDIR /tmp/source/cmd/server</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> GOPROXY=<span class="hljs-string">&quot;https://goproxy.cn&quot;</span> GO111MODULE=on go build -o /tmp/source/bin/server .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /tmp/source/bin/server</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /tmp/source</span><br><span class="hljs-comment">#ARG envType=test</span><br><span class="hljs-comment">#COPY configs/config_$&#123;envType&#125;.toml conf/env/env.toml</span><br><span class="hljs-comment"># 执行编译生成的二进制文件</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/tmp/source/bin/server&quot;</span>,<span class="hljs-string">&quot;-conf&quot;</span>,<span class="hljs-string">&quot;conf/env/env.toml&quot;</span>]</span><br><span class="hljs-comment"># 暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><ol start="25"><li><strong>忽略已经加入版本管理的文件</strong></li></ol><p>如果某些文件已经被纳入了版本管理中，直接修改.gitignore是无效的。需要先把文件从版本管理的索引中删除，然后修改.gitignore文件，然后提交即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第一步：从索引中删除文件</span><br>git <span class="hljs-built_in">rm</span> --cached filename<br><span class="hljs-comment"># 第二部：修改 .gitignore文件，添加忽略规则</span><br><span class="hljs-comment"># 第三步：提交变更</span><br>git commit -m <span class="hljs-string">&#x27;update .gitignore&#x27;</span><br></code></pre></td></tr></table></figure><ol start="26"><li><strong>go替换依赖资源包为本地文件</strong></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">replace codeup.aliyun.com/<span class="hljs-number">61e54</span>b0e0bb300d827e1ae27/backend/golib v1<span class="hljs-number">.0</span><span class="hljs-number">.60</span><span class="hljs-number">-0.20240312093259</span><span class="hljs-number">-7793</span>c839dcce =&gt; /Users/xwx/<span class="hljs-keyword">go</span>/src/golib<br></code></pre></td></tr></table></figure><ol start="27"><li>Gin框架的shouldBind方法针对json格式的参数一次请求只能使用一次，不能多次使用，绑定参数的时候有多次绑定的情况需要额外注意前端传参的格式已经接口的协议是GET还是POST。</li></ol><p><a href="https://www.cnblogs.com/davis12/p/16355634.html">https://www.cnblogs.com/davis12/p/16355634.html</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ShouldBind绑定参数时，如果参数类型是form-data/x-www-form-urlencoded时,可以多次使用ShouldBind</span><br><span class="hljs-comment">// 但是如果参数类型是json时，只能使用一次ShouldBind</span><br><br><span class="hljs-comment">// ShouldBindJSON不能使用多次，尽管是针对不同地址空间的结构体,也不能和shouldBind共同使用多次</span><br><span class="hljs-comment">//1.单次解析，追求性能使用 ShouldBindJson，因为多次绑定解析会出现EOF</span><br><span class="hljs-comment">//2.多次解析，避免报EOF，使用ShouldBindBodyWith</span><br></code></pre></td></tr></table></figure><ol start="28"><li>tree 文件目录  ，这个命令可以获取文件结构</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">xwx@xwxdeMacBook-Pro src % tree <span class="hljs-built_in">test</span>   <br><span class="hljs-built_in">test</span><br>├── algorithm<br>│   └── algorithm_test.go<br>├── base<br>│   ├── base.go<br>│   └── base_test.go<br>├── benchmark<br>│   └── test01<br>│       ├── map_array.go<br>│       └── map_array_test.go<br>├── util<br>│   ├── time_test.go<br>│   ├── util.go<br>│   └── util_test.go<br>├── websocket<br>│   └── main.go<br>└── 完成学习.png<br><br>43 directories, 72 files<br></code></pre></td></tr></table></figure><ol start="29"><li>设置header头的时候不论大小写，在真正进行http&#x2F;https请求的时候，不同的web框架会将header头转换为不同的格式。php fend框架会转换为HTTP_原key全大写，go gin框架会转化为全驼峰。</li></ol><img src="https://s3.bmp.ovh/imgs/2024/03/30/2c99fa7469baa3bc.png" alt="image-20240330092300182" style="zoom: 25%;" /><p><img src="https://s3.bmp.ovh/imgs/2024/03/30/e6b1ca01c7d3a3ed.png" alt="image-20240330092400339"></p><ol start="30"><li>redis缓存多处同时插入缓存值时候容易造成并发问题记录。</li></ol><p>以下以redis的List类型举例：</p><ol><li>不加锁</li></ol><ul><li>接口A—&gt;查询key是否存在—&gt;不存在插入缓存（叠加的方式）</li><li>接口B—&gt;查询key是否存在—&gt;不存在插入缓存（叠加的方式）</li></ul><p><strong>这种情况下，当接口AB同时请求的时候，会造成A，B都查询到key不存在的情况，然后就会进行写入，造成数据叠加出错。</strong></p><ol start="2"><li>加锁  redis  setnx 分布式锁，defer del key   expire 3s</li></ol><ul><li>接口A—&gt;查询key是否存在—&gt;不存在—&gt;逻辑操作—&gt;获取锁—&gt;获取成功—&gt;插入缓存（叠加的方式）—&gt;释放锁</li><li>接口B—&gt;查询key是否存在—&gt;不存在—&gt;逻辑操作—&gt;获取锁—&gt;获取成功—&gt;插入缓存（叠加的方式）—&gt;释放锁</li></ul><p><strong>这种情况下，假如接口同时请求都查询到了key不存在进行获取锁的操作，如果接口A获取成功，但是获取成功后进行后续的逻辑操作速度很快，处理完成后就释放锁，这个时候在极端情况下接口B也会出现获取到锁的情况，同样也会出现数据叠加插入的情况。【特别是在判断key是否存在和获取锁之间有其他的逻辑操作的情况下，更容易出现此类问题】</strong></p><ol start="3"><li>加锁  redis  setnx 分布式锁，defer del key   expire 3s,获取锁成功后再判断key是否存在，类似于双重检测锁</li></ol><ul><li>接口A—&gt;查询key是否存在—&gt;不存在—&gt;逻辑操作—&gt;获取锁—&gt;获取成功—&gt;查询key是否存在—&gt;不存在—&gt;插入缓存（叠加的方式）—&gt;释放锁</li><li>接口B—&gt;查询key是否存在—&gt;不存在—&gt;逻辑操作—&gt;获取锁—&gt;获取成功—&gt;查询key是否存在—&gt;不存在—&gt;插入缓存（叠加的方式）—&gt;释放锁</li></ul><p><strong>这种情况下，即时A获取锁之后很快处理完就释放了锁，就算极端情况下接口B也获取成功了锁，但是这个时候再去查询key是否存在就必定存在了（即时A接口缓存写入失败，也不会出问题），就不会进行后续的插入缓存操作了。</strong></p><blockquote><p>如果是string类型，可以使用setnx这些的命令来进行处理，但是List类型没有类似的命令就需要自己加锁来避免并发问题，为了避免缓存多次写入造成数据重复，也可以使用set来处理，对于排序有要求的可以使用zset，总之，办法很多，选择适合当前的项目开发即可。</p></blockquote><ol start="31"><li>阿里云日志库查询日志特殊语句记录，当我们需要匹配output输出字段里面的部分字符串的时候，可以使用如下语句进行查询，#代表后续不进行分词。</li></ol><p><img src="https://s3.bmp.ovh/imgs/2024/04/18/05913828b0f005a4.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span> 查询指定日期里面output字段值包含字符串&quot;ranking&quot;:<span class="hljs-number">0</span>的日志记录。<br><span class="hljs-operator">*</span> <span class="hljs-keyword">and</span> request_uri : &quot;/v1/myHome/info?&quot; <span class="hljs-keyword">and</span> output:#&quot;ranking\&quot;\:<span class="hljs-number">0</span>&quot;<br>1. 查询指定日期里面output字段值包含字符串&quot;ranking&quot;:0的日志记录的数量。<br>* | select count(*) from log where request_uri=&#x27;/v1/myHome/info?&#x27; and output like &#x27;%ranking&quot;:<span class="hljs-number">0</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">查询数据</span><br><span class="hljs-string">level:ERROR  and not msg: unique_user_medal | select msg where cast(replace(replace(REGEXP_EXTRACT(msg, &#x27;</span>\[(\d<span class="hljs-operator">+</span>)\]<span class="hljs-string">&#x27;), &#x27;</span>[<span class="hljs-string">&#x27;, &#x27;&#x27;),&#x27;</span>]<span class="hljs-string">&#x27;, &#x27;&#x27;) as bigint) &lt; 2000000000</span><br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2024/04/18/af726333dc1634fc.png"></p><ol start="32"><li>项目代码中要尽量避免出现如下代码的情况，当数据量比较大的时候，接口的耗时就会成倍增加。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 错题代码实例，极其不推荐</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WrongExample</span><span class="hljs-params">()</span></span> &#123;<br>    result := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>       res := <span class="hljs-string">&quot;通过rpc或者http的方式请求到数据&quot;</span> <span class="hljs-comment">// 平均一次请求100ms，10次请求就是1s，假如需要循环100次，那就是10s，这样就会导致接口严重超时</span><br>       result = <span class="hljs-built_in">append</span>(result, res)<br>    &#125;<br>    fmt.Println(result)<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">       解决办法：</span><br><span class="hljs-comment">        1. 通过批量请求的方式来减低每次网络请求造成的耗时问题，一次性把数据全部请求出来进行处理</span><br><span class="hljs-comment">        2. 通过并发的方式来减少每次网络请求造成的耗时问题，一次性把数据全部请求出来进行处理</span><br><span class="hljs-comment">        3. 如果对于列表信息请求接口返回中不是用户这次请求需要展示的数据，而是类似于模块的跳转链接的这类情况，可以不用在列表接口里</span><br><span class="hljs-comment">          提前把数据构造好，除非数据都是很好构造的情况，不需要额外请求数据，其余情况都可以在用户真实点击的时候再去请求接口获取跳转链接，把过程拆分成多个阶段。</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="33"><li>在项目代码的数据库设计中，如果某个字段会比较长，比如订单记录或者其他记录的唯一标识的字段[76074586-2001200-221507607-2097321-22205789_23402135_1_744605_0]，这种情况下需要特别注意数据库中对应字段设置的长度是否满足。因为某些情况下执行insert操作，超过数据库指定的字段长度也不会报错，会自动截断，这取决于数据库是否设置开启了严格检测模式。</li></ol><p>​        <a href="https://blog.csdn.net/u010738038/article/details/137768633">https://blog.csdn.net/u010738038/article/details/137768633</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@SESSION</span>.sql_mode;  # 查询数据库是否开启严格检测模式<br>STRICT_TRANS_TABLES # 查询结果包含该字段就代表开启严格检测模式，字段长度不符就会报错。<br><br># 可以通过如下<span class="hljs-keyword">SQL</span>语句进行数据库字段长度的修改。<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 数据库名字.table_name MODIFY <span class="hljs-keyword">COLUMN</span> cloumn_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>);<br><br># 并且类型推荐<span class="hljs-type">VARCHAR</span>，不使用<span class="hljs-type">char</span>。<br></code></pre></td></tr></table></figure><p><a href="https://gitcode.csdn.net/65ec51f41a836825ed798496.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MTU0OTk3OCwiZXhwIjoxNzE3NjM3OTA2LCJpYXQiOjE3MTcwMzMxMDYsInVzZXJuYW1lIjoicXFfNTA2NjAzNTYifQ.IfIEZ5rFC43NCsUxw-z1JM3w3v5aUiFW_ece7pfkYY4">MySQL之char、varchar类型简析</a></p><ol start="34"><li>启动脚本文件执行命令</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 批量删除指定key匹配缓存 -match 后面的参数为所需要清除的缓存key的匹配模式</span><br><br><span class="hljs-comment">// 本地测试</span><br><span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span> -cmd ClearAssignCache -match <span class="hljs-string">&#x27;growth:total_rank:*&#x27;</span><br><br><span class="hljs-comment">// 测试环境OR线上环境</span><br>/tmp/work/bin/script -cmd ClearAssignCache -match <span class="hljs-string">&#x27;growth:total_rank:*&#x27;</span><br><br><span class="hljs-comment">// 后台执行</span><br><span class="hljs-number">1.</span> sh -c <span class="hljs-string">&quot;/tmp/work/bin/script -cmd ClearAssignCache -match &#x27;growth:total_rank:*&#x27; &amp;&quot;</span><br><span class="hljs-number">2.</span> /tmp/work/bin/script -cmd ClearAssignCache -match <span class="hljs-string">&#x27;growth:total_rank:*&#x27;</span> &amp;<br><br><span class="hljs-comment">// 示例代码</span><br><span class="hljs-keyword">var</span> cmd = flag.String(<span class="hljs-string">&quot;cmd&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;用户执行的命令&quot;</span>)<br><span class="hljs-keyword">var</span> match = flag.String(<span class="hljs-string">&quot;match&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;用户想要删除的缓存key匹配&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br>execCommand := *cmd<br>matchKey := *match<br>&#125;<br></code></pre></td></tr></table></figure><ol start="35"><li><p>Ping和Telnet是两种不同的网络工具，它们用于不同的目的。以下是它们的主要区别：</p><ul><li><strong>Ping</strong>：主要用于检测网络连通性和诊断网络问题。</li><li><strong>Telnet</strong>：主要用于远程登录和管理系统，以及测试特定端口的连通性。</li></ul><h3 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h3><ol><li><p><strong>功能</strong>：</p><ul><li>用于测试主机之间的连通性。</li><li>通过发送ICMP（Internet Control Message Protocol）回显请求包并等待回显应答来确定目标主机是否可达。</li></ul></li><li><p><strong>使用场景</strong>：</p><ul><li>检查网络连接状况。</li><li>测试网络延迟和数据包丢失率。</li></ul></li><li><p><strong>协议</strong>：</p><ul><li>使用ICMP协议。</li></ul></li><li><p><strong>命令示例</strong>：</p><p>bash复制</p><p><code>ping example.com </code></p></li><li><p><strong>输出信息</strong>：</p><ul><li>显示往返时间、TTL值以及成功与失败的数据包统计信息。</li></ul></li></ol><h3 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h3><ol><li><p><strong>功能</strong>：</p><ul><li>用于远程登录到另一台计算机，通常用于管理设备或服务器。</li><li>提供一个命令行接口，可以执行各种操作。</li></ul></li><li><p><strong>使用场景</strong>：</p><ul><li>远程访问和管理服务器。</li><li>测试特定端口是否开放。</li></ul></li><li><p><strong>协议</strong>：</p><ul><li>使用TCP协议，默认端口为23。</li></ul></li><li><p><strong>命令示例</strong>：</p><p>bash复制</p><p><code>telnet example.com 80 </code></p></li><li><p><strong>输出信息</strong>：</p><ul><li>建立连接后会显示远程系统的提示符，允许用户输入命令进行交互。</li></ul></li></ol></li><li><p>Gorm框架Upsert使用，创建或者更新，如果存在记录则进行更新，如下两种方式</p></li></ol><p><strong>1. 通过ON DUPLICATE KEY来实现创建或更新 需要有唯一主键或者唯一索引才能支持，一条sql, 会导致主键不连续，每次执行的时候主键都会递增，不管本次操作是插入还是更新。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">SQL: INSERT INTO `user_monthly_report` (`stu_id`,`year_month`,`version`,`read_status`,`data`,`create_time`,`update_time`)</span><br><span class="hljs-comment">VALUES (2100051684,&#x27;202401&#x27;,&#x27;v0.0.1&#x27;,1,&#x27;&#123;&quot;key&quot;:&quot;va1111lue&quot;&#125;&#x27;,1724744553,1724744553)</span><br><span class="hljs-comment">ON DUPLICATE KEY UPDATE `data`=VALUES(`data`),`update_time`=VALUES(`update_time`)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestUpsert1</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>report := model.UserMonthlyReport&#123;<br>StuId:      <span class="hljs-number">2100051684</span>,<br>YearMonth:  <span class="hljs-string">&quot;202401&quot;</span>,<br>Version:    <span class="hljs-string">&quot;v0.0.1&quot;</span>,<br>ReadStatus: <span class="hljs-number">1</span>,<br>Data:       []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&#123;\&quot;key\&quot;:\&quot;va1111lue\&quot;&#125;&quot;</span>),<br>CreateTime: time.Now().Unix(),<br>UpdateTime: time.Now().Unix(),<br>&#125;<br>err := DB.Table(<span class="hljs-string">&quot;user_monthly_report&quot;</span>).Clauses(clause.OnConflict&#123;<br><span class="hljs-comment">// 这里可以使用数据库唯一键对应的列名或者使用唯一键的名称</span><br><span class="hljs-comment">// 数据库 UNIQUE KEY `uni_stu_month` (`stu_id`,`year_month`)</span><br><span class="hljs-comment">// 使用这个 Columns:   []clause.Column&#123;&#123;Name: &quot;uni_stu_month&quot;&#125;&#125;, 或者下面这个语句都可以</span><br>Columns:   []clause.Column&#123;&#123;Name: <span class="hljs-string">&quot;stu_id&quot;</span>&#125;, &#123;Name: <span class="hljs-string">&quot;year_month&quot;</span>&#125;&#125;,<br>DoUpdates: clause.AssignmentColumns([]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;update_time&quot;</span>&#125;),<br>&#125;).Create(&amp;report).Error<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%+v\n&quot;</span>, report)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.通过FirstOrCreate 来实现创建或更新 先查询 然后再根据情况创建或更新，两条sql。这个方法实现的upsert不会导致主键不连续，也不依赖唯一索引，更加灵活。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">SQL 1: SELECT * FROM `user_monthly_report` WHERE stu_id = 2100051684 and `year_month` = &#x27;202410&#x27; ORDER BY `user_monthly_report`.`id` LIMIT 1</span><br><span class="hljs-comment">    查询语句查到数据则进行更新、查不到则进行创建</span><br><span class="hljs-comment">SQL 2: UPDATE `user_monthly_report` SET `data`=&#x27;&#123;&quot;key&quot;:&quot;value&quot;&#125;&#x27;,`update_time`=1724746094 WHERE (stu_id = 2100051684 and `year_month` = &#x27;202412&#x27;) AND `id` = 159</span><br><span class="hljs-comment">    SQL 3: INSERT INTO `user_monthly_report` (`stu_id`,`year_month`,`version`,`read_status`,`data`,`create_time`,`update_time`) VALUES (2100051684,&#x27;202411&#x27;,&#x27;v0.0.1&#x27;,1,&#x27;&#123;&quot;key&quot;:&quot;va1111lue&quot;&#125;&#x27;,1724745450,1724745450)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestUpsert2</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>report := model.UserMonthlyReport&#123;<br>StuId:      <span class="hljs-number">2100051684</span>,<br>YearMonth:  <span class="hljs-string">&quot;202412&quot;</span>,<br>Version:    <span class="hljs-string">&quot;v0.0.1&quot;</span>,<br>ReadStatus: <span class="hljs-number">1</span>,<br>Data:       []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&#123;\&quot;key\&quot;:\&quot;value\&quot;&#125;&quot;</span>),<br>CreateTime: time.Now().Unix(),<br>UpdateTime: time.Now().Unix(),<br>&#125;<br>update := model.UserMonthlyReport&#123;<br>Data:       report.Data,<br>UpdateTime: report.UpdateTime,<br>&#125;<br>err := DB.Table(<span class="hljs-string">&quot;user_monthly_report&quot;</span>).Where(<span class="hljs-string">&quot;stu_id = ? and `year_month` = ?&quot;</span>, report.StuId, report.YearMonth).Assign(&amp;update).FirstOrCreate(&amp;report).Error<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%+v\n&quot;</span>, report)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="37"><li>Go “github.com&#x2F;spf13&#x2F;cast” 包转换字符串为int的时候有坑，cast.ToInt()。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCast</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>fmt.Println(cast.ToInt(<span class="hljs-string">&quot;07&quot;</span>))     <span class="hljs-comment">// 7</span><br>fmt.Println(cast.ToInt(<span class="hljs-string">&quot;08&quot;</span>))     <span class="hljs-comment">// 0</span><br>fmt.Println(cast.ToInt(<span class="hljs-string">&quot;012&quot;</span>))    <span class="hljs-comment">// 10</span><br>fmt.Println(cast.ToInt(<span class="hljs-string">&quot;027&quot;</span>))    <span class="hljs-comment">// 23</span><br>fmt.Println(<span class="hljs-string">&quot;--------------&quot;</span>)     <span class="hljs-comment">// 推荐使用如下转换</span><br>fmt.Println(strconv.Atoi(<span class="hljs-string">&quot;07&quot;</span>))   <span class="hljs-comment">// 7</span><br>fmt.Println(strconv.Atoi(<span class="hljs-string">&quot;08&quot;</span>))   <span class="hljs-comment">// 8</span><br>fmt.Println(strconv.Atoi(<span class="hljs-string">&quot;012&quot;</span>))  <span class="hljs-comment">// 12</span><br>fmt.Println(strconv.Atoi(<span class="hljs-string">&quot;027&quot;</span>))  <span class="hljs-comment">// 27</span><br>&#125;<br><span class="hljs-comment">// 这是因为在许多编程语言中，以零开头的数字被解释为八进制数，而不是十进制数。在八进制系统中，只有0到7是有效数字，所以当你尝试转换&quot;08&quot;或&quot;09&quot;时，会导致错误或者返回0，因为它们不是有效的八进制数字。</span><br></code></pre></td></tr></table></figure><ol start="38"><li><p>从数据量比较大的MySQL表里面随机取10条数据，怎么实现比较好？</p></li><li><p><strong>使用MySQL自带的函数Rand()</strong></p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> your_table_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> RAND()<br>LIMIT <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p><code>ORDER BY RAND()</code> 的实现原理相对简单，但在大数据集上可能会影响性能。以下是这个过程的基本步骤：</p><ul><li><p><strong>生成随机数</strong>：对于每一行，MySQL 会使用 <code>RAND()</code> 函数生成一个介于0和1之间的随机数。</p></li><li><p><strong>排序</strong> ：然后 MySQL 对这些随机数进行排序。这意味着每一行都会被赋予一个随机值，并且整个表的数据将根据这些随机值重新排列。</p></li><li><p><strong>限制结果</strong>：最后，使用 <code>LIMIT 10</code> 来返回前10条记录。</p></li></ul><ol start="2"><li><p><strong>另一种方法是创建一个包含所有主键的临时表或缓存，然后从中随机选择：</strong></p><ol><li><p>创建一个包含所有主键的临时表：</p><p><code>CREATE TEMPORARY TABLE temp_keys AS (SELECT id FROM your_table_name); </code></p></li><li><p>从临时表中随机选择10个主键：</p><p><code>SELECT * FROM your_table_name WHERE id IN (    SELECT id FROM temp_keys ORDER BY RAND() LIMIT 10 ); </code></p></li></ol><p>这减少了排序操作的范围，从而提高了效率。</p></li><li><p><strong>查询数据库的最大主键id，然后通过工具函数生成0-最大主键值之间的10个随机数，然后根据随机数查询对应的记录。</strong></p></li></ol><blockquote><p>此方法查询通过主键id查询效率高，把随机数生成放在代码逻辑里面，适用于递增主键。</p></blockquote><ol start="40"><li><p>查询日志中某个记录出现相同的次数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">语句格式：查询语句 <span class="hljs-operator">|</span> 分析语句<br>实例：<br>init roundNo1 success <span class="hljs-keyword">and</span> InitNovActRoundTaskFinishCache <span class="hljs-operator">|</span> <span class="hljs-keyword">SELECT</span> msg, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span>  DuplicateCount <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> msg <span class="hljs-keyword">HAVING</span> DuplicateCount <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/2469c73faa9fbcbe.png"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MQTT学习使用</title>
    <link href="/2025/01/20/MQTT%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/01/20/MQTT%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、长连接"><a href="#1、长连接" class="headerlink" title="1、长连接"></a>1、长连接</h1><h2 id="1-1、为什么用MQTT"><a href="#1-1、为什么用MQTT" class="headerlink" title="1.1、为什么用MQTT"></a>1.1、为什么用MQTT</h2><h3 id="1-1-1、ws方案弊端"><a href="#1-1-1、ws方案弊端" class="headerlink" title="1.1.1、ws方案弊端"></a>1.1.1、ws方案弊端</h3><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/efd3748689415905.png"></p><ol><li>wss长连接客户端与服务pod硬耦合，使得服务必须脱离于k8s体系，稳定性难以保障。</li><li>服务本地内存 存有用户链接信息，pk上下文信息，导致服务为有状态服务。不能正常无损发版更新。</li><li>客户端之间的信息互通，链路长，依赖的组件和数据结构多，通信质量难以保证。</li><li>wss链接的管理比较粗糙，消息通信机制原始，强依赖tcp可靠性，没有额外保障，丢消息概率大。</li><li>由于wss链接是每个user专属一条。并发情况下pod需要维持大量长连接，但是这些长连接，通信频率低、吞吐量低，造成k8s node资源的极大浪费。</li></ol><h3 id="1-1-2、mqtt方案优势"><a href="#1-1-2、mqtt方案优势" class="headerlink" title="1.1.2、mqtt方案优势"></a>1.1.2、mqtt方案优势</h3><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/01ac896afaadc856.png"></p><ol><li>发布订阅架构，业务仅仅需要关注由topic定义的路由规则，而不需要关注底层链接的管理。</li><li>有成熟的长连接保活、探活机制，把客户端的断连、上线，封装成完善的系统事件，供业务使用。</li><li>有完善的消息保障机制，来保障消息的可靠性传输，详情见下文阐述。</li><li>将客户端链接与服务端pod解耦，使得服务端可以像其他无状态服务一样，重启、发版、HPA。</li><li>通过一定的信道设计和消息处理机制设计，能实现高效的通信，单条链接至少1w条&#x2F;s的吞吐量，且可对每条消息维度进行负载均衡。</li></ol><h2 id="1-2、MQTT长连接方案"><a href="#1-2、MQTT长连接方案" class="headerlink" title="1.2、MQTT长连接方案"></a>1.2、MQTT长连接方案</h2><h3 id="1-2-1、mqtt信道设计"><a href="#1-2-1、mqtt信道设计" class="headerlink" title="1.2.1、mqtt信道设计"></a>1.2.1、mqtt信道设计</h3><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/d0a7cb22259066e4.png"></p><p><strong>客户端-&gt;服务端</strong> </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$share</span><span class="hljs-regexp">/group_oral/</span>oral<span class="hljs-regexp">/english/</span>pk<span class="hljs-regexp">/server/</span>+<br></code></pre></td></tr></table></figure><p>服务器端的共享订阅+qos 1的可靠性传输+0会话保存机制。可做到如下可靠性保障：</p><ol><li>从客户端到服务端的消息发送成功后至少到达一次。保障消息不丢失。</li><li>从客户端到服务端的每条消息都会进行负载均衡。保障服务器的负载均衡。</li><li>服务端某一链接异常断连后，客户端消息可以迅速投递的同组下一个链接中。</li></ol><p><strong>服务端-&gt;客户端</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;oral/english/pk/client/&quot;</span>+pkID<br></code></pre></td></tr></table></figure><p>客户端pkid订阅+qos 1的可靠性传输+离线会话保持机制，可做到如下可靠性保障：</p><ol><li>非极端case从服务端到客户端的消息至少到达一次。极端case：弱网离线状态下，重连不超过会话保持时间保障消息不丢。</li><li>服务端到pk的用户客户端的消息保持发送的顺序。不会因为极端网络环境导致消息失序。</li></ol><h3 id="1-2-2、服务端消息处理设计"><a href="#1-2-2、服务端消息处理设计" class="headerlink" title="1.2.2、服务端消息处理设计"></a>1.2.2、服务端消息处理设计</h3><p>在上述阐述中，我们借助mqtt服务器实现了，消息的可靠性传输的信道。但是信道的吞吐量和延时仍需特殊设计。单纯顺序性的消费保障不了吞吐量与低延时。</p><p><strong>服务端快速ack+多协程并发处理响应</strong></p><ol><li>如信道设计图，服务器的链接虽然变少了，但是稍有不慎就会造成读写的线头阻塞，导致总体服务质量下降。</li><li>牺牲处理消息的顺序性，保障大并发的入流量，客户端低等待延时。</li></ol><h2 id="1-3、服务端长连接保障"><a href="#1-3、服务端长连接保障" class="headerlink" title="1.3、服务端长连接保障"></a>1.3、服务端长连接保障</h2><h3 id="1-3-1、服务平滑退出"><a href="#1-3-1、服务平滑退出" class="headerlink" title="1.3.1、服务平滑退出"></a>1.3.1、服务平滑退出</h3><p>http服务pod的平滑退出，由成熟的负载均衡组件(ingress或SLB)来做上线和摘除。而大部分tcp长连接服务，是需要自己HOOK退出事件来做到平滑退出。</p><p>本次口算服务mqtt的长连接，是监听了进程退出信号，来自主摘除topic订阅，同时配合k8s关闭前timesleep，来保障无损退出。</p><h3 id="1-3-2、长连接异常断开"><a href="#1-3-2、长连接异常断开" class="headerlink" title="1.3.2、长连接异常断开"></a>1.3.2、长连接异常断开</h3><p>见信道设计中服务端的介绍，我们通共享订阅+0会话可以做到，异常断连后迅速负载至同组内其他链接。保障断连消息不丢。</p><p>同时设置自动重连机制，来保障mqtt客户端异常断连后各个pod之间发生长时间的负载不均情况。</p><h3 id="1-3-3、长连接延时"><a href="#1-3-3、长连接延时" class="headerlink" title="1.3.3、长连接延时"></a>1.3.3、长连接延时</h3><p>对于mqtt方案的长连接的延时，有做过相应的测试。测试条件：公网本机模拟服务端和客户端   1000 、1w条消息发送等待到达并计算延时，三次实验。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">消息体 fmt.Sprintf(`&#123;<span class="hljs-string">&quot;user_id&quot;</span>:<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;hello&quot;</span>&#125;`, i)<br></code></pre></td></tr></table></figure><p><strong>1000 发送接收延时：</strong></p><table><thead><tr><th>第一次</th><th>第二次</th><th>第三次</th></tr></thead><tbody><tr><td>p50: 29.385msp90: 39.642msp99: 50.374ms</td><td>p50: 24.436msp90: 34.08msp99: 59.66ms</td><td>p50: 29.162msp90: 38.805msp99: 46.829ms</td></tr></tbody></table><p><strong>1w 发送接收延时:</strong></p><table><thead><tr><th>第一次</th><th>第二次</th><th>第三次</th></tr></thead><tbody><tr><td>p50: 26.729msp90: 35.759msp99: 44.011ms</td><td>p50: 27.974msp90: 37.357msp99: 45.933ms</td><td>p50: 27.225msp90: 35.739msp99: 43.872ms</td></tr></tbody></table><h3 id="1-3-4、长连接吞吐量"><a href="#1-3-4、长连接吞吐量" class="headerlink" title="1.3.4、长连接吞吐量"></a>1.3.4、长连接吞吐量</h3><p>对于mqtt方案的长连接的延时，有做过相应的测试。测试条件：公网本机模拟服务端和客户端 1w、10w条消息发送三次并确认到达，仅计算发送耗时。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">消息体 fmt.Sprintf(`&#123;<span class="hljs-string">&quot;user_id&quot;</span>:<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;hello&quot;</span>&#125;`, i)<br></code></pre></td></tr></table></figure><p>1w：  发送总耗时 456.590209ms  586.06925ms  635.62ms</p><p>10w：发送总耗时 4.681789666s    4.062220334s  5.029271834s</p><p>总结公司wifi下外网发送吞吐量约2w条&#x2F;s</p><h1 id="2、-mqtt概述"><a href="#2、-mqtt概述" class="headerlink" title="2、 mqtt概述"></a>2、 mqtt概述</h1><p>MQTT (Message Queue Telemetry Transport) 是一个轻量级传输协议，它被设计用于轻量级的发布&#x2F;订阅式消息传输，MQTT协议针对低带宽网络，低计算能力的设备，做了特殊的优化。是一种简单、稳定、开放、轻量级易于实现的消息协议，在物联网的应用下的信息采集，工业控制，智能家居等方面具有广泛的适用性。</p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/e2c269052bbcba71.png"></p><ul><li>MQTT更加简单：MQTT是一种消息队列协议，使用发布&#x2F;订阅消息模式，提供一对多的消息发布，解除应用程序耦合，相对于其他协议，开发更简单；</li><li>MQTT网络更加稳定：工作在TCP协议上；由TCP协议提供稳定的网络连接；</li><li>轻量级：小型传输，开销很小，协议交换最小化，以降低网络流量；适合低带宽，数据量较小的应用。</li></ul><h2 id="MQTT支持三种消息发布服务质量-QoS"><a href="#MQTT支持三种消息发布服务质量-QoS" class="headerlink" title="MQTT支持三种消息发布服务质量(QoS)"></a><strong>MQTT支持三种消息发布服务质量(QoS)</strong></h2><ul><li>“至多一次”(QoS&#x3D;&#x3D;0)：消息发布完全依赖底层 TCP&#x2F;IP 网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。</li><li>“至少一次”(QoS&#x3D;&#x3D;1)：确保消息到达，但消息重复可能会发生。</li><li>“只有一次”(QoS&#x3D;&#x3D;2)：确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。</li></ul><h2 id="MQTT协议三种身份"><a href="#MQTT协议三种身份" class="headerlink" title="MQTT协议三种身份"></a><strong>MQTT协议三种身份</strong></h2><p>发布者、代理、订阅者，发布者和订阅者都为客户端，代理为服务器，同时消息的发布者也可以是订阅者（为了节约内存和流量发布者和订阅者一般都会定义在一起）。</p><p>MQTT传输的消息分为主题（Topic，可理解为消息的类型，订阅者订阅后，就会收到该主题的消息内容（payload））和负载（payload，可以理解为消息的内容）两部分。</p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/7a88918ff37099b5.png"></p><h2 id="mqtt与websocket的区别"><a href="#mqtt与websocket的区别" class="headerlink" title="mqtt与websocket的区别"></a>mqtt与websocket的区别</h2><p><strong>相同点：</strong></p><ul><li>MQTT 和 WebSocket 都是应用层协议</li><li>目前底层都是使用 TCP 协议确保可靠传输数据</li><li>都规定了自己的报文（消息）结构</li><li>都支持双向通信</li><li>都使用二进制编码（有别于 HTTP 这一类基于文本编码的协议）</li></ul><p><strong>不同点：</strong></p><table><thead><tr><th></th><th>websocket</th><th>mqtt</th></tr></thead><tbody><tr><td>通信模型不同</td><td>webSocket 是一种简单的报文协议，着重解决浏览器和服务端不能进行双向通信的问题。WebSocket 仅仅定义了会话的发起方式和报文格式及类型。如何使用报文通信全由应用程序（各浏览器）控制。</td><td>MQTT 则是一种比较复杂的消息协议。MQTT 不仅规定了具体的协议编码，还规定了客户端和服务器的通信模型。具体来说就是MQTT是一种面向主题（topic）的消息广播协议。客户端可以创建、加入和订阅任意主题，并向主题发布消息或者接收广播消息。除此之外，MQTT 还规定了消息的投放级别（QoS），支持至少一次、至多一次和精确投递三种级别，在协议层规定了是否会产生重复投递。</td></tr><tr><td>报文结构不同</td><td>WebSocket 报文相对简单</td><td>mqtt相对复杂</td></tr><tr><td>消息收发方式不同</td><td>WebSocket 收发消息不需要对方确认。因为底层的 TCP 协议会完成可靠传输</td><td>MQTT 收发消息需要根据投递级别进行确认</td></tr></tbody></table><h2 id="2-1-mqtt底层原理"><a href="#2-1-mqtt底层原理" class="headerlink" title="2.1 mqtt底层原理"></a>2.1 mqtt底层原理</h2><p><strong>mqtt协议底层方法</strong></p><p>CONNECT：客户端连接到服务器</p><p>CONNACK：连接确认</p><p>PUBLISH：发布消息</p><p>PUBACK：发布确认</p><p>PUBREC：发布的消息已接收</p><p>PUBREL：发布的消息已释放</p><p>PUBCOMP：发布完成</p><p>SUBSCRIBE：订阅请求</p><p>SUBACK：订阅确认</p><p>UNSUBSCRIBE：取消订阅</p><p>UNSUBACK：取消订阅确认</p><p>PINGREQ：客户端发送心跳</p><p>PINGRESP：服务端心跳响应</p><p>DISCONNECT：断开连接</p><p>AUTH：认证</p><p><strong>mqtt协议数据格式</strong></p><p>在MQTT协议中，一个MQTT数据包由：固定头（Fixed header）、可变头（Variable header）、消息体 （payload）三部分构成。MQTT数据包结构如下：</p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/7b43ffff71c2ef70.png"></p><p><strong>固定头</strong></p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/faa4d4f16e3a352d.png"></p><p>固定头存在于所有MQTT数据包中， 固定头包含两部分内容，首字节(字节1)和剩余消息报文长度(从第二个字 节开始，长度为1-4字节)，剩余长度是当前包中剩余内容长度的字节数，包括变量头和有效负载中的数据）</p><p><strong>数据包类型</strong></p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/a9849016946d37d7.png"></p><p>标识位</p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/7fe395ec3ea106ed.png"></p><p>首字节的低4位(bit3~bit0)用来表示某些报文类型的控制字段，实际上只有少数报文类型有控制位。</p><p>其中Bit[3]为DUP字段，如果该值为1，表明这个数据包是一条重复的消息；否则该数据包就是第一次发布的消息。</p><p>如果Bit 1和Bit 2都为0，表示QoS 0：至多一次；如果Bit 1为1，表示QoS 1：至少一次；如果Bit 2为1，表示QoS 2：只有一次；如果同时将Bit 1和Bit 2都设置成1，那么客户端或服务器认为这是一条非法的消息，会关闭当前连接。</p><p><strong>可变头</strong></p><p>可变头的意思是可变化的消息头部。有些报文类型包含可变头部有些报文则不包含。可变头部在固定头部和消 息内容之间，其内容根据报文类型不同而不同。</p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/c9376cec3f87e8f6.png"></p><h3 id="2-1-1-不同投递级别的实现"><a href="#2-1-1-不同投递级别的实现" class="headerlink" title="2.1.1 不同投递级别的实现"></a>2.1.1 不同投递级别的实现</h3><p><strong>qos&#x3D;0</strong></p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/d009b7fc14908fd9.png"></p><p>第一步：Publisher 将消息PUBLISH到Broker中去，发出去后自己将消息删除。</p><p>第二步：Broker接收到消息之后直接发往Subscriber，他们三者之间是不存在确认关系的，没有确认机制，消息收不收的到无所谓。完成一次服务的通信。</p><p><strong>qos&#x3D;1</strong></p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/3125b9b193800cbb.png"></p><p>第一步：Publisher 将消息 Store（存储）一份在自己这里，然后PUBLISH到Broker中去。</p><p>第二步：Broker存储一份消息之后就将信息PUBLISH到Subscriber中，然后给Publisher一个PUBACK的确认，确认已经发布到Subscrliber中，Publisher才将自己的信息删除。</p><p>第三步：Subscrliber收到信息之后，会给Broker发送一个PUBACK确认，确认信息已收到，Broker拿到确认之后删除自身的信息。完成一次服务的通信。</p><p><strong>qos&#x3D;2</strong></p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/ea180cdc514b82de.png"></p><p>第一步：Publisher先存储一份消息，再将消息PUBLISH到Broker中。</p><p>第二步：Broker得到消息之后先存一份消息，然后PUBREC告诉Publisher我已经收到消息，Publisher接收到请求之后给Broker回一个PUBREL可以发送信息到Subscrliber了，然后Broker就把信息PUBLISH到Subscrliber上，接着就给Publisher回一个PUBCOMP表示消息已发送完成，Publisher接收到这个请求之后就将自身存储的信息删除。</p><p>第三步：Subscrliber接收到信息之后先Store存储信息，存储完成之后向Broker发送一个PUBREC表示消息已经收到，Broker接收到请求之后回应一个PUBREL表示消息可以释放，也就是说Subscrliber可以用此消息去处理业务请求了，Subscrliber将消息Notify（通知）上层应用进行业务处理，业务处理完成Subscrliber会给Broker回复一个PUBCOMP表示业务处理已经完成，Broker就可以把信息删除，接着Subscrliber也把自身信息删除，完成一次服务的通信。</p><h3 id="2-1-2-mqtt常用的消息类型"><a href="#2-1-2-mqtt常用的消息类型" class="headerlink" title="2.1.2 mqtt常用的消息类型"></a>2.1.2 mqtt常用的消息类型</h3><p><strong>topic说明：</strong></p><p>MQTT 主题名称是用于消息路由的 UTF-8 编码字符串。为了提供更大的灵活性，MQTT 支持分层主题命名空间。主题通常按层级分级，并使用斜杠 &#x2F; 在级别之间进行分隔。在使用时候不需要提前创建topic。</p><p><strong>保留消息：</strong></p><p>发布者发布消息时，如果 Retained 标记被设置为 true，则该消息即是 MQTT 中的保留消息（Retained Message）。MQTT 服务器会为每个主题存储最新一条保留消息，以方便消息发布后才上线的客户端在订阅主题时仍可以接收到该消息。（如果设置为false,新建立连接的客户端无法收到最近的一条消息）</p><p><strong>通配符订阅：</strong></p><p>单层通配符：+ 是一个通配符字符，仅匹配一个主题层级 </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-string">&quot;+&quot;</span> 有效<br><span class="hljs-string">&quot;sensor/+&quot;</span> 有效<br><span class="hljs-string">&quot;sensor/+/temperature&quot;</span> 有效<br><span class="hljs-string">&quot;sensor+&quot;</span> 无效 <span class="hljs-comment">(没有占据整个层级)</span><br></code></pre></td></tr></table></figure><p>多层通配符：# 匹配主题中的任意层级。多层通配符表示它的父级和任意数量的子层级。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-string">&quot;#&quot;</span> 有效，匹配所有主题<br><span class="hljs-string">&quot;sensor/#&quot;</span> 有效<br><span class="hljs-string">&quot;sensor/bedroom#&quot;</span> 无效 <span class="hljs-comment">(没有占据整个层级)</span><br><span class="hljs-string">&quot;sensor/#/temperature&quot;</span> 无效 <span class="hljs-comment">(不是主题最后一个字符)</span><br></code></pre></td></tr></table></figure><p><strong>延迟消息</strong></p><p>（emqx 拥有的扩展功能）延迟发布是 EMQX 支持的 MQTT 扩展功能。当客户端使用特殊主题前缀$delayed&#x2F;{DelayInteval} 发布消息时，将触发延迟发布功能，可以实现按照用户配置的时间间隔延迟发布消息。 （仅支持秒级）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$delayed</span><span class="hljs-regexp">/&#123;DelayInterval&#125;/</span>&#123;TopicName&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-emqx"><a href="#2-2-emqx" class="headerlink" title="2.2 emqx"></a>2.2 emqx</h2><p>mqtt本身是一种网络协议，有多种实现此协议的中间件如（emqx、mosquitto）本次主要讲emqx。</p><h3 id="2-2-1-负载均衡"><a href="#2-2-1-负载均衡" class="headerlink" title="2.2.1 负载均衡"></a><strong>2.2.1 负载均衡</strong></h3><p>当在 EMQX 中部署 LB (负载均衡器) 后，LB 会负责处理 TCP 连接，并将收到的 MQTT 连接与消息分发到不同的 EMQX 集群节点。</p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/88a49d67cdb5c29c.png"></p><h3 id="2-2-2-EMQX-分布式集群设计"><a href="#2-2-2-EMQX-分布式集群设计" class="headerlink" title="2.2.2 EMQX 分布式集群设计"></a>2.2.2 EMQX 分布式集群设计</h3><p>EMQX 分布式集群的基本功能是转发和发布消息到订阅者</p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/1f89ed0bf0718357.png"></p><p>emqx需要维护订阅表、路由表、主题树</p><p><strong>订阅表</strong>：</p><p>用于存储 主题-&gt;订阅者 之间的映射关系，从而确保能将传入消息正确路由到对应的客户端。该数据只存在于订阅者所在的 EMQX 节点上，类似的结构如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">node1</span>:<br>    topic<span class="hljs-number">1</span> -&gt; clie<span class="hljs-symbol">nt1</span>, clie<span class="hljs-symbol">nt2</span><br>    topic<span class="hljs-number">2</span> -&gt; clie<span class="hljs-symbol">nt3</span><br><span class="hljs-symbol">node2</span>:<br>    topic<span class="hljs-number">1</span> -&gt; clie<span class="hljs-symbol">nt4</span><br></code></pre></td></tr></table></figure><p><strong>路由表：</strong></p><p>路由表记录了主题-&gt;节点之间的映射，它存储每个节点上客户端订阅的主题列表，并用于将消息路由到对应的节点。该数据会在同一集群中的所有节点复制一份。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">topic1</span> -&gt;</span> node1, node2<br><span class="hljs-function"><span class="hljs-title">topic2</span> -&gt;</span> node3<br><span class="hljs-function"><span class="hljs-title">topic3</span> -&gt;</span> node2, node4<br></code></pre></td></tr></table></figure><p><strong>主题树：</strong></p><p>主题树是一种分层数据结构，它存储有关主题层次结构的信息，并用于消息与订阅客户端的匹配。主题树会在同一集群中的所有节点复制一份。</p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/8a2eb99c5a374c17.png"></p><table><thead><tr><th>Client</th><th>Node</th><th>Subscribed topic</th></tr></thead><tbody><tr><td>client1</td><td>node1</td><td>t&#x2F;+&#x2F;x, t&#x2F;+&#x2F;y</td></tr><tr><td>client2</td><td>node2</td><td>t&#x2F;#</td></tr><tr><td>client3</td><td>node3</td><td>t&#x2F;+&#x2F;x, t&#x2F;a</td></tr></tbody></table><p>当一个 MQTT 客户端发布消息时，它所在的节点会查找路由表，并根据消息主题将消息转发到对应的节点（可能是多个节点）。</p><p>然后，接收到消息的节点会查找本地订阅表，并将消息发送至对应的订阅者。</p><p>例如，当<code>客户端 1</code> 发布一条消息到主题 <code>t/a</code> 时，消息在节点之间的路由和分发如下:</p><ol><li><code>客户端 1</code> 向<code>节点 1</code> 发布一条主题为 <code>t/a</code> 的消息；</li><li><code>节点 1</code> 查询主题树，了解到 <code>t/a</code> 与现有主题 <code>t/a</code> 和 <code>t/#</code> 相匹配。</li><li><code>节点 1</code> 查询路由表，并得知：<ol><li><code>节点 2</code> 上有客户端订阅了 <code>t/#</code> 主题；</li><li><code>节点 3</code> 上有客户端订阅了 <code>t/a</code> 主题；因此<code>节点 1</code> 会将消息同时转发给<code>节点 2</code> 和<code>节点 3</code>。</li></ol></li><li><code>节点 2</code> 收到转发的 <code>t/a</code> 消息后，通过查询本地订阅表，将消息分发给订阅了 <code>t/#</code> 的客户端。</li><li><code>节点 3</code> 收到转发的 <code>t/a</code> 消息后，通过查询本地订阅表，将消息分发给订阅了 <code>t/a</code> 的客户端。</li><li>消息发布完成。</li></ol><h3 id="2-2-3-emqx5-0"><a href="#2-2-3-emqx5-0" class="headerlink" title="2.2.3 emqx5.0"></a>2.2.3 emqx5.0</h3><p>MQX 节点之间的连接模式从 Mnesia 的全网状拓扑结构转向 Mria 的网状+星型状拓扑结构，集群中节点可以按角色分为核心节点（Core）或复制者节点（Replicant）。</p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/2f5fb930a90f57c8.png"></p><p><strong>核心节点</strong></p><p>核心节点作为数据库的数据层，节点间以全网状连接，每个节点都包含一个最新的数据副本，这保证了容错性：只要有一个节点存活，数据就不会丢失。核心节点一般是静态和持久的，不建议进行自动伸缩（即经常添加、删除或替换节点）。</p><p><strong>复制节点</strong></p><p>复制节点会连接到核心节点，并被动地复制来自 核心节点的数据更新。复制节点不允许执行任何的写操作，而是将其转交给核心节点代为执行。同时，由于复制节点有一个完整的本地数据副本，因此数据读取速度非常快，这样有助于降低 EMQX 路由的时延。</p><p><strong>问题解决</strong></p><p>以上已经解决了前两个问题，第三个问题。在emqx中提供了建立连接、订阅，取消订阅、超时重连，探活等一系列功能。通过相应的配置（keepalive、pingtimeout、cleansession）等参数即可实现。（后端可以在服务启动时建立连接、前端则根据具体场景选择合适的时机建立连接并订阅）。</p><p><img src="https://s3.bmp.ovh/imgs/2025/02/19/5adb54496689ff2d.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>物联网</tag>
      
      <tag>长链接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式数据一致性解决方案</title>
    <link href="/2024/12/30/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/12/30/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="分布式数据一致性解决方案"><a href="#分布式数据一致性解决方案" class="headerlink" title="分布式数据一致性解决方案"></a>分布式数据一致性解决方案</h3><p>在聊到一致性问题时，其实涉及两方面内容</p><p>副本数据一致性，主要时考虑同一份逻辑数据存在多个物理的数据副本的一致性</p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/42aec26d027cd884.png" alt="img"></p><p>另一种是事务一致性</p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/be32ad972f7657b9.png" alt="img"></p><p>本文内容侧重于后者，即数据操作从一个合法的状态迁移到另一个合法的状态</p><h1 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h1><p>为方便描述，假设下单流程只有两个操作</p><ul><li>添加订单</li><li>锁券</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">addOrder()<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> order_info ...<br>  <br>lockCoupon()<br>  <span class="hljs-keyword">UPDATE</span> user_coupon <span class="hljs-keyword">set</span> status <span class="hljs-operator">=</span> ? ...<br></code></pre></td></tr></table></figure><p>对于这 2 个操作，可能有 3 个操作结果</p><ul><li>2 个操作都成功了</li><li>2 个操作都失败了</li><li>添加订单成功了，锁定卡券失败了</li></ul><p>前 2 种结果最终状态都是合法的，第 3 个会导致下单了，用户的券没锁定，从而会有用户套利的风险，怎么解决呢？单体数据时代我们直接使用带有事务能力的数据库就行，比如 MySQL、Pg 等。</p><p>随着服务化的流行，我们对服务按领域进行了拆分，比如订单、促销、卡券、支付等。这样的好处是各模块进行了解耦，提高开发维护效率，但也带来了一致性的挑战。<img src="https://s3.bmp.ovh/imgs/2024/12/30/0c295643b84883df.png" alt="img"></p><p>单机数据库，我们可以直接使用数据库的事务能力达到一致性，多机呢，这其实就涉及到分布式事务，本文会提及当前的一些行业方案。</p><h1 id="行业方案"><a href="#行业方案" class="headerlink" title="行业方案"></a>行业方案</h1><h2 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h2><p>2PC，二阶段提交，将一个事务分成了两步来提交。第一步做准备动作，第二步做提交 &#x2F; 回滚动作，这两步之间的协调是交由事务协调者来管理，保证多步操作的原子性</p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/777b6a0ecb4eba2c.png" alt="img"></p><p>我们来看下 2PC 是怎么解决上面的下单问题的。</p><p>引入事务协调者的角色，来协调订单系统和卡券系统，协调者对客户端提供一个完整的「使用优惠券下单」的服务，在这个服务的内部，协调者再分别调用订单和促销的相应服务。</p><p>在准备阶段，协调者给订单系统和卡券系统发送准备命令，订单系统和促销系统分别开启事务执行对应的数据库操作，但是并不提交事务。</p><p>如果两个系统都返回准备成功，进入提交阶段。协调者给两个系统发送提交命令，待收到所有响应之后，给客户端返回成功响应。</p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/70da65063444e875.png" alt="img"></p><p>上面说的是正常情况，异常情况下呢？</p><p>在准备阶段，如果任何一步出现错误或者超时，协调者会给两个系统发送回滚事务命令。每个系统收到命令后，回滚自己的本地事务，分布式事务执行失败。</p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/8ad07b2923dee2b7.png" alt="img"></p><p>如果准备阶段成功，进入提交阶段，整个分布式事务只能成功，不能失败。但提交阶段可能还是有异常，怎么办？比如发生网络传输失败的情况，需要反复重试，直到提交成功为止。</p><p>2PC 是一种强一致的设计，它可以保证原子性和隔离性。只要全局事务完成，订单库和卡券库中的数据一定是一致的状态。缺点也很明显，整个事务的执行过程需要阻塞服务端的线程和数据库的会话，并发场景下的性能不会很高。</p><h2 id="Seata-AT"><a href="#Seata-AT" class="headerlink" title="Seata AT"></a>Seata AT</h2><p>2PC 并发性能不高核心点在于准备阶段，资源准备就绪之后需要等待其他资源都就绪才能提交，这样会导致长时间的事务占用。有没有可能我们准备阶段就提交事务呢？阿里开源的分布式事务中间件 Seata 提供了一种思路解决这个问题。</p><p>AT 模式是 Seata 创新的一种非侵入式的分布式事务解决方案，Seata 在内部做了对数据库操作的代理层，我们使用 Seata AT 模式时，实际上用的是 Seata 自带的数据源代理 DataSourceProxy，Seata 在这层代理中加入了很多逻辑，比如插入回滚 undo_log 日志，检查全局锁等。</p><p><strong>准备阶段</strong></p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/255c120daa3513b7.png" alt="img"></p><p><strong>提交&#x2F;回滚阶段</strong></p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/050f49660568426f.png" alt="img"></p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/92f8fda8f2f0627f.png" alt="img"></p><p>这里旨在说明 AT 回滚的思路，详细原理可参考官方文档 <a href="https://seata.apache.org/zh-cn/docs/user/mode/at">https://seata.apache.org/zh-cn/docs/user/mode/at</a></p><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h2><p>TCC 要求每个分支事务实现三个操作：预处理 Try、确认 Conﬁrm、撤销 Cancel</p><table><thead><tr><th><strong>操作</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Try</td><td>业务代码会预留业务所需的全部资源，比如冻结用户账户 100 元、提前扣除一个商品库存、提前创建一个没有开始交易的订单等。业务到这些资源后，后续两个阶段操作就可以无锁进行了</td></tr><tr><td>Confirm</td><td>业务确认所需的资源都拿到后，子事务会并行执行这些业务。执行时可以不做任何锁互斥，也无需检查，直接执行 Try 阶段准备的所有资源就行</td></tr><tr><td>Cancel</td><td>如果子事务在 Try 阶段或 Confirm 阶段多次执行重试后仍旧失败，TM 就会执行 Cancel 阶段的代码，并释放 Try 预留的资源，同时回滚 Confirm 期间的内容</td></tr></tbody></table><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/46b2d6929ec253b5.png" alt="img"></p><p>事务协调者首先发起所有的分支事务的 Try 操作，任何一个分支事务的 Try 操作执行失败，协调者将会发起所有分支事务的 Cancel 操作；若 Try 操作全部成功，协调者将会发起所有分支事务的 Conﬁrm 操作。其中 Conﬁrm&#x2F;Cancel 操作若执行失败，事务协调者首会进行重试</p><p>TCC 可以理解为一种 2PC 变体，适用于应用层&#x2F;服务层的 2PC。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>除了上面的方案外，常用的还有本地消息表和事务消息，这两者适用于后续事务一般都能执行成功或者异步更新数据的场景，比如发短信、发邮件、清空购物车等，而像上面下单流程中锁券能不能成功和用户动作相关，不大适用于这种方式，出于完整性这里简单提下</p><h3 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a>本地消息表</h3><p>看经典的转账问题</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">支付宝账户表：A (<span class="hljs-built_in">id</span>, user_id, amount)<br>余额宝账户表：B (<span class="hljs-built_in">id</span>, user_id, amount)<br></code></pre></td></tr></table></figure><p>用户的 user_id &#x3D; 1，从支付宝转帐1万快到余额宝分为两个步骤</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">// 1 支付宝表扣除1万：</span><br>UPDATE A <span class="hljs-keyword">SET</span> amount <span class="hljs-comment">= amount - 10000 WHERE user_id = 1</span>;<br><span class="hljs-comment">// 2 余额宝表增加1万：</span><br>UPDATE B <span class="hljs-keyword">SET</span> amount <span class="hljs-comment">= amount + 10000 WHERE user_id = 1</span>;<br></code></pre></td></tr></table></figure><p>如何保证数据一致性呢？</p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/233cb8f3996e2f94.png" alt="img"></p><h3 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h3><p>举个例子，用户下完单后可以异步删除购物车中对应的商品</p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/2e36e384444222a1.png" alt="img"></p><p>如果创建订单成功，发送消息失败，就会导致有订单且购物车还有对应商品的情况，所以需要保证这两个操作的原子性，这里用事务消息就很合适。</p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/aef3a3af181026f4.png" alt="img"></p><p>着重说明下，订单系统给消息服务器发送一个「半消息」，这个半消息不是说消息内容不完整，它包含的内容就是完整的消息内容，半消息和普通消息的唯一区别是，在事务提交之前，对于消费者来说，这个消息是不可见的。</p><p>这个实现过程中，有一个问题是没有解决的。如果在第 4 步提交事务消息时失败了怎么办？Kafka 的解决方案比较简单粗暴，直接抛出异常，让用户自行处理。我们可以在业务代码中反复重试提交，直到提交成功，或者进行回滚补偿。RocketMQ 则给出了另外一种解决方案</p><p><img src="https://s3.bmp.ovh/imgs/2024/12/30/03c2557f41693876.png" alt="img"></p><p>本地消息表的一般都能转为事务消息模式，省去创建、查消息表的成本。</p><h2 id="补偿"><a href="#补偿" class="headerlink" title="补偿"></a>补偿</h2><p>由于环境、网络等问题，任何阶段服务之间交互都可能出错。正向出错时，逻辑会走到异常分支里，异常分支会进行回滚。但是，如果回滚逻辑也出现问题了怎么办呢？答案还是补偿。</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>分布式</tag>
      
      <tag>一致性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch学习使用</title>
    <link href="/2024/10/30/Elasticsearch%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/30/Elasticsearch%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Elasticsearch入门学习"><a href="#Elasticsearch入门学习" class="headerlink" title="Elasticsearch入门学习"></a>Elasticsearch入门学习</h4><h5 id="1-什么是Elasticsearch"><a href="#1-什么是Elasticsearch" class="headerlink" title="1.什么是Elasticsearch"></a>1.什么是Elasticsearch</h5><ul><li>elasticsearch是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容。</li><li>elasticsearch结合kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域。</li><li>elasticsearch是elastic stack的核心，负责存储、搜索、分析数据。<br><img src="https://s3.bmp.ovh/imgs/2025/01/02/520ef1391e425079.png"></li></ul><h5 id="2-正向索引和倒排索引"><a href="#2-正向索引和倒排索引" class="headerlink" title="2.正向索引和倒排索引"></a>2.正向索引和倒排索引</h5><p><strong>1.正向索引</strong><br><code>基于文档（每一条数据就是一个文档 ）id创建索引。查询词条时必须先找到文档，而后判断是否包含词条</code><br><img src="https://s3.bmp.ovh/imgs/2025/01/02/c13d0e07333c2b16.png"><br><strong>2.倒排索引</strong><br><code>对文档内容分词，对词条（对文档中的内容分词，得到的词语就是词条）创建索引，并记录词条所在文档的信息。查询时先根据词条查询到文档id，而后获取到文档</code><br><img src="https://s3.bmp.ovh/imgs/2025/01/02/663dc829e8f0561d.png"><br>elasticsearch是面向文档存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在elasticsearch中。<br><img src="https://s3.bmp.ovh/imgs/2025/01/02/251fb5e436689256.png"><br><strong>3.ES与MySQL基本概念的对比</strong></p><p>MySQL：擅长事务类型操作，可以确保数据的安全和一致性<br>Elasticsearch：擅长海量数据的搜索、分析、计算<br><img src="https://s3.bmp.ovh/imgs/2025/01/02/6f6a5b8c20dc0e73.png"><br><code>将数据写入MySQL后，通过某种方法将数据同步到ES，以后从ES搜索数据，这样达到了ES和MySQL互补的效果</code><br><img src="https://s3.bmp.ovh/imgs/2025/01/02/8647fcbe74db4cec.png"></p><h5 id="3-安装ES"><a href="#3-安装ES" class="headerlink" title="3.安装ES"></a>3.安装ES</h5><p><strong>3.1 创建网络</strong><br>因为我们还需要部署kibana容器，因此需要让es和kibana容器互联。这里先创建一个网络：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network create es-net<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2025/01/02/0b11dbcb72873e25.png"></p><p><strong>3.2 拉取镜像并部署单点ES</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull elasticsearch:8.17.0 <span class="hljs-comment"># 版本自己选择，不同版本有差异</span><br><br>docker run -d \<br>  --name es \<br>    -e <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \<br>    -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>    -v es-data:/usr/share/elasticsearch/data \<br>    -v es-plugins:/usr/share/elasticsearch/plugins \<br>    --privileged \<br>    --network es-net \<br>    -p 9200:9200 \<br>    -p 9300:9300 \<br>elasticsearch:8.17.0<br></code></pre></td></tr></table></figure><p>命令解释：</p><ul><li><code>-e &quot;cluster.name=es-docker-cluster&quot;</code>：设置集群名称</li><li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的地址，可以外网访问</li><li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：内存大小</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：非集群模式</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定es的数据目录</li><li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定es的日志目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定es的插件目录</li><li><code>--privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code> ：加入一个名为es-net的网络中</li><li><code>-p 9200:9200</code>：端口映射配置，供用户访问</li></ul><p>访问IP:9200，可以看到ES安装成功。<br><img src="https://s3.bmp.ovh/imgs/2024/12/31/369303ecd35bda38.png"></p><h5 id="4-安装Kibana"><a href="#4-安装Kibana" class="headerlink" title="4.安装Kibana"></a>4.安装Kibana</h5><p>kibana可以给我们提供一个elasticsearch的可视化界面，便于我们学习</p><p><strong>4.1 拉取kibana镜像并创建容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull kibana:8.17.0   <span class="hljs-comment"># 具体版本支持需要去dockerhub官网查询是否支持你的电脑系统</span><br><br>docker run -d \<br>  --name kibana \<br>  -e ELASTICSEARCH_HOSTS=http://localhost:9200 \<br>  --network=es-net \<br>  -p 5601:5601  \<br>  kibana:8.17.0<br></code></pre></td></tr></table></figure><ul><li><code>--network es-net</code> ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200&quot;</code>：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul><p><strong>4.2 访问IP:5601</strong><br><img src="https://s3.bmp.ovh/imgs/2025/01/02/77e894b40ccb3e9c.png"><br>kibana中提供了一个DevTools界面，这个界面中可以编写DSL来操作elasticsearch。并且对DSL语句有自动补全功能。<br><img src="https://s3.bmp.ovh/imgs/2025/01/02/7625dbc668700359.png"></p><h5 id="5-安装IK分词器"><a href="#5-安装IK分词器" class="headerlink" title="5.安装IK分词器"></a>5.安装<a href="https://so.csdn.net/so/search?q=IK%E5%88%86%E8%AF%8D%E5%99%A8&spm=1001.2101.3001.7020">IK分词器</a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入容器内部</span><br>docker <span class="hljs-built_in">exec</span> -it es /bin/bash<br><br><span class="hljs-comment"># 在线下载并安装</span><br>./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip<br><br><span class="hljs-comment">#退出</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-comment">#重启容器</span><br>docker restart es<br></code></pre></td></tr></table></figure><p>IK分词器包含两种模式：</p><ul><li><code>ik_smart</code>：最少切分</li><li><code>ik_max_word</code>：最细切分</li></ul><p>或者直接将解压好的ik文件上传到 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;es-plugins&#x2F;_data目录下，然后重启es即可！</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">POST /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;广州大学冲双一流！&quot;</span>,<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word/ik_smart&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2025/01/02/00c8651d10408fbe.png"></p><p><img src="https://s3.bmp.ovh/imgs/2025/01/02/a24cca50da4d46a1.png"></p><h4 id="二-索引库操作"><a href="#二-索引库操作" class="headerlink" title="二.索引库操作"></a>二.索引库操作</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">索引库，类似于数据库的表，各种字段都定义好了属性，类似于一张空表<br></code></pre></td></tr></table></figure><h5 id="1-创建索引库"><a href="#1-创建索引库" class="headerlink" title="1.创建索引库"></a>1.创建索引库</h5><p>mapping是对索引库中文档的约束，常见的mapping属性包括：<br>type：字段数据类型，常见的简单类型有：<br>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）<br>数值：long、integer、short、byte、double、float、<br>布尔：boolean<br>日期：date<br>对象：object<br>index：是否创建索引，默认为true<br>analyzer：使用哪种分词器，若类型为text，要指定分词器<br>properties：该字段的子字段</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs powershell">PUT /索引库名称<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;字段名&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;字段名2&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>        <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;false&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;字段名3&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;子字段&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      // ...略<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs powershell">PUT /gzhu<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;email&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>        <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;false&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;admin&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;firstName&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;lasttName&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-查询索引库"><a href="#2-查询索引库" class="headerlink" title="2.查询索引库"></a>2.查询索引库</h5><p>查询索引库：GET &#x2F;索引库名</p><h5 id="3-删除索引库"><a href="#3-删除索引库" class="headerlink" title="3.删除索引库"></a>3.删除索引库</h5><p>删除索引库：DELETE &#x2F;索引库名</p><h5 id="4-添加新字段"><a href="#4-添加新字段" class="headerlink" title="4.添加新字段"></a>4.添加新字段</h5><p>添加字段：PUT &#x2F;索引库名&#x2F;_mapping</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell">PUT /索引库名/_mapping<br>&#123;<br>  <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;新字段名&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三-文档操作"><a href="#三-文档操作" class="headerlink" title="三.文档操作"></a>三.文档操作</h4><h5 id="1-新增文档"><a href="#1-新增文档" class="headerlink" title="1.新增文档"></a>1.新增文档</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">POST /索引库名/_doc/文档id<br>&#123;<br>    <span class="hljs-string">&quot;字段1&quot;</span>: <span class="hljs-string">&quot;值1&quot;</span>,<br>    <span class="hljs-string">&quot;字段2&quot;</span>: <span class="hljs-string">&quot;值2&quot;</span>,<br>    <span class="hljs-string">&quot;字段3&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;子属性1&quot;</span>: <span class="hljs-string">&quot;值3&quot;</span>,<br>        <span class="hljs-string">&quot;子属性2&quot;</span>: <span class="hljs-string">&quot;值4&quot;</span><br>    &#125;,<br>    // ...<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell">POST /gzhu/_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;计算机科学与网络工程学院&quot;</span>,<br>  <span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;gzhucom@edu.com&quot;</span>,<br>  <span class="hljs-string">&quot;admin&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;firstName&quot;</span>:<span class="hljs-string">&quot;张&quot;</span>,<br>    <span class="hljs-string">&quot;lastName&quot;</span>:<span class="hljs-string">&quot;三&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-查询文档"><a href="#2-查询文档" class="headerlink" title="2.查询文档"></a>2.查询文档</h5><p>GET &#x2F;索引库名&#x2F;_doc&#x2F;文档id</p><h5 id="3-删除文档"><a href="#3-删除文档" class="headerlink" title="3.删除文档"></a>3.删除文档</h5><p>DELETE &#x2F;索引库名&#x2F;_doc&#x2F;文档id</p><h5 id="4-修改文档"><a href="#4-修改文档" class="headerlink" title="4.修改文档"></a>4.修改文档</h5><p><strong>4.1 全量修改：删除旧文档，添加新文档，若文档不存在，也可以添加文档</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">PUT /索引库名/_doc/文档id<br>&#123;<br>    <span class="hljs-string">&quot;字段1&quot;</span>: <span class="hljs-string">&quot;值1&quot;</span>,<br>    <span class="hljs-string">&quot;字段2&quot;</span>: <span class="hljs-string">&quot;值2&quot;</span>,<br>    // ... 略<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.2 局部修改文档：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">POST /索引库名/_update/文档id<br>&#123;<br>    <span class="hljs-string">&quot;doc&quot;</span>: &#123;<br>         <span class="hljs-string">&quot;字段名&quot;</span>: <span class="hljs-string">&quot;新的值&quot;</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="四-RestClient操作索引库"><a href="#四-RestClient操作索引库" class="headerlink" title="四.RestClient操作索引库"></a>四.RestClient操作索引库</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。<br></code></pre></td></tr></table></figure><p>官方库：elastic&#x2F;go-elasticsearch‌ <a href="https://github.com/elastic/go-elasticsearch">https://github.com/elastic/go-elasticsearch</a></p><p>著名三方库：olivere&#x2F;elastic    <a href="https://github.com/olivere/elastic">https://github.com/olivere/elastic</a></p><p><a href="https://zhuanlan.zhihu.com/p/330825213">Go-elasticsearch客户端对比</a></p><h4 id="五-DSL查询文档"><a href="#五-DSL查询文档" class="headerlink" title="五.DSL查询文档"></a>五.DSL查询文档</h4><h5 id="1-查询基本语法"><a href="#1-查询基本语法" class="headerlink" title="1.查询基本语法"></a>1.查询基本语法</h5><p>Elasticsearch提供了基于JSON的DSL（Domain Specific Language）来定义查询。常见的查询类型包括：</p><ul><li>查询所有：查询出所有数据，一般测试用。例如：match_all</li><li>全文检索（full text）查询：利用分词器对用户输入内容分词，然后去倒排索引库中匹配。例如：<br>match_query<br>multi_match_query</li><li>精确查询：根据精确词条值查找数据，一般是查找keyword、数值、日期、boolean等类型字段。例如：<br>ids<br>range<br>term</li><li>地理（geo）查询：根据经纬度查询。例如：<br>geo_distance<br>geo_bounding_box</li><li>复合（compound）查询：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如：<br>bool<br>function_score</li></ul><p><strong>1.1 查询所有文档</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span><span class="hljs-keyword">order</span><span class="hljs-operator">/</span>_search<br>&#123;<br>  &quot;query&quot;:&#123;<br>    &quot;match_all&quot;:&#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1.2 全文检索（full text）查询</strong></p><ul><li>match查询，查询字段name中包含5G的文档</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span><span class="hljs-keyword">order</span><span class="hljs-operator">/</span>_search<br>&#123;<br>  &quot;query&quot;:&#123;<br>    &quot;match&quot;: &#123;<br>      &quot;name&quot;: &quot;5G&quot;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>multi_match查询，返回字段name或者user.address.keyword包含天津市的文档</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span><span class="hljs-keyword">order</span><span class="hljs-operator">/</span>_search<br>&#123;<br>  &quot;query&quot;:&#123;<br>    &quot;multi_match&quot;: &#123;<br>      &quot;query&quot;: &quot;天津市&quot;,<br>      &quot;fields&quot;: [&quot;user.address.keyword&quot;,&quot;name&quot;]<br>   &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1.3 精确查询</strong></p><p>精确查询一般是查找keyword、数值、日期、boolean等类型字段。所以不会对搜索条件分词。</p><ul><li>term：根据词条精确值查询，不会分词<br>查询价格字段为359900的文档，多一块少一块都查不到</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span><span class="hljs-keyword">order</span><span class="hljs-operator">/</span>_search<br>&#123;<br>  &quot;query&quot;:&#123;<br>    &quot;term&quot;: &#123;<br>      &quot;price&quot;: &#123;<br>        &quot;value&quot;: &quot;359900&quot;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>range：根据值的范围查询，比如日期，数字<br>查询字段价格在0-1000000的文档</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span><span class="hljs-keyword">order</span><span class="hljs-operator">/</span>_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;range&quot;: &#123;<br>      &quot;price&quot;: &#123;<br>        &quot;gte&quot;: <span class="hljs-number">0</span>,<br>        &quot;lte&quot;: <span class="hljs-number">10000000</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>gte包含等于，gt不包含等于。<br></code></pre></td></tr></table></figure><p><strong>1.4 Function score query详解</strong><br><a href="https://segmentfault.com/a/1190000037700644/">https://segmentfault.com/a/1190000037700644</a></p><p>示例：查询所有文档中name中包含Apple关键字的，并且将name中包含6s中的文档分数加权10（默认关系是乘法）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs powershell">GET /order/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;function_score&quot;</span>: &#123;<br>     <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>         <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Apple&quot;</span><br>       &#125;<br>     &#125;,<br>     <span class="hljs-string">&quot;functions&quot;</span>: [<br>       &#123;<span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>         <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>           <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;6s&quot;</span><br>         &#125;<br>       &#125;,<br>         <span class="hljs-string">&quot;weight&quot;</span>: <span class="hljs-number">10</span><br>       &#125;<br>     ]<br>   &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>1.5 复合查询 Boolean Query</strong></p><ul><li>must：必须匹配的条件，可以理解为“与”</li><li>should：选择性匹配的条件，可以理解为“或”</li><li>must_not：必须不匹配的条件，不参与打分</li><li>filter：必须匹配的条件，不参与打分</li></ul><h5 id="2-搜索结果处理（排序、分页、高亮）"><a href="#2-搜索结果处理（排序、分页、高亮）" class="headerlink" title="2.搜索结果处理（排序、分页、高亮）"></a>2.搜索结果处理（排序、分页、高亮）</h5><p><strong>2.1 排序</strong></p><p>查询所有name包含Apple的文档，按照价格降序，数量升序的规则输出</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs powershell">GET /order/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Apple&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;price&quot;</span>:<span class="hljs-string">&quot;desc&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;num&quot;</span>:<span class="hljs-string">&quot;asc&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.2 分页</strong></p><p>从第一个开始，每页查询13条文档</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs powershell">GET /order/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>, //分页的开始，默认为<span class="hljs-number">0</span><br>  <span class="hljs-string">&quot;size&quot;</span>:<span class="hljs-number">13</span>, //每页的文档数<br>  <span class="hljs-string">&quot;sort&quot;</span>:[<br>    &#123;<br>      <span class="hljs-string">&quot;price&quot;</span>:<span class="hljs-string">&quot;asc&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>from+size原理：如果要查询第990-1000条文档，则先查询前1000条，再截取990-1000条文档。<br><img src="https://s3.bmp.ovh/imgs/2025/01/02/12a2976c8d4a972d.png"><br>但在实际环境中ES是集群部署的，数据分布在不同的ES服务器中，如果查询页数太深，对内存要求会很高。<br><img src="https://s3.bmp.ovh/imgs/2025/01/02/301ba7c63d3a970f.png"></p><p>首先在每个数据分片上都排序并查询前1000条文档。<br>然后将所有节点的结果聚合，在内存中重新排序选出前1000条文档。<br>最后从这1000条中，选取从990开始的10条文档。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ES</span>限制查询分页总数必须小于等于<span class="hljs-number">10000</span>，例如京东、淘宝、百度等他们的查询结果也不会超过<span class="hljs-number">10000</span>。<br></code></pre></td></tr></table></figure><p>如果真要查询10000以上的数据怎么办？<br>可以使用after search：<br>优点：没有查询上限（单次查询的size不超过10000）<br>缺点：只能向后逐页查询，不支持随机翻页<br>场景：没有随机翻页需求的搜索，例如手机向下滚动翻页</p><p><strong>2.3 高亮</strong></p><p>默认情况下，搜索字段必须和高亮字段一致，“require_field_match”: “false”可以取消此设定 name和name要一样（下面的示例一样，不用加false也可以高亮）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs powershell">GET /order/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Apple&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;require_field_match&quot;</span>: <span class="hljs-string">&quot;false&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="六-数据聚合"><a href="#六-数据聚合" class="headerlink" title="六.数据聚合"></a>六.数据聚合</h4><h5 id="1-聚合的分类"><a href="#1-聚合的分类" class="headerlink" title="1.聚合的分类"></a>1.聚合的分类</h5><p>聚合（aggregations）可以实现对文档数据的统计、分析、运算。聚合常见的有三类：</p><ul><li>桶（Bucket）聚合：用来对文档做分组<br>TermAggregation：按照文档字段值分组<br>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组</li><li>度量（Metric）聚合：用以计算一些值，比如：最大值、最小值、平均值等<br>Avg：求平均值<br>Max：求最大值<br>Min：求最小值<br>Stats：同时求max、min、avg、sum等</li><li>管道（pipeline）聚合：其它聚合的结果为基础做聚合</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">参与聚合的字段类型必须是：<br></code></pre></td></tr></table></figure><ul><li>keyword</li><li>数值</li><li>日期</li><li>布尔</li></ul><h5 id="2-Bucket聚合与Metrics聚合"><a href="#2-Bucket聚合与Metrics聚合" class="headerlink" title="2.Bucket聚合与Metrics聚合"></a>2.Bucket聚合与Metrics聚合</h5><p><strong>2.1 Bucket聚合（几组，每组几个）</strong><br>需求：查询索引库中有几个用户下过订单，分别下了几次订单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /order/_search<br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//不显示文档</span><br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;userCount&quot;</span>: &#123; <span class="hljs-comment">// 聚合的名字，自定义</span><br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123; <br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;userId&quot;</span>, <span class="hljs-comment">// 聚合的关键字</span><br>        <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">5</span> <span class="hljs-comment">// 显示的聚合数，假如有10个用户，只会显示5个</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2025/01/02/80b9263ba711525a.png"></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">默认情况下，Bucket聚合会统计Bucket内的文档数量，记为_<span class="hljs-built_in">count</span>，并且按照_<span class="hljs-built_in">count</span>降序排序。<br></code></pre></td></tr></table></figure><p>默认情况下，Bucket聚合是对索引库的所有文档做聚合，我们可以限定要聚合的文档范围，只要添加query条件即可</p><p>需求：查询索引库中有几个用户下过订单，分别下了几次订单，只统计订单数目为1的文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /order/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;num&quot;</span>: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;, <br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>, <br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;userCount&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;userId&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">5</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>aggs代表聚合，与query同级，此时query的作用是限定聚合的的文档范围<br>聚合必须的三要素：</p><ul><li>聚合名称</li><li>聚合类型</li><li>聚合字段</li></ul><p>聚合可配置属性有：</p><ul><li>size：指定聚合结果数量</li><li>order：指定聚合结果排序方式</li><li>field：指定聚合字段</li></ul><p><strong>2.2 Metrics聚合</strong><br>需求：求每个用户消费的最大值、最小值、平均值、总金额</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /order/_search<br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>, <br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;userCount&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;userId&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">6</span><br>      &#125;,<br>      <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;price_stats&quot;</span>: &#123;  <span class="hljs-comment">//聚合名字</span><br>          <span class="hljs-string">&quot;stats&quot;</span>: &#123;    <span class="hljs-comment">//聚合类型</span><br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span>  <span class="hljs-comment">//聚合字段</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2025/01/02/aa768ce4068cab3d.png"></p><h4 id="七-自动补全"><a href="#七-自动补全" class="headerlink" title="七.自动补全"></a>七.自动补全</h4><h5 id="1-安装拼音分词器"><a href="#1-安装拼音分词器" class="headerlink" title="1.安装拼音分词器"></a>1.安装拼音分词器</h5><p>①下载并解压：<a href="https://github.com/medcl/elasticsearch-analysis-pinyin/tags">https://github.com/medcl/elasticsearch-analysis-pinyin/tags</a></p><p>②将解压文件上传到目录&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;es-plugins&#x2F;_data<br><img src="https://s3.bmp.ovh/imgs/2025/01/02/955f931a3639c61b.png"><br>③重启es容器<br>④测试<br><img src="https://s3.bmp.ovh/imgs/2025/01/02/6292b1187ff9e8d1.png"></p><h5 id="2-自定义分词器"><a href="#2-自定义分词器" class="headerlink" title="2.自定义分词器"></a>2.自定义分词器</h5><p>默认的拼音分词器会将每个汉字单独分为拼音，而我们希望的是每个词条形成一组拼音，需要对拼音分词器做个性化定制，形成自定义分词器</p><p>elasticsearch中分词器（analyzer）的组成包含三部分：</p><ul><li>character filters：在tokenizer之前对文本进行处理。例如删除字符、替换字符</li><li>tokenizer：将文本按照一定的规则切割成词条（term）。例如keyword，就是不分词；还有ik_smart</li><li>tokenizer filter：将tokenizer输出的词条做进一步处理。例如大小写转换、同义词处理、拼音处理等</li></ul><p>自定义分词器要在创建索引库时定义，例如，创建order索引库。为了避免搜索到同音字，搜索时不要使用拼音分词器，创建倒排索引时才使用自定义分词器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">PUT /order<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;analyzer&quot;</span>: &#123; <span class="hljs-comment">// 自定义分词器</span><br>        <span class="hljs-string">&quot;my_analyzer&quot;</span>: &#123;  <span class="hljs-comment">// 分词器名称</span><br>          <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>          <span class="hljs-string">&quot;filter&quot;</span>: <span class="hljs-string">&quot;py&quot;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123; <span class="hljs-comment">// 自定义tokenizer filter</span><br>        <span class="hljs-string">&quot;py&quot;</span>: &#123; <span class="hljs-comment">// 过滤器名称</span><br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;pinyin&quot;</span>, <span class="hljs-comment">// 过滤器类型，这里是pinyin</span><br>      <span class="hljs-string">&quot;keep_full_pinyin&quot;</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-string">&quot;keep_joined_full_pinyin&quot;</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-string">&quot;keep_original&quot;</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-string">&quot;limit_first_letter_length&quot;</span>: <span class="hljs-number">16</span>,<br>          <span class="hljs-string">&quot;remove_duplicated_term&quot;</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-string">&quot;none_chinese_pinyin_tokenize&quot;</span>: <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;my_analyzer&quot;</span>,<br>        <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-实现自动补全"><a href="#3-实现自动补全" class="headerlink" title="3.实现自动补全"></a>3.实现自动补全</h5><p><strong>3.1 控制台实现</strong><br>elasticsearch提供了<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/search-suggesters.html">Completion Suggester</a>查询来实现自动补全功能。这个查询会匹配以用户输入内容开头的词条并返回。为了提高补全查询的效率，对于文档中字段的类型有一些约束：</p><ul><li>参与补全查询的字段必须是completion类型</li><li>字段的内容一般是用来补全的多个词条形成的数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java">PUT /order<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;text_anlyzer&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>          <span class="hljs-string">&quot;filter&quot;</span>: <span class="hljs-string">&quot;py&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;completion_analyzer&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>          <span class="hljs-string">&quot;filter&quot;</span>: <span class="hljs-string">&quot;py&quot;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;py&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;pinyin&quot;</span>,<br>          <span class="hljs-string">&quot;keep_full_pinyin&quot;</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-string">&quot;keep_joined_full_pinyin&quot;</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-string">&quot;keep_original&quot;</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-string">&quot;limit_first_letter_length&quot;</span>: <span class="hljs-number">16</span>,<br>          <span class="hljs-string">&quot;remove_duplicated_term&quot;</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-string">&quot;none_chinese_pinyin_tokenize&quot;</span>: <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>    <br>  <span class="hljs-string">&quot;mappings&quot;</span> : &#123;<br>      <span class="hljs-string">&quot;properties&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;id&quot;</span> : &#123;<br>          <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;name&quot;</span> : &#123;<br>          <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span>,<br>          <span class="hljs-string">&quot;analyzer&quot;</span> : <span class="hljs-string">&quot;text_anlyzer&quot;</span>,<br>          <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;num&quot;</span> : &#123;<br>          <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;price&quot;</span> : &#123;<br>          <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;long&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;user&quot;</span> : &#123;<br>          <span class="hljs-string">&quot;properties&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;address&quot;</span> : &#123;<br>              <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span>,<br>              <span class="hljs-string">&quot;fields&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;keyword&quot;</span> : &#123;<br>                  <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span>,<br>                  <span class="hljs-string">&quot;ignore_above&quot;</span> : <span class="hljs-number">256</span><br>                &#125;<br>              &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;id&quot;</span> : &#123;<br>              <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;long&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;username&quot;</span> : &#123;<br>              <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span>,<br>              <span class="hljs-string">&quot;fields&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;keyword&quot;</span> : &#123;<br>                  <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span>,<br>                  <span class="hljs-string">&quot;ignore_above&quot;</span> : <span class="hljs-number">256</span><br>                &#125;<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;userId&quot;</span> : &#123;<br>          <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;suggestion&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;completion&quot;</span>,<br>          <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;completion_analyzer&quot;</span><br>      &#125;<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /order/_search<br>&#123;<br>  <span class="hljs-string">&quot;suggest&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;my_suggestions&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;b&quot;</span>,<br>      <span class="hljs-string">&quot;completion&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;suggestion&quot;</span>,<br>        <span class="hljs-string">&quot;skip_duplicates&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 跳过重复的</span><br>        <span class="hljs-string">&quot;size&quot;</span>:<span class="hljs-number">10</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2025/01/02/4ee4c4bd56b2ca15.png"></p><h4 id="八-数据同步"><a href="#八-数据同步" class="headerlink" title="八.数据同步"></a>八.数据同步</h4><p>采用MQ异步通知的方式完成数据同步，即当对数据库进行操作时，发送一条消息到队列，对ES的相关操作监听这个队列，有消息就完成ES的修改。</p><h4 id="九-ES集群"><a href="#九-ES集群" class="headerlink" title="九.ES集群"></a>九.ES集群</h4><p>数据备份可以保证高可用，但是每个分片备份一份，所需要的节点数量就会翻一倍，成本实在是太高了！</p><p>为了在高可用和成本间寻求平衡，我们可以这样做：</p><ul><li>首先对数据分片，存储到不同节点</li><li>然后对每个分片进行备份，放到对方节点，完成互相备份<br><img src="https://s3.bmp.ovh/imgs/2025/01/02/a650884d1ba86010.png"></li></ul><h5 id="1-搭建ES集群环境"><a href="#1-搭建ES集群环境" class="headerlink" title="1.搭建ES集群环境"></a>1.搭建ES集群环境</h5><p>首先准备三台服务器，每台服务器先要有ES的镜像</p><p>重要设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建conf</span><br>grep vm.max_map_count /etc/sysctl.conf<br><span class="hljs-comment">#文件里设置参数</span><br>vim /etc/sysctl.conf<br><span class="hljs-comment">#设置</span><br>vm.max_map_count=262144<br><span class="hljs-comment">#永久生效</span><br><span class="hljs-built_in">echo</span> vm.max_map_count=262144&gt;&gt;/etc/sysctl.conf<br><span class="hljs-comment">#查看</span><br>sysctl -p<br></code></pre></td></tr></table></figure><p>否则部署的ES会报78错误码，如果设置了此参数依旧78错误码，重启服务器</p><p>在根目录下创建文件<br>&#x2F;es&#x2F;config&#x2F;esX.yml（其中X&#x3D;1、2、3，对应三台服务器，下同），配置信息如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">elasticsearch-cluster</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">es-nodeX</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">network.publish_host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.131</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9300</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;es-node1&quot;</span>,<span class="hljs-string">&quot;es-node2&quot;</span>,<span class="hljs-string">&quot;es-node3&quot;</span>]<br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;192.168.10.129:9300&quot;</span>,<span class="hljs-string">&quot;192.168.10.130:9300&quot;</span>]<br><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>cluster.name必须一致，代表一个集群</li><li>node.name必须不一致，代表三个节点</li><li>network.publish_host代表本机IP</li><li>cluster.initial_master_nodes: [“es-nodeX”]和node.name必须一致</li></ul><p>节点角色：</p><ul><li>node.master：备选主节点，主节点可以管理和记录集群状态、决定分片在哪个节点、处理创建和删除索引库的请求</li><li>node.data：数据节点，存储数据、搜索、聚合、CRUD</li><li>node.ingest：数据存储之前的预处理</li><li>coordinating：路由请求到其他节点，合并其他节点处理的结果，返回给用户</li></ul><p>运行容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms256m -Xmx256m&quot;</span> -d -p 9200:9200 -p 9300:9300 -v /es/config/es3.yml:/usr/share/elasticsearch/config/elasticsearch.yml  --name es03 elasticsearch:7.12.1<br></code></pre></td></tr></table></figure><p>如果以上无误，其实包含三个节点的es集群已经搭建起来了！</p><h5 id="2-集群状态监控"><a href="#2-集群状态监控" class="headerlink" title="2.集群状态监控"></a>2.集群状态监控</h5><p>利用cerebro进行监控</p><ul><li>拉取镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull lmenezes/cerebro<br></code></pre></td></tr></table></figure><ul><li>运行容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name cerebro -p 9100:9000 lmenezes/cerebro<br></code></pre></td></tr></table></figure><ul><li>访问IP:9100<br><img src="https://s3.bmp.ovh/imgs/2025/01/02/9ec5d92bff1987ca.png"></li><li>输入 <a href="http://127.0.0.1:9200/">http://127.0.0.1:9200</a> （任意节点服务器即可），可以看到刚才部署的es集群的3个节点信息<br><img src="https://i.111666.best/image/gRy8U3Rfsf5WKSnlbT1Pdc.png"></li></ul><h5 id="3-脑裂及解决"><a href="#3-脑裂及解决" class="headerlink" title="3.脑裂及解决"></a>3.脑裂及解决</h5><p>脑裂是因为集群中的节点失联导致的<br>例如一个集群中，主节点与其它节点失联<br><img src="https://i.111666.best/image/dFZ7r33IqpGWwRU5yfec7Q.png"><br>此时，node2和node3认为node1宕机，就会重新选主<br><img src="https://i.111666.best/image/sYjLv2MI44LTZFxx3j0nnm.png"><br>当node3当选后，集群继续对外提供服务，node2和node3自成集群，node1自成集群，两个集群数据不同步，出现数据差异</p><p>当网络恢复后，因为集群中有两个master节点，集群状态的不一致，出现脑裂的情况<br><img src="https://i.111666.best/image/QPhOGLTb0N47jmPNFnBpLq.png"><br>解决脑裂的方案是，要求选票超过 ( eligible节点数量 + 1 )&#x2F; 2 才能当选为主，因此eligible节点数量最好是奇数。对应配置项是discovery.zen.minimum_master_nodes，在es7.0以后，已经成为默认配置，因此一般不会发生脑裂问题</p><p>例如：3个节点形成的集群，选票必须超过 （3 + 1） &#x2F; 2 ，也就是2票。node3得到node2和node3的选票，当选为主。node1只有自己1票，没有当选。集群中依然只有1个主节点，没有出现脑裂</p><h5 id="4-集群新增数据及查询流程"><a href="#4-集群新增数据及查询流程" class="headerlink" title="4.集群新增数据及查询流程"></a>4.集群新增数据及查询流程</h5><ul><li>新增流程：<br><img src="https://i.111666.best/image/bceppPBL9QFLF8SChVcQZM.png"><br>当用户新增一条文档时，首先要经过某种哈希运算计算要分配到哪个分片上，<code>shard=hash(_routing)%number_of_shards</code>，_routing默认是文档的id，可见，算法与分片数量有关，<code>所以索引库一旦创建，分片数量不可以修改！</code>确定好哪个分片后，路由节点到相应的节点，相应的分片保存数据，并将数据同步到副本节点，以上完成后，返回成功的信息给路由节点，路由节点再返回给用户成功的信息</li><li>查询流程：<br><img src="https://i.111666.best/image/fBjn59xxLWgNJJ6MClPdxf.png"><br>协调节点会把请求分发到每一个分片，称为<code>分散阶段</code>。协调节点汇总data node的结果，称为<code>聚集阶段</code>，并处理结果集返回给用户</li></ul><h5 id="5-故障转移"><a href="#5-故障转移" class="headerlink" title="5.故障转移"></a>5.故障转移</h5><p>集群的master节点会监控集群中的节点状态，如果发现有节点宕机，会立即将宕机节点的分片数据迁移到其它节点，确保数据安全，这个叫做<code>故障转移</code></p><p><img src="https://i.111666.best/image/e3k3Ro2Q96oMemtrBOA3Sv.png"><br><img src="https://i.111666.best/image/SFTJXhbMFKvef8qYiRs79O.png"><br><img src="https://i.111666.best/image/37y8Gt9DA6CLfQ57Ut5Dk0.png"><br>以上es会自动完成故障转移操作，特别注意的是，如果宕机的节点又恢复正常了，则当前的主节点会把相应的分片再分发回去，十分强大！</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>分布式</tag>
      
      <tag>搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>普通OR唯一索引</title>
    <link href="/2024/03/30/%E6%99%AE%E9%80%9AOR%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95/"/>
    <url>/2024/03/30/%E6%99%AE%E9%80%9AOR%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="我们在不同的业务场景下，应该选择普通索引，还是唯一索引？"><a href="#我们在不同的业务场景下，应该选择普通索引，还是唯一索引？" class="headerlink" title="我们在不同的业务场景下，应该选择普通索引，还是唯一索引？"></a>我们在不同的业务场景下，应该选择普通索引，还是唯一索引？</h3><p>普通索引（Non-Unique Index）：</p><ul><li>适用于需要快速查找数据的列，但允许存在重复值的情况。例如，在经常进行查询的列上创建普通索引可以提高查询性能，如经常用于WHERE子句中的条件列</li></ul><p>唯一索引（Unique Index）：</p><ul><li>适用于需要保证列值的唯一性的情况。例如，用于用户表的用户名列、电子邮件列等，确保这些列中的值不重复。</li></ul><p>假设在维护一个市民系统，每个人都有一个唯一的身份证号，而且业务代码已经保证了不会写入两个重复的身份证号。如果市民系统需要按照身份证号查姓名，就会执行类似这样的SQL语句：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-type">name</span> <span class="hljs-keyword">from</span> CUser <span class="hljs-keyword">where</span> id_card = <span class="hljs-string">&#x27;xxxxxxxyyyyyyzzzzz&#x27;</span>;<br></code></pre></td></tr></table></figure><p>所以，大家一定会考虑在id_card字段上建索引。</p><p>由于身份证号字段比较大，所以不建议把身份证号当做主键，那么现在有两个选择，要么给id_card字段创建唯一索引，要么创建一个普通索引。如果业务代码已经保证了不会写入重复的身份证号，那么这两个选择逻辑上都是正确的,从性能的角度考虑，选择唯一索引还是普通索引呢？选择的依据是什么呢？ </p><p>接下来，我们就从这两种索引对查询语句和更新语句的性能影响来进行分析。</p><p><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/zS6BwpfMweND3iZT.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjUwMDAsImZpbGVHVUlEIjoiV3IzRFZRQk1qRFV3ZE1rSiIsImlhdCI6MTcwOTYyNDcwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._OxAmVuecWPrz5vgEyJ8FfE3aIZhLGhK4zAAYuZ8o2c" alt="img"></p><h3 id="二-查询过程"><a href="#二-查询过程" class="headerlink" title="二.查询过程"></a>二.查询过程</h3><p>假设，执行查询的语句是 select id from T where k&#x3D;5。这个查询语句在索引树上查找的过程，先是通过B+树从树根开始，按层搜索到叶子节点，也就是图中右下角的这个数据页，然后可以认为数据页内部通过二分法来定位记录。</p><ul><li><p>对于普通索引来说，查找到满足条件的第一个记录(5,500)后，需要查找下一个记录，直到碰到第一个不满足k&#x3D;5条件的记录。</p></li><li><p>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</p></li></ul><p><strong>那么，这个不同带来的性能差距会有多少呢？答案是，微乎其微。</strong></p><ol><li>InnoDB的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在InnoDB中，每个数据页的大小默认是16KB。</li><li>因为引擎是按页读写的，所以说，当找到k&#x3D;5的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。</li><li>如果k&#x3D;5这个记录刚好是这个数据页的最后一个记录，那么要取下一个记录，必须读取下一个数据页，这个操作会稍微复杂一些。</li><li>但是对于整型字段，一个数据页可以放近千个key，因此出现这种情况的概率会很低。所以,计算平均性能差异时，仍可以认为这个操作成本对于现在的CPU来说可以忽略不计。</li></ol><h3 id="三-更新过程"><a href="#三-更新过程" class="headerlink" title="三.更新过程"></a>三.更新过程</h3><p><strong>为了说明普通索引和唯一索引对更新语句性能的影响这个问题，需要介绍一下change buffer。</strong></p><ol><li>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB会将这些更新操作缓存在change buffer中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行change buffer中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</li><li>将change buffer中的操作应用到原数据页，得到最新结果的过程称为merge。除了访问这个数据页会触发merge外，系统有后台线程会定期merge。在数据库正常关闭（shutdown）的过程中，也会执行merge操作。</li><li>显然，如果能够将更新操作先记录在change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用buffer pool的，所以这种方式还能够避免占用内存，提高内存利用率。</li></ol><p>那么，<strong>什么条件下可以使用change buffer呢？</strong></p><ol><li>对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。比如，要插入(4,400)这个记录，就要先判断现在表中是否已经存在k&#x3D;4的记录，而这必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用change buffer了。因此，唯一索引的更新就不能使用change buffer，实际上也只有普通索引可以使用。</li><li>change buffer用的是buffer pool里的内存，因此不能无限增大。change buffer的大小，可以通过参数innodb_change_buffer_max_size来动态设置。这个参数设置为50的时候，表示change buffer的大小最多只能占用buffer pool的50%。</li><li>change_buffer涉及的指令<ol><li>查询最大changge Buffer值</li></ol></li></ol><p><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/aPrZWVTWB5jGoN55.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjUwMDAsImZpbGVHVUlEIjoiV3IzRFZRQk1qRFV3ZE1rSiIsImlhdCI6MTcwOTYyNDcwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._OxAmVuecWPrz5vgEyJ8FfE3aIZhLGhK4zAAYuZ8o2c" alt="img"></p><p>b. 查询最大Buffer Pool值</p><p><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/v2DxZmWawCnuD3YB.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjUwMDAsImZpbGVHVUlEIjoiV3IzRFZRQk1qRFV3ZE1rSiIsImlhdCI6MTcwOTYyNDcwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._OxAmVuecWPrz5vgEyJ8FfE3aIZhLGhK4zAAYuZ8o2c" alt="img"></p><p><strong>如果要在这张表中插入一个新记录(4,400)的话，InnoDB的处理流程是怎样的。</strong></p><p>1.第一种情况是，<strong>这个记录要更新的目标页在内存中</strong>。这时，InnoDB的处理流程如下：</p><ul><li>对于唯一索引来说，找到3和5之间的位置，判断到没有冲突，插入这个值，语句执行结束；</li><li>对于普通索引来说，找到3和5之间的位置，插入这个值，语句执行结束。</li></ul><p>这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小的CPU时间。</p><p>2.第二种情况是，<strong>这个记录要更新的目标页不在内存中</strong>。这时，InnoDB的处理流程如下：</p><ul><li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；</li><li>对于普通索引来说，则是将更新记录在change buffer，语句执行就结束了。</li></ul><p>将数据从磁盘读入内存涉及随机IO的访问，是数据库里面成本最高的操作之一。change buffer因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p><h3 id="四-change-buffer的使用场景"><a href="#四-change-buffer的使用场景" class="headerlink" title="四.change buffer的使用场景"></a>四.change buffer的使用场景</h3><p>1.通过上面的分析，已经清楚了使用change buffer对更新过程的加速作用，也清楚了change buffer只限于用在普通索引的场景下，而不适用于唯一索引。那么，现在有一个问题就是：普通索引的所有场景，使用change buffer都可以起到加速作用吗？</p><p>因为merge的时候是真正进行数据更新的时刻，而change buffer的主要目的就是将记录的变更动作缓存下来，所以在一个数据页做merge之前，change buffer记录的变更越多（也就是这个页面上要更新的次数越多），收益就越大。</p><p>2.因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时change buffer的使用效果最好。这种业务模型常见的就是账单类、日志类的系统。</p><p>反过来，假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在change buffer，但之后由于马上要访问这个数据页，会立即触发merge过程。这样随机访问IO的次数不会减少，反而增加了change buffer的维护代价。所以，对于这种业务模式来说，change buffer反而起到了副作用。</p><h3 id="五-索引选择和实践"><a href="#五-索引选择和实践" class="headerlink" title="五.索引选择和实践"></a>五.索引选择和实践</h3><p><strong>普通索引和唯一索引应该怎么选择。其实，这两类索引在查询能力上是没差别的，主要考虑的是对更新性能的影响。所以，建议尽量选择普通索引。</strong></p><p>1.如果所有的更新后面，都马上伴随着对这个记录的查询，那么你应该关闭change buffer。</p><p>2.而在其他情况下，change buffer都能提升更新性能。在实际使用中，普通索引和change buffer的配合使用，对于数据量大的表的更新优化还是很明显的。</p><h3 id="六-change-buffer-和-redo-log"><a href="#六-change-buffer-和-redo-log" class="headerlink" title="六.change buffer 和 redo log"></a>六.change buffer 和 redo log</h3><p>理解了change buffer的原理，可能会联想到redo log。</p><p>现在，我们要在表上执行这个插入语句：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">mysql&gt; insert into <span class="hljs-built_in">t</span>(id,k) <span class="hljs-built_in">values</span>(id1,k1),(id2,k2);<br></code></pre></td></tr></table></figure><p>这里，我们假设当前k索引树的状态，查找到位置后，k1所在的数据页在内存(InnoDB buffer pool)中，k2所在的数据页不在内存中。下图所示是带change buffer的更新状态图。 </p><p><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/DdrF2RPSg8O9uDzk.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjUwMDAsImZpbGVHVUlEIjoiV3IzRFZRQk1qRFV3ZE1rSiIsImlhdCI6MTcwOTYyNDcwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._OxAmVuecWPrz5vgEyJ8FfE3aIZhLGhK4zAAYuZ8o2c" alt="img"></p><p>分析这条更新语句，你会发现它涉及了四个部分：内存、redo log（ib_log_fileX）、 数据表空间（t.ibd）、系统表空间（ibdata1）。</p><p>这条更新语句做了如下的操作（按照图中的数字顺序）：</p><ol><li>Page 1在内存中，直接更新内存；</li><li>Page 2没有在内存中，就在内存的change buffer区域，记录下“我要往Page 2插入一行”这个信息</li><li>将上述两个动作记入redo log中（图中3和4）。</li></ol><p>做完上面这些，事务就可以完成了。所以，执行这条更新语句的成本很低，就是写了两处内存，然后写了一处磁盘（两次操作合在一起写了一次磁盘），而且还是顺序写的。</p><p>同时，图中的两个虚线箭头，是后台操作，不影响更新的响应时间。</p><p><strong>那在这之后的读请求，要怎么处理呢？</strong></p><p>比如，我们现在要执行 select * from t where k in (k1, k2)。这里，我画了这两个读请求的流程图。</p><p>如果读语句发生在更新语句后不久，内存中的数据都还在，那么此时的这两个读操作就与系统表空间（ibdata1）和 redo log（ib_log_fileX）无关了。</p><p><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/QvaoBebD03tmXx1M.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjUwMDAsImZpbGVHVUlEIjoiV3IzRFZRQk1qRFV3ZE1rSiIsImlhdCI6MTcwOTYyNDcwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._OxAmVuecWPrz5vgEyJ8FfE3aIZhLGhK4zAAYuZ8o2c" alt="img"></p><p>从上图中可以看到：</p><ol><li>读Page 1的时候，直接从内存返回。</li><li>要读Page 2的时候，需要把Page 2从磁盘读入内存中，然后应用change buffer里面的操作日志，生成一个正确的版本并返回结果。</li></ol><p>可以看到，直到需要读Page 2的时候，这个数据页才会被读入内存。</p><p>所以，如果要简单地对比这两个机制在提升更新性能上的收益的话，<strong>redo log 主要节省的是随机写磁盘的IO消耗（转成顺序写），而change buffer主要节省的则是随机读磁盘的IO消耗。</strong></p><h3 id="七-小结"><a href="#七-小结" class="headerlink" title="七.小结"></a>七.小结</h3><p>1.从普通索引和唯一索引的选择开始，了解了数据的查询和更新过程，然后说明了change buffer的机制以及应用场景，最后讲到了索引选择的实践。</p><p>2.由于唯一索引用不上change buffer的优化机制，从性能角度出发优先考虑非唯一索引。</p><h3 id="八-思考"><a href="#八-思考" class="headerlink" title="八.思考"></a>八.思考</h3><p><strong>change buffer一开始是写内存的，那么如果这个时候机器掉电重启，会不会导致change buffer丢失呢？change buffer丢失可不是小事儿，再从磁盘读入数据可就没有了merge过程，就等于是数据丢失了。会不会出现这种情况呢？</strong></p><p>不会的。虽然change buffer确实是在内存中进行操作以提高性能，但MySQL InnoDB引擎设计了一套机制来保证数据的持久性和一致性。</p><p>当有修改操作（如插入、删除或更新）发生时，InnoDB会先将这些修改操作记录在redo log中，然后再将这些修改应用到change buffer中。redo log是持久化在磁盘上的，所以即使出现掉电重启等情况，redo log也不会丢失。</p><p>当数据库重新启动后，InnoDB引擎会读取redo log，并根据其中记录的信息恢复数据到最新状态。也就是说，在系统崩溃重启后可以通过redo log恢复change buffer，并且保证数据不丢失。</p><p>因此，在正常运行过程中和系统崩溃恢复过程中都需要对磁盘进行访问以保证数据一致性和可靠性。虽然从内存读取数据比从磁盘读取快很多，但为了防止数据丢失，在某些情况下还是必须要访问磁盘的。</p>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KAFKA基本原理要点</title>
    <link href="/2024/03/25/KAFKA%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E8%A6%81%E7%82%B9/"/>
    <url>/2024/03/25/KAFKA%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E8%A6%81%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="KAFKA基本原理要点"><a href="#KAFKA基本原理要点" class="headerlink" title="KAFKA基本原理要点"></a>KAFKA基本原理要点</h3><ol><li><p>KAFKA作为数据连接层，以集群的方式运行，可以自由伸缩，持续处理大型的数据流。</p></li><li><p>KAFKA的消息通过主题进行分类。</p></li><li><p>主题可以被分为若干个分区，一个分区就是一个提交日志。</p><ol><li>消息以追加的方式写入分区，然后以先入先出的顺序读取。</li><li>一个主题包含多个分区，无法在整个topic上保证消息的顺序性，但可以保证消息在单个分区上的顺序性</li><li>KAKFA可以通过分区来实现数据的伸缩性和冗余性</li><li>多个分区可以分布在不同的服务器上，因此可以提供比单服务器更强大的性能<img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/tYQ3AT9LKLDebhZP.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjYzODQsImZpbGVHVUlEIjoiMGwzTlZiV29uNkNsREUzUiIsImlhdCI6MTcwOTYyNjA4NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._NbzGkvi2YSKxtYb-bC4bmcJe0_fFp66QL-QaP07I0g" alt="img"></li></ol></li><li><p>KAFKA的客户端主要分为：生产者和消费者；</p><ol><li>数据集成用的KAFKA Connect API </li><li>流式处理的KAFKA Stream &#x3D;&#x3D;&gt; Flink</li></ol></li><li><p>生产者创建消息</p><ol><li>生产者在默认情况下把消息均衡地分布到主题的所有分区上，而并不关心特定消息会被写到哪个分区</li><li>生产者会把消息直接写到指定的分区。这通常是通过消息键和分区器来实现的<ol><li>分区器为键生成一个散列值，并将其映射到指定的分区上。这样可以保证包含同一个键的消息会被写到同一个分区上。</li><li>生产者也可以使用自定义的分区器，根据不同的业务规则将消息映射到分区。</li></ol></li></ol></li><li><p>消费者读取消息</p><ol><li>消费者订阅一个或多个主题，并按照消息生成的顺序读取消息。</li><li>消费者通过检查消息的偏移量来区分已经读取过的消息。</li></ol></li><li><p>偏移量</p><ol><li>偏移量是另一种元数据，它是一个不断递增的整数值，在创建消息时，Kafka会把它添加到消息里。</li><li>在给定的分区里，每个消息的偏移量都是唯一的。</li><li>消费者把每个分区最后读取的消息偏移量保存在 <strong>Zookeeper</strong> 或 Kafka 上，如果消费者关闭或重启，它的读取状态不会丢失。</li></ol></li><li><p>消费者群组</p><ol><li>由多个消费者组成，群组保证每个分区只能被一个消费者使用。</li><li><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/QSrhNqa1pPXK2wYS.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjYzODQsImZpbGVHVUlEIjoiMGwzTlZiV29uNkNsREUzUiIsImlhdCI6MTcwOTYyNjA4NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._NbzGkvi2YSKxtYb-bC4bmcJe0_fFp66QL-QaP07I0g" alt="img"></li><li>消费者与分区之间的映射通常被称为消费者对分区的所有权关系。</li></ol></li><li><p>broker 和集群<br><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/J67PCiDH8rW9Cwwo.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjYzODQsImZpbGVHVUlEIjoiMGwzTlZiV29uNkNsREUzUiIsImlhdCI6MTcwOTYyNjA4NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._NbzGkvi2YSKxtYb-bC4bmcJe0_fFp66QL-QaP07I0g" alt="img"></p><ol><li>一个独立的 Kafka 服务器被称为 broker。</li><li>作用1：broker 接收来自生产者的消息，为消息设置偏移量，并提交消息到磁盘保存。</li><li>作用2：broker 为消费者提供服务，对读取分区的请求作出响应，返回已经提交到磁盘上的消息</li><li>broker 是集群的组成部分。每个集群都有一个 broker 同时充当了集群控制器的角色（自动从集群的活跃成员中选举出来）<a href="https://raft.github.io/">https://raft.github.io/</a></li><li><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/CZcD3LCck1DUoL5B.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjYzODQsImZpbGVHVUlEIjoiMGwzTlZiV29uNkNsREUzUiIsImlhdCI6MTcwOTYyNjA4NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._NbzGkvi2YSKxtYb-bC4bmcJe0_fFp66QL-QaP07I0g" alt="img"></li><li>一个 Kafka集群需要多少个 broker 取决于以下几个因素。</li><li>首先，需要多少磁盘空间来保留数据，以及单个 broker 有多少空间可用。如果整个集群需要保留 10TB 的数据，每个broker 可以存储 2TB，那么至少需要 5 个 broker。</li><li>一个分区可以分配给多个 broker，这个时候会发生分区复制。这种复制机制为分区提供了消息冗余，如果有一个 broker 失效，其他 broker 可以接管领导权。<img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/e6caveYD96cgcHh9.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjYzODQsImZpbGVHVUlEIjoiMGwzTlZiV29uNkNsREUzUiIsImlhdCI6MTcwOTYyNjA4NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._NbzGkvi2YSKxtYb-bC4bmcJe0_fFp66QL-QaP07I0g" alt="img"></li><li>保留消息：Kafka 的一个重要特性。Kafka broker 默认的消息保留策略是这样的：要么保留一段时间（比如 7 天），要么保留到消息达到一定大小的字节数（比如 1GB）。当消息数量达到这些上限时，旧消息就会过期并被删除。<a href="https://redis.io/topics/lru-cache">https://redis.io/topics/lru-cache</a></li></ol></li><li><p>KAFKA的一些特性</p><ol><li>多生产者</li><li>多消费者</li><li>基于磁盘的数据存储</li><li>伸缩性</li><li>高性能消息流处理工具</li></ol></li><li><p>生产者写数据</p><ol><li>向KAFKA发送消息的主要步骤<br><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/fvWEejvgWs2PU0Q3.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjYzODQsImZpbGVHVUlEIjoiMGwzTlZiV29uNkNsREUzUiIsImlhdCI6MTcwOTYyNjA4NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._NbzGkvi2YSKxtYb-bC4bmcJe0_fFp66QL-QaP07I0g" alt="img"></li><li>ProducerRecord 对象需要包含目标主题和要发送的内容。我们还可以指定键或分区。</li><li>在发送 ProducerRecord 对象时，生产者要先把键和值对象序列化成字节数组，这样它们才能够在网络上传输。</li><li>数据被传给分区器。如果之前在 ProducerRecord 对象里指定了分区，那么分区器 就不会再做任何事情，直接把指定的分区返回。如果没有指定分区，那么分区器会根据 ProducerRecord 对象的键来选择一个分区。</li><li>选好分区以后，生产者就知道该往哪个主题和分区发送这条记录了。紧接着，这条记录被添加到一个记录批次里，这个批次里的所有消息会被发送到相同的主题和分区上。有一个独立的线程负责把这些记录批次发送到相应的broker 上</li><li>服务器在收到这些消息时会返回一个响应。如果消息成功写入 Kafka，就返回一个 RecordMetaData 对象，它包含了主题和分区信息，以及记录在分区里的偏移量。如果写入失败，则会返回一个错误。生产者在收到错误之后会尝试重新发送消息，几次之后如果还是失败，就返回错误信息。</li></ol></li><li><p>发送消息的方式</p><ol><li>发送并忘记(fire and forget)<br>把消息发送给服务器，但并不关心它是否正常到达。因为 Kafka 是高可用的，而且生产者会自动尝试重发。不过，使用这种方式有时候 也会丢失一些消息。<ol start="2"><li>同步发送<br>明确的等待消息是否发送成功</li><li>异步发送<br> 指定一个回调函数，服务器在返回响应时调用该函数。</li></ol></li></ol></li><li><p>消费者消费</p></li></ol><p>1.消费者组</p><p><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/08siTUy8BJktuKvE.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjYzODQsImZpbGVHVUlEIjoiMGwzTlZiV29uNkNsREUzUiIsImlhdCI6MTcwOTYyNjA4NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._NbzGkvi2YSKxtYb-bC4bmcJe0_fFp66QL-QaP07I0g" alt="img"></p><p><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/7n57r2jz9Lmwhafp.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjYzODQsImZpbGVHVUlEIjoiMGwzTlZiV29uNkNsREUzUiIsImlhdCI6MTcwOTYyNjA4NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._NbzGkvi2YSKxtYb-bC4bmcJe0_fFp66QL-QaP07I0g" alt="img"></p><p><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/49dF7U7cKsa5mH0B.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjYzODQsImZpbGVHVUlEIjoiMGwzTlZiV29uNkNsREUzUiIsImlhdCI6MTcwOTYyNjA4NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._NbzGkvi2YSKxtYb-bC4bmcJe0_fFp66QL-QaP07I0g" alt="img"></p><p><img src="https://yach-doc-shimo.zhiyinlou.com/uploader/f/wg1hi4h2K5tKCMAM.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDk2MjYzODQsImZpbGVHVUlEIjoiMGwzTlZiV29uNkNsREUzUiIsImlhdCI6MTcwOTYyNjA4NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjozNTExNDI5fQ._NbzGkvi2YSKxtYb-bC4bmcJe0_fFp66QL-QaP07I0g" alt="img"></p><ol start="2"><li><p>再均衡</p><p>2.1当一个消费者被<strong>关闭或发生崩溃时</strong>，它就离开群组，原本由它读取的分区将由群组里的其他消费者来读取。在主题发生变化时，比如管理员添加了新的分区，会发生分区重分配。</p><p>2.2 分区的所有权从一个消费者转移到另一个消费者，这样的行为被称为<strong>再均衡</strong>。</p></li><li><p>消费者通过向被指派为群组协调器的 broker（不同的群组可以有不同的协调器）发送心跳来维持它们和群组的从属关系以及它们对分区的所有权关系。</p></li><li><p>如果消费者停止发送心跳的时间足够长，会话就会过期，群组协调器认为它已经死亡，就会触发一次再均衡。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>kafka</tag>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Certbot配置免费ssl证书</title>
    <link href="/2024/02/01/Certbot%20ssl%E5%AE%89%E8%A3%85/"/>
    <url>/2024/02/01/Certbot%20ssl%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><a href="https://certbot.eff.org/instructions?ws=nginx&os=centosrhel7&tab=standard">certbot 使用说明</a></li><li><a href="https://snapcraft.io/docs/installing-snap-on-centos">Installing snap on CentOS</a></li></ol><p>环境：</p><ul><li>Centos7</li></ul><h2 id="Certbot-安装"><a href="#Certbot-安装" class="headerlink" title="Certbot 安装"></a>Certbot 安装</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Certbot 会根据 Web 服务器的配置文件自动生成 HTTPS 证书，自动续期证书。</p><h3 id="第一步-安装-snapd"><a href="#第一步-安装-snapd" class="headerlink" title="第一步 安装 snapd"></a>第一步 安装 snapd</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 添加 epel 仓库</span><br>sudo yum install epel-release<br><span class="hljs-comment"># 安装 snapd</span><br>sudo yum install snapd<br><span class="hljs-comment"># 添加通信 socket</span><br>sudo systemctl enable --now snapd.socket<br><span class="hljs-comment"># 命令行支持</span><br>sudo ln -s <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/snapd/</span>snap /snap<br></code></pre></td></tr></table></figure><h3 id="第二步-删除用系统命令安装的-Certbot"><a href="#第二步-删除用系统命令安装的-Certbot" class="headerlink" title="第二步 删除用系统命令安装的 Certbot"></a>第二步 删除用系统命令安装的 Certbot</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo yum <span class="hljs-built_in">remove</span> certbot<br></code></pre></td></tr></table></figure><h3 id="第三步-安装-Certbot"><a href="#第三步-安装-Certbot" class="headerlink" title="第三步 安装 Certbot"></a>第三步 安装 Certbot</h3><p>安装过程中需要在命令行 输入 邮箱，选择域名等。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo snap install --classic certbot<br>sudo ln -s <span class="hljs-regexp">/snap/</span>bin<span class="hljs-regexp">/certbot /u</span>sr<span class="hljs-regexp">/bin/</span>certbot<br></code></pre></td></tr></table></figure><h3 id="第四步-运行-Certbot"><a href="#第四步-运行-Certbot" class="headerlink" title="第四步 运行 Certbot"></a>第四步 运行 Certbot</h3><p>运行之后会根据nginx配置文件里面的域名自动生成证书。</p><p>nginx 配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>   <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-attribute">server_name</span>  note.sunfeilong.com; <span class="hljs-comment">#根据这里生成证书</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo certbot <span class="hljs-comment">--nginx</span><br></code></pre></td></tr></table></figure><h3 id="第五步-测试自动续期"><a href="#第五步-测试自动续期" class="headerlink" title="第五步 测试自动续期"></a>第五步 测试自动续期</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo certbot renew <span class="hljs-comment">--dry-run</span><br></code></pre></td></tr></table></figure><p>查看定时任务，里面有 certbot</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl list-timers</span><br></code></pre></td></tr></table></figure><p>输出如下:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">NEXT</span>                         LEFT     LAST     PASSED        UNIT                        ACTIVATES<br><span class="hljs-attribute">Thu</span> <span class="hljs-number">2024</span>-<span class="hljs-number">02</span>-<span class="hljs-number">29</span> <span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">00</span> CST  <span class="hljs-number">18</span>h left  n/a      n/a     snap.certbot.renew.timer     snap.certbot.renew.service<br></code></pre></td></tr></table></figure><h3 id="第六步-验证网址是否支持-HTTPS"><a href="#第六步-验证网址是否支持-HTTPS" class="headerlink" title="第六步 验证网址是否支持 HTTPS"></a>第六步 验证网址是否支持 HTTPS</h3><p>用 HTTPS 的方式访问网址，查看是否有证书 <code>https://yourwebsite.com</code>。</p>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用命令记录</title>
    <link href="/2024/01/25/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/01/25/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># nginx启动</span><br><br><span class="hljs-attribute">sudo</span> /opt/homebrew/bin/nginx<br><br>sudo nginx -s reload<br></code></pre></td></tr></table></figure><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><p>本地nacos启动：</p><p>sh startup.sh -m standalone 单机启动   </p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p>php项目本地配置：</p><p>cd &#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;nginx&#x2F;servers</p><p>创建一个项目对应的conf</p><p>重启加载配置</p><p>启动不了查看nginx日志，修改日志打印路径为当前文件夹，不然会出错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">/Users/xwx/PhpstormProjects/campaign<br><br>// php依赖包下载更新 -vvv代表控制台展示下载过程<br>composer install -vvv<br>composer update -vvv<br></code></pre></td></tr></table></figure><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>使用了wire依赖注入框架的项目本地启动:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> run . <span class="hljs-comment">// 同时启动main.go  和  wire_gen.go</span><br><br><span class="hljs-keyword">go</span> mod init <br><span class="hljs-keyword">go</span> mod tidy<br><span class="hljs-keyword">go</span> mod vendor<br><br><span class="hljs-comment">// 在Go中通过逃逸分析日志来确定变量是否逃逸，开启逃逸分析日志：</span><br><span class="hljs-keyword">go</span> build -gcflags <span class="hljs-string">&#x27;-m -l&#x27;</span> main.<span class="hljs-keyword">go</span><br><span class="hljs-comment">// -m 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 -m，但是信息量较大，一般用 1 个就可以了。</span><br><span class="hljs-comment">// -l 会禁用函数内联，在这里禁用掉内联能更好的观察逃逸情况，减少干扰。</span><br><span class="hljs-keyword">go</span> run -gcflags <span class="hljs-string">&#x27;-m -l&#x27;</span> main.<span class="hljs-keyword">go</span><br><br><span class="hljs-comment">// 反汇编源码：</span><br><span class="hljs-keyword">go</span> tool compile -S main.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 上线合并分支流程<br><br>先new 一个branch（release-当前日期），然后把开发分支合并到这个branch<br><br>在把这个branch合并到master<br><br>打tag，去tag那里new一个即可，tag递增，message填写相关功能描述<br><br><br>//拉取对应分支<br> git pull origin 分支名称<br><br>//推送到远程分支<br>git push origin 分支名称<br><br>git checkout -b 分支名称<br><br><br>// git操作规范<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改新功能</span><br><br>1. git checkout master #切换到master分支<br>2. git pull  origin master #将master更新到最新状态<br>3. git checkout -b dev-分支名称  # 从最新master分支切出一个开发分支进行开发<br>4. 在3操作切出的分支进行功能开发·············<br>5. 功能完成后~<br>6. git checkout master #切换回到master分支<br>7. git pull  origin master #将master更新到最新状态（因为在开发过程中可能另外一个人已经将代码合并到master分支）<br>8. git checkout  dev分支 # 切换回到dev开发分支<br>9. git rebase master # 修改master基点<br>10.在从master重新创建新分支同步完成的功能<br>11. 然后在进行合并到master分支<br><br><br>// git 把一个分支的修改内容转移到master分支然后重新从master建立新分支<br>git stash<br><br>git checkout master<br><br>git pull origin master<br><br>git checkout -b 分支名<br><br>git stash pop<br><br>git diff<br><br>git status<br><br>//  合并分支rebase<br>git checkout master <br><br>git  pull<br><br>git checkout 开发分支<br><br>git rebase master<br><br>处理冲突 <br><br>git  push -f  #强制推送<br><br><br>// git合并多次commit操作<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">### One</span></span><br><br>1.1 git add .  /   git  add 文件名<br><br>1.2. git commit --amend  &quot;message&quot; # 可以将本次提交合并到上一次提交<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">### Two</span></span><br><br>2.1. git log # 查看提交记录<br><br>2.2. git rebase -i  HEAD~4 # 从HEAD版本开始往前数4个版本（根据需要变化起始值和结束值）<br><br>2.3. 进入vim编辑器过后修改需要合并的commit前缀，pick-&gt;s<br><br>例如：<br>pick commit1<br>s commit2<br>pick commit3<br>s commit4<br><br>上述修改即为把commit2和commit1合并，commit4和commit3合并，根据需要自己调整即可！<br><br>修改完成后保存退出<br><br>可能需要手动处理冲突（处理冲突后 git add .  &amp;&amp;   git rebase --continue）<br><br>上述流程完成后会进入commit信息修改，根据需要修改即可，然后保存退出<br><br>2.4. git push -f   /   git  push -f origin 远程分支   # 强制推送到远程分支<br><br></code></pre></td></tr></table></figure><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell">日志级别（开发环境日志级别为INFO）<br>ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF<br><br>// 查看历史使用命令<br>history | grep  命令包含字符<br><br>//dev-yx2  workwxsdk启动重启<br><br>1. cd   workwvsdk/<br>2. sh  docker_run.sh  镜像名称<br><br>// 青海电信CVD环境查看和配置命令<br><br>1. cd workwx-pri  #进入工作目录<br><br>2. vi docker-compose.yaml #修改镜像地址<br><br>3. docker-compose restart  # 重启镜像<br><br>4. docker-compose ps # 查看镜像状态<br><br>5. cd /opt/workwx/config/  # 到达配置文件目录<br><br>6. 修改配置文件后重启即可<br><br><br>dk -n dev-yx2  rollout restart statefulsets  pulsar-cluster  # 重启k8s环境的pulsar<br><br><br>//发布测试接口流程<br><br>1.k -n dev-yx2 edit deploy 项目名称-deploy  # 修改测试部署项目镜像<br>例子1： k -n dev-yx2 edit deploy corpfansop-deploy <br>例子2：k -n dev-yx2 edit deploy account-deploy <br><br>2. k -n dev-yx2 rollout restart deploy corpfansop-deploy # 重启项目<br><br>3. tail -f /var/log/xiaoduo/dev-yx2/corpfansop.app.log # 查看日志记录<br><br>4. tail -f /var/log/xiaoduo/dev-yx2/corpfansop.err.log # 查看错误日志记录<br><br><br>5.grep &#x27;信息&#x27; /var/log/xiaoduo/dev-yx2/corpfansop.err.log # 查找日志<br><br><br>6.ssh  用户名@主机地址    # 通过ssh连接远程<br></code></pre></td></tr></table></figure><h1 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h1><p>dk get pod | grep corpqc<br>dk rollout restart deployment corpqc-deploy<br>查看k8s日志<br>k logs 镜像名称</p><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">MongoDB数据库操作<br><br><span class="hljs-number">1.</span> k <span class="hljs-operator">-</span>n dev<span class="hljs-operator">-</span>yx2 <span class="hljs-keyword">exec</span> <span class="hljs-operator">-</span>it mongo<span class="hljs-operator">-</span>accounting<span class="hljs-number">-0</span> bash # 连接数据库<br>   <span class="hljs-number">2.</span>mongo    <span class="hljs-operator">/</span>    mongo  <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p Mongo1234<span class="hljs-operator">!</span> <span class="hljs-comment">--authenticationDatabase admin</span><br>   <span class="hljs-number">3.</span>use 数据库名称；# 切换到对应数据库<br>   <span class="hljs-number">4.</span><span class="hljs-keyword">show</span> tables； # 查询数据库所有表<br>   <span class="hljs-number">5.</span>db.表名.find();  #查询表信息<br>   <span class="hljs-number">6.</span>db.company.find(&#123;&quot;account_id&quot; : &quot;616e71114798df14bc84e00c&quot;&#125;) #匹配查询<br><br>更新数据段<br>db.company<br>  .<span class="hljs-keyword">update</span>(&#123;&quot;_id&quot; : ObjectId(&quot;62ba69b0f13474e2c38a3087&quot;)&#125;, &#123;$<span class="hljs-keyword">set</span>:&#123;&quot;auto_configed&quot;:<span class="hljs-literal">true</span>&#125;&#125;)<br></code></pre></td></tr></table></figure><p>Cookie 状态为httponly代表只能服务端通过脚本调用，不能在客户端浏览器获取！！！！！</p>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP使用记录</title>
    <link href="/2024/01/01/php%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/01/01/php%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="php记录"><a href="#php记录" class="headerlink" title="php记录"></a>php记录</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// empty() 判断一个变量是否被认为是空的。当一个变量并不存在，或者它的值等同于 FALSE，那么它会被认为不存在返回true。</span><br><br><span class="hljs-comment">// is_array函数是一种非常常用的函数，它用来判断一个变量是否是数组</span><br><br><span class="hljs-comment">// is_numeric()函数是一个用于检测变量或值是否为数字的函数。如果变量或值为数字，则返回true，否则返回false。</span><br><span class="hljs-comment">// &quot;123abc&quot;也可以被判断为数字类型。</span><br><br><span class="hljs-comment">// isset()函数用于检测变量是否已设置并且非NULL</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown编写基础教程</title>
    <link href="/2022/12/02/MarkDown%E6%95%99%E7%A8%8B/"/>
    <url>/2022/12/02/MarkDown%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>因为渲染原因部分显示异常~</p></blockquote><h1 id="MarkDown基础"><a href="#MarkDown基础" class="headerlink" title="MarkDown基础"></a>MarkDown基础</h1><p><a href="https://www.bilibili.com/video/av87982836#reply2366896129">基础篇视频讲解链接</a><br><a href="https://www.bilibili.com/video/av88551739/">画图篇视频讲解链接</a></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 标题名字（井号的个数代表标题的级数）</span><br></code></pre></td></tr></table></figure><h1 id="一级标题使用1个"><a href="#一级标题使用1个" class="headerlink" title="一级标题使用1个#"></a>一级标题使用1个#</h1><h2 id="二级标题使用2个"><a href="#二级标题使用2个" class="headerlink" title="二级标题使用2个#"></a>二级标题使用2个#</h2><h3 id="三级标题使用3个"><a href="#三级标题使用3个" class="headerlink" title="三级标题使用3个#"></a>三级标题使用3个#</h3><h4 id="四级标题使4用个"><a href="#四级标题使4用个" class="headerlink" title="四级标题使4用个#"></a>四级标题使4用个#</h4><h5 id="五级标题使用5个"><a href="#五级标题使用5个" class="headerlink" title="五级标题使用5个#"></a>五级标题使用5个#</h5><h6 id="六级标题使用6个"><a href="#六级标题使用6个" class="headerlink" title="六级标题使用6个#"></a>六级标题使用6个#</h6><p>####### 最多支持六级标题#</p><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这就是 ~~删除线~~ (使用波浪号)<br></code></pre></td></tr></table></figure><p>这就是 <del>删除线</del> (使用波浪号)</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是用来 <span class="hljs-emphasis">*斜体*</span> 的 <span class="hljs-emphasis">_文本_</span><br></code></pre></td></tr></table></figure><p>这是用来 <em>斜体</em> 的 <em>文本</em></p><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是用来 <span class="hljs-strong">**加粗**</span> 的 <span class="hljs-strong">__文本__</span><br></code></pre></td></tr></table></figure><p>这是用来 <strong>加粗</strong> 的 <strong>文本</strong></p><h3 id="斜体-加粗"><a href="#斜体-加粗" class="headerlink" title="斜体+加粗"></a>斜体+加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是用来 <span class="hljs-strong">**<span class="hljs-emphasis">*斜体+加粗*</span>**</span> 的 <span class="hljs-strong">__<span class="hljs-emphasis">_文本_</span>__</span><br></code></pre></td></tr></table></figure><p>这是用来 <em><strong>斜体+加粗</strong></em> 的 <em><strong>文本</strong></em></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线是HTML语法</p><p><code>下划线</code> <u>下划线(快捷键<code>command</code>+<code>u</code>，视频中所有的快捷键都是针对Mac系统，其他系统可自行查找)</u></p><h3 id="高亮（需勾选扩展语法）"><a href="#高亮（需勾选扩展语法）" class="headerlink" title="高亮（需勾选扩展语法）"></a>高亮（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是用来 ==斜体+加粗== 的文本<br></code></pre></td></tr></table></figure><p>这是用来 &#x3D;&#x3D;斜体+加粗&#x3D;&#x3D; 的文本</p><h3 id="下标（需勾选扩展语法）"><a href="#下标（需勾选扩展语法）" class="headerlink" title="下标（需勾选扩展语法）"></a>下标（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">水 H~2~O <br>双氧水 H~2~O~2~ <br></code></pre></td></tr></table></figure><p>水 H<del>2</del>O</p><p>双氧水 H<del>2</del>O<del>2</del></p><h3 id="上标（需勾选扩展语法）"><a href="#上标（需勾选扩展语法）" class="headerlink" title="上标（需勾选扩展语法）"></a>上标（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">面积 m^2^ <br>体积 m^3^<br></code></pre></td></tr></table></figure><p>面积 m^2^<br>体积 m^3^</p><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p> Emoji 支持表情符号，你可以用系统默认的 Emoji 符号（ Windows 用户不一定支持，自己试下~）。 也可以用图片的表情，输入 <code>:</code> 将会出现智能提示。  </p><h4 id="一些表情例子"><a href="#一些表情例子" class="headerlink" title="一些表情例子"></a>一些表情例子</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">:smile: :laughing: :dizzy<span class="hljs-emphasis">_face: :sob: :cold_</span>sweat: :sweat<span class="hljs-emphasis">_smile:  :cry: :triumph: :heart_</span>eyes: :relaxed: :sunglasses: :weary:<br><br>:+1: :-1: :100: :clap: :bell: :gift: :question: :bomb: :heart: :coffee: :cyclone: :bow: :kiss: :pray: :sweat<span class="hljs-emphasis">_drops: :hankey: :exclamation: :anger:</span><br><span class="hljs-emphasis"></span><br></code></pre></td></tr></table></figure><p>:smile: :laughing: :dizzy_face: :sob: :cold_sweat: :sweat_smile:  :cry: :triumph: :heart_eyes: :relaxed: :sunglasses: :weary: :+1: :-1: :100: :clap: :bell: :gift: :question: :bomb: :heart: :coffee: :cyclone: :bow: :kiss: :pray: :sweat_drops: :hankey: :exclamation: :anger:</p><p>(  Mac: <code>control</code>+<code>command</code>+<code>space</code>点选)</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">name | price<br>--- | ---<br>fried chicken | 19<br>cola|5<br></code></pre></td></tr></table></figure><blockquote><p>为了使 Markdown 更清晰，<code>|</code> 和 <code>-</code> 两侧需要至少有一个空格（最左侧和最右侧的 <code>|</code> 外就不需要了）。</p></blockquote><table><thead><tr><th>name</th><th>price</th></tr></thead><tbody><tr><td>fried chicken</td><td>19</td></tr><tr><td>cola</td><td>5</td></tr></tbody></table><p>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 <code>|</code> 来标记单元格边界，在表头下方的分隔线标记中加入 <code>:</code>，即可标记下方单元格内容的对齐方式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|    name       | price |<br>| :------------ | :---: |<br>| fried chicken | 19    |<br>| cola          |  32   |<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">name</th><th align="center">price</th></tr></thead><tbody><tr><td align="left">fried chicken</td><td align="center">19</td></tr><tr><td align="left">cola</td><td align="center">32</td></tr></tbody></table><p>使用快捷键<code>command</code>+<code>opt</code>+<code>T</code>更方便(段落→表格→插入表格，即可查看快捷键)</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&gt;“后悔创业”<br></code></pre></td></tr></table></figure><blockquote><p>“后悔创业”</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&gt;也可以在引用中<br>&gt;&gt;使用嵌套的引用<br></code></pre></td></tr></table></figure><blockquote><p>也可以在引用中</p><blockquote><p>使用嵌套的引用</p></blockquote></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表–符号-空格"><a href="#无序列表–符号-空格" class="headerlink" title="无序列表–符号 空格"></a>无序列表–符号 空格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 可以使用 <span class="hljs-code">`*`</span> 作为标记<br><span class="hljs-bullet">+</span> 也可以使用 <span class="hljs-code">`+`</span><br><span class="hljs-bullet">-</span> 或者 <span class="hljs-code">`-`</span><br></code></pre></td></tr></table></figure><ul><li>可以使用 <code>*</code> 作为标记</li></ul><ul><li>也可以使用 <code>+</code></li></ul><ul><li>或者 <code>-</code></li></ul><h3 id="有序列表–数字-空格"><a href="#有序列表–数字-空格" class="headerlink" title="有序列表–数字 . 空格"></a>有序列表–数字 <code>.</code> 空格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 有序列表以数字和 <span class="hljs-code">`.`</span> 开始；<br><span class="hljs-bullet">3.</span> 数字的序列并不会影响生成的列表序列；<br><span class="hljs-bullet">4.</span> 但仍然推荐按照自然顺序（1.2.3...）编写。<br></code></pre></td></tr></table></figure><ol><li><p>有序列表以数字和 <code>.</code> 开始；</p></li><li><p>数字的序列并不会影响生成的列表序列；</p></li><li><p>但仍然推荐按照自然顺序（1.2.3…）编写。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">可以使用：数字\. 来取消显示为列表（用反斜杠进行转义）<br></code></pre></td></tr></table></figure></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">```语言名称</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">也可以通过 <span class="hljs-code">``，插入行内代码（`</span> 是 <span class="hljs-code">`Tab`</span> 键上边、数字 <span class="hljs-code">`1`</span> 键左侧的那个按键）：<br><br>例如 <span class="hljs-code">`Markdown`</span><br></code></pre></td></tr></table></figure><p><code>Markdown</code></p><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>代码块中的文本（包括 Markdown 语法）都会显示为原始内容</p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>可以在一行中使用三个或更多的 <code>*</code>、<code>-</code> 或 <code>_</code> 来添加分隔线（&#96;&#96;）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"><span class="hljs-strong">***</span></span><br><span class="hljs-strong"><span class="hljs-section">------</span></span><br><span class="hljs-strong"><span class="hljs-section">__<span class="hljs-emphasis">_</span></span></span><br></code></pre></td></tr></table></figure><hr><hr><hr><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="外部跳转–超链接"><a href="#外部跳转–超链接" class="headerlink" title="外部跳转–超链接"></a>外部跳转–超链接</h3><p>格式为 <code>[link text](link)</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">帮助文档</span>](<span class="hljs-link">https://support.typora.io/Links/#faq</span>)<br></code></pre></td></tr></table></figure><p><a href="https://support.typora.io/Links/#faq">帮助文档</a></p><h3 id="内部跳转–本文件内跳（Typora支持）"><a href="#内部跳转–本文件内跳（Typora支持）" class="headerlink" title="内部跳转–本文件内跳（Typora支持）"></a>内部跳转–本文件内跳（Typora支持）</h3><p>格式为 <code>[link text](#要去的目的地--标题）</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">我想跳转</span>](<span class="hljs-link">#饼图（Pie）</span>)<br></code></pre></td></tr></table></figure><blockquote><p>Open Links in Typora</p><p>You can use <code>command+click</code> (macOS), or <code>ctrl+click</code> (Linux&#x2F;Windows) on links in Typora to jump to target headings, or open them in Typora, or open in related apps.</p></blockquote><p><a href="#%E9%A5%BC%E5%9B%BE%EF%BC%88Pie%EF%BC%89">我想跳转</a></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>使用 <code>&lt;&gt;</code> 包括的 URL 或邮箱地址会被自动转换为超链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml">&lt;https://www.baidu.com&gt;</span><br><br>&lt;123@email.com&gt;<br></code></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p><p><a href="mailto:123@email.com">123@email.com</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">自己起的图片名字</span>](<span class="hljs-link">图片地址或者图片本地存储的路径</span>)<br></code></pre></td></tr></table></figure><h3 id="网上的图片"><a href="#网上的图片" class="headerlink" title="网上的图片"></a>网上的图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">炸鸡</span>](<span class="hljs-link">https://s3.bmp.ovh/imgs/2022/12/01/dc2dec3ecff643e8.jpeg</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2022/12/01/dc2dec3ecff643e8.jpeg" alt="炸鸡"></p><h3 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">friedChicken</span>](<span class="hljs-link">friedChicken.jpg</span>)<br>在同一个文件夹里（用相对路径）<br>或者直接拷贝<br></code></pre></td></tr></table></figure><h2 id="利用Markdown画图（需勾选扩展语法）"><a href="#利用Markdown画图（需勾选扩展语法）" class="headerlink" title="利用Markdown画图（需勾选扩展语法）"></a>利用Markdown画图（需勾选扩展语法）</h2><p>markdown画图也是轻量级的，功能并不全。</p><p>Mermaid 是一个用于画流程图、状态图、时序图、甘特图的库，使用 JS 进行本地渲染，广泛集成于许多 Markdown 编辑器中。Mermaid 作为一个使用 JS 渲染的库，生成的不是一个“图片”，而是一段 HTML 代码。</p><p>（不同的编辑器渲染的可能不一样）</p><h3 id="流程图-graph"><a href="#流程图-graph" class="headerlink" title="流程图(graph)"></a>流程图(graph)</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">graph 方向描述<br><span class="hljs-code">    图表中的其他语句...</span><br></code></pre></td></tr></table></figure><p>关键字graph表示一个流程图的开始，同时需要指定该图的方向。</p><p>其中“方向描述”为：</p><table><thead><tr><th align="left">用词</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">TB</td><td align="left">从上到下</td></tr><tr><td align="left">BT</td><td align="left">从下到上</td></tr><tr><td align="left">RL</td><td align="left">从右到左</td></tr><tr><td align="left">LR</td><td align="left">从左到右</td></tr></tbody></table><blockquote><p>T &#x3D; TOP，B &#x3D; BOTTOM，L &#x3D; LEFT，R &#x3D; RIGHT，D &#x3D; DOWN</p></blockquote><p>最常用的布局方向是TB、LR。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">graph TB;<br>  A--&gt;B<br>  B--&gt;C<br>  C--&gt;A<br> <br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TB;  A--&gt;B  B--&gt;C  C--&gt;A</code></pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">graph LR;<br>  A--&gt;B<br>  B--&gt;C<br>  C--&gt;A<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph LR;  A--&gt;B  B--&gt;C  C--&gt;A</code></pre><h4 id="流程图常用符号及含义"><a href="#流程图常用符号及含义" class="headerlink" title="流程图常用符号及含义"></a>流程图常用符号及含义</h4><h5 id="节点形状"><a href="#节点形状" class="headerlink" title="节点形状"></a>节点形状</h5><table><thead><tr><th align="left">表述</th><th align="left">说明</th><th>含义</th></tr></thead><tbody><tr><td align="left">id[文字]</td><td align="left">矩形节点</td><td>表示过程，也就是整个流程中的一个环节</td></tr><tr><td align="left">id(文字)</td><td align="left">圆角矩形节点</td><td>表示开始和结束</td></tr><tr><td align="left">id((文字))</td><td align="left">圆形节点</td><td>表示连接。为避免流程过长或有交叉，可将流程切开。成对</td></tr><tr><td align="left">id{文字}</td><td align="left">菱形节点</td><td>表示判断、决策</td></tr><tr><td align="left">id&gt;文字]</td><td align="left">右向旗帜状节点</td><td></td></tr></tbody></table><p><strong>单向箭头线段</strong>：表示流程进行方向</p><blockquote><p>id即为节点的唯一标识，A~F 是当前节点名字，类似于变量名，画图时便于引用</p><p>括号内是节点中要显示的文字，默认节点的名字和显示的文字都为A</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">graph TB<br>  A<br>  B(圆角矩形节点)<br>  C[矩形节点]<br>  D((圆形节点))<br>  E&#123;菱形节点&#125;<br>  F&gt;右向旗帜状节点] <br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TB  A  B(圆角矩形节点)  C[矩形节点]  D((圆形节点))  E&#123;菱形节点&#125;  F&gt;右向旗帜状节点]</code></pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">graph TB<br><span class="hljs-code">    begin(出门)--&gt; buy[买炸鸡]</span><br><span class="hljs-code">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span><br><span class="hljs-code">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家)</span><br><span class="hljs-code">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack</span><br><span class="hljs-code">    </span><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TB    begin(出门)--&gt; buy[买炸鸡]    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家)    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack    </code></pre><h5 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">graph TB<br>  A1--&gt;B1<br>  A2---B2<br>  A3--text---B3<br>  A4--text--&gt;B4<br>  A5-.-B5<br>  A6-.-&gt;B6<br>  A7-.text.-B7<br>  A8-.text.-&gt;B8<br>  A9===B9<br>  A10==&gt;B10<br>  A11==text===B11<br>  A12==text==&gt;B12<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TB  A1--&gt;B1  A2---B2  A3--text---B3  A4--text--&gt;B4  A5-.-B5  A6-.-&gt;B6  A7-.text.-B7  A8-.text.-&gt;B8  A9===B9  A10==&gt;B10  A11==text===B11  A12==text==&gt;B12</code></pre><pre><code class=" mermaid">graph TB A ---B</code></pre><h5 id="子图表"><a href="#子图表" class="headerlink" title="子图表"></a>子图表</h5><p>使用以下语法添加子图表</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">subgraph 子图表名称<br><span class="hljs-code">    子图表中的描述语句...</span><br><span class="hljs-code">end</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">graph TB<br><span class="hljs-code">  subgraph 买炸鸡前</span><br><span class="hljs-code">    begin(出门)--&gt; buy[出门买炸鸡]</span><br><span class="hljs-code">    end</span><br><span class="hljs-code">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span><br><span class="hljs-code">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家)</span><br><span class="hljs-code">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack</span><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TB  subgraph 买炸鸡前    begin(出门)--&gt; buy[出门买炸鸡]    end    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家)    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack</code></pre><h3 id="序列图-sequence-diagram"><a href="#序列图-sequence-diagram" class="headerlink" title="序列图(sequence diagram)"></a>序列图(sequence diagram)</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">sequenceDiagram <br><span class="hljs-code">[参与者1][消息线][参与者2]:消息体</span><br><span class="hljs-code">    ...</span><br></code></pre></td></tr></table></figure><blockquote><p><code>sequenceDiagram</code> 为每幅时序图的固定开头</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">sequenceDiagram<br><span class="hljs-code">Title: 买炸鸡</span><br><span class="hljs-code">    救救-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？</span><br><span class="hljs-code">    炸鸡店小哥--&gt;&gt;救救: 没有，要现炸</span><br><span class="hljs-code"></span><br><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">sequenceDiagramTitle: 买炸鸡    救救-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？    炸鸡店小哥--&gt;&gt;救救: 没有，要现炸</code></pre><h4 id="参与者（participant）"><a href="#参与者（participant）" class="headerlink" title="参与者（participant）"></a>参与者（participant）</h4><p>传统时序图概念中参与者有角色和类对象之分，但这里我们不做此区分，用参与者表示一切参与交互的事物，可以是人、类对象、系统等形式。中间竖直的线段从上至下表示时间的流逝。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">sequenceDiagram<br><span class="hljs-code">    participant 参与者 1</span><br><span class="hljs-code">    participant 参与者 2</span><br><span class="hljs-code">    ...</span><br><span class="hljs-code">    participant 简称 as 参与者 3 #该语法可以在接下来的描述中使用简称来代替参与者 3</span><br></code></pre></td></tr></table></figure><blockquote><p><code>participant &lt;参与者名称&gt;</code> 声明参与者，语句次序即为参与者横向排列次序。</p></blockquote><h4 id="消息线"><a href="#消息线" class="headerlink" title="消息线"></a>消息线</h4><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-&gt;</td><td align="left">无箭头的实线</td></tr><tr><td align="left">–&gt;</td><td align="left">无箭头的虚线</td></tr><tr><td align="left">-&gt;&gt;</td><td align="left">有箭头的实线（主动发出消息）</td></tr><tr><td align="left">–-&gt;&gt;</td><td align="left">有箭头的虚线（响应）</td></tr><tr><td align="left">-x</td><td align="left">末端为叉的实线（表示异步）</td></tr><tr><td align="left">–x</td><td align="left">末端为叉的虚线（表示异步）</td></tr></tbody></table><h4 id="处理中-激活框"><a href="#处理中-激活框" class="headerlink" title="处理中-激活框"></a>处理中-激活框</h4><p>从消息接收方的时间线上标记一小段时间，表示对消息进行处理的时间间隔。</p><p>在消息线末尾增加 <code>+</code> ，则消息接收者进入当前消息的“处理中”状态；<br>在消息线末尾增加 <code>-</code> ，则消息接收者离开当前消息的“处理中”状态。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">sequenceDiagram<br><span class="hljs-code">    participant 99 as 救救</span><br><span class="hljs-code">    participant seller as 炸鸡店小哥</span><br><span class="hljs-code">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><br><span class="hljs-code">    seller --&gt;&gt; 99: 没有，要现炸。</span><br><span class="hljs-code">    99 -x +seller:给我炸！</span><br><span class="hljs-code">    seller --&gt;&gt; -99: 您的炸鸡好了！</span><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">sequenceDiagram    participant 99 as 救救    participant seller as 炸鸡店小哥    99 -&gt;&gt; seller: 还有炸鸡吗？    seller --&gt;&gt; 99: 没有，要现炸。    99 -x +seller:给我炸！    seller --&gt;&gt; -99: 您的炸鸡好了！    </code></pre><h4 id="注解（note）"><a href="#注解（note）" class="headerlink" title="注解（note）"></a>注解（note）</h4><p>语法如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Note 位置表述 参与者: 标注文字<br></code></pre></td></tr></table></figure><p>其中位置表述可以为</p><table><thead><tr><th align="left">表述</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">right of</td><td align="left">右侧</td></tr><tr><td align="left">left of</td><td align="left">左侧</td></tr><tr><td align="left">over</td><td align="left">在当中，可以横跨多个参与者</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">sequenceDiagram<br><span class="hljs-code">    participant 99 as 救救</span><br><span class="hljs-code">    participant seller as 炸鸡店小哥</span><br><span class="hljs-code">    Note over 99,seller : 热爱炸鸡</span><br><span class="hljs-code">    Note left of 99 : 女</span><br><span class="hljs-code">    Note right of seller : 男</span><br><span class="hljs-code">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><br><span class="hljs-code">    seller --&gt;&gt; 99: 没有，要现炸。</span><br><span class="hljs-code">    99 -x +seller : 给我炸！</span><br><span class="hljs-code">    seller --&gt;&gt; -99: 您的炸鸡好了！</span><br><span class="hljs-code"></span><br><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">sequenceDiagram    participant 99 as 救救    participant seller as 炸鸡店小哥    Note over 99,seller : 热爱炸鸡    Note left of 99 : 女    Note right of seller : 男    99 -&gt;&gt; seller: 还有炸鸡吗？    seller --&gt;&gt; 99: 没有，要现炸。    99 -x +seller : 给我炸！    seller --&gt;&gt; -99: 您的炸鸡好了！</code></pre><h4 id="循环（loop）"><a href="#循环（loop）" class="headerlink" title="循环（loop）"></a>循环（loop）</h4><p>在条件满足时，重复发出消息序列。（相当于编程语言中的 while 语句。）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">sequenceDiagram<br><span class="hljs-code">    participant 99 as 救救</span><br><span class="hljs-code">    participant seller as 炸鸡店小哥</span><br><span class="hljs-code">   </span><br><span class="hljs-code">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><br><span class="hljs-code">    seller --&gt;&gt; 99: 没有，要现炸。</span><br><span class="hljs-code">    99 -&gt;&gt; +seller:给我炸！</span><br><span class="hljs-code">    loop 三分钟一次</span><br><span class="hljs-code">        99 -&gt;&gt; seller : 我的炸鸡好了吗？</span><br><span class="hljs-code">        seller --&gt;&gt; 99 : 正在炸</span><br><span class="hljs-code">    end</span><br><span class="hljs-code">    seller --&gt;&gt; -99: 您的炸鸡好了！</span><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">sequenceDiagram    participant 99 as 救救    participant seller as 炸鸡店小哥       99 -&gt;&gt; seller: 还有炸鸡吗？    seller --&gt;&gt; 99: 没有，要现炸。    99 -&gt;&gt; +seller:给我炸！    loop 三分钟一次        99 -&gt;&gt; seller : 我的炸鸡好了吗？        seller --&gt;&gt; 99 : 正在炸    end    seller --&gt;&gt; -99: 您的炸鸡好了！</code></pre><h4 id="选择（alt）"><a href="#选择（alt）" class="headerlink" title="选择（alt）"></a>选择（alt）</h4><p>在多个条件中作出判断，每个条件将对应不同的消息序列。（相当于 if 及 else if 语句。）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">sequenceDiagram    <br><span class="hljs-code">    participant 99 as 救救</span><br><span class="hljs-code">    participant seller as 炸鸡店小哥</span><br><span class="hljs-code">    99 -&gt;&gt; seller : 现在就多少只炸好的炸鸡？</span><br><span class="hljs-code">    seller --&gt;&gt; 99 : 可卖的炸鸡数</span><br><span class="hljs-code">    </span><br><span class="hljs-code">    alt 可卖的炸鸡数 &gt; 3</span><br><span class="hljs-code">        99 -&gt;&gt; seller : 买三只！</span><br><span class="hljs-code">    else 1 &lt; 可卖的炸鸡数 &lt; 3</span><br><span class="hljs-code">        99 -&gt;&gt; seller : 有多少买多少</span><br><span class="hljs-code">    else 可卖的炸鸡数 &lt; 1</span><br><span class="hljs-code">        99 -&gt;&gt; seller : 那我明天再来</span><br><span class="hljs-code">    end</span><br><span class="hljs-code"></span><br><span class="hljs-code">    seller --&gt;&gt; 99 : 欢迎下次光临</span><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">sequenceDiagram        participant 99 as 救救    participant seller as 炸鸡店小哥    99 -&gt;&gt; seller : 现在就多少只炸好的炸鸡？    seller --&gt;&gt; 99 : 可卖的炸鸡数        alt 可卖的炸鸡数 &gt; 3        99 -&gt;&gt; seller : 买三只！    else 1 &lt; 可卖的炸鸡数 &lt; 3        99 -&gt;&gt; seller : 有多少买多少    else 可卖的炸鸡数 &lt; 1        99 -&gt;&gt; seller : 那我明天再来    end    seller --&gt;&gt; 99 : 欢迎下次光临</code></pre><h4 id="可选（opt）"><a href="#可选（opt）" class="headerlink" title="可选（opt）"></a>可选（opt）</h4><p>在某条件满足时执行消息序列，否则不执行。相当于单个分支的 if 语句。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">sequenceDiagram<br><span class="hljs-code">    participant 99 as 救救</span><br><span class="hljs-code">    participant seller as 炸鸡店小哥</span><br><span class="hljs-code">    99 -&gt;&gt; seller : 买炸鸡</span><br><span class="hljs-code">    opt 全都卖完了</span><br><span class="hljs-code">        seller --&gt;&gt; 99 : 下次再来</span><br><span class="hljs-code">    end</span><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">sequenceDiagram    participant 99 as 救救    participant seller as 炸鸡店小哥    99 -&gt;&gt; seller : 买炸鸡    opt 全都卖完了        seller --&gt;&gt; 99 : 下次再来    end</code></pre><h4 id="并行（Par）"><a href="#并行（Par）" class="headerlink" title="并行（Par）"></a>并行（Par）</h4><p>将消息序列分成多个片段，这些片段并行执行。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">sequenceDiagram<br>   participant 99 as 救救<br>   participant seller as 炸鸡店小哥<br>   <br><span class="hljs-code">    99 -&gt;&gt; seller : 一个炸鸡，一杯可乐！</span><br><span class="hljs-code"></span><br><span class="hljs-code">    par 并行执行</span><br><span class="hljs-code">        seller -&gt;&gt; seller : 装可乐</span><br><span class="hljs-code">    and</span><br><span class="hljs-code">        seller -&gt;&gt; seller : 炸炸鸡</span><br><span class="hljs-code">    end</span><br><span class="hljs-code"></span><br><span class="hljs-code">    seller --&gt;&gt; 99 : 您的炸鸡好了！</span><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">sequenceDiagram   participant 99 as 救救   participant seller as 炸鸡店小哥       99 -&gt;&gt; seller : 一个炸鸡，一杯可乐！    par 并行执行        seller -&gt;&gt; seller : 装可乐    and        seller -&gt;&gt; seller : 炸炸鸡    end    seller --&gt;&gt; 99 : 您的炸鸡好了！</code></pre><h3 id="饼图（Pie）"><a href="#饼图（Pie）" class="headerlink" title="饼图（Pie）"></a>饼图（Pie）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">pie<br><span class="hljs-code">    title Pie Chart</span><br><span class="hljs-code">    &quot;Dogs&quot; : 386</span><br><span class="hljs-code">    &quot;Cats&quot; : 85</span><br><span class="hljs-code">    &quot;Rats&quot; : 150 </span><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">pie    title Pie Chart    &quot;Dogs&quot; : 386    &quot;Cats&quot; : 85    &quot;Rats&quot; : 150     &quot;panda&quot; : 200</code></pre><blockquote><p><a href="http://support.typora.io/Draw-Diagrams-With-Markdown/">Typora支持mermaid的官方链接</a></p></blockquote><h3 id="甘特图（gantt）"><a href="#甘特图（gantt）" class="headerlink" title="甘特图（gantt）"></a>甘特图（gantt）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown"> title 标题<br>dateFormat 日期格式<br>section 部分名<br>任务名:参数一, 参数二, 参数三, 参数四，参数五<br><br> //参数一：crit（是否重要，红框框） 或者 不填<br> //参数二：done（已完成）、active（正在进行） 或者 不填(表示为待完成状态)<br> //参数三：取小名 或者 不填<br> //参数四：任务开始时间<br> //参数五：任务结束时间<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://mermaid-js.github.io/mermaid/#/gantt">官方教程</a></p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gantt</span><br>       <span class="hljs-attribute">dateFormat</span>  YYYY-MM-DD<br>       <span class="hljs-attribute">title</span> Adding GANTT diagram functionality to mermaid<br><br>       <span class="hljs-attribute">section</span> A section<br>       <span class="hljs-attribute">Completed</span> task            :done,    des1, <span class="hljs-number">2014</span>-<span class="hljs-number">01</span>-<span class="hljs-number">06</span>,<span class="hljs-number">2014</span>-<span class="hljs-number">01</span>-<span class="hljs-number">08</span><br>       <span class="hljs-attribute">Active</span> task               :active,  des2, <span class="hljs-number">2014</span>-<span class="hljs-number">01</span>-<span class="hljs-number">09</span>, <span class="hljs-number">3</span>d<br>       <span class="hljs-attribute">Future</span> task               :         des3, after des2, <span class="hljs-number">5</span>d<br>       <span class="hljs-attribute">Future</span> task2              :         des4, after des3, <span class="hljs-number">5</span>d<br><br>       <span class="hljs-attribute">section</span> Critical tasks<br>       <span class="hljs-attribute">Completed</span> task in the critical line :crit, done, <span class="hljs-number">2014</span>-<span class="hljs-number">01</span>-<span class="hljs-number">06</span>,<span class="hljs-number">24</span>h<br>       <span class="hljs-attribute">Implement</span> parser and jison          :crit, done, after des1, <span class="hljs-number">2</span>d<br>       <span class="hljs-attribute">Create</span> tests for parser             :crit, active, <span class="hljs-number">3</span>d<br>       <span class="hljs-attribute">Future</span> task in critical line        :crit, <span class="hljs-number">5</span>d<br>       <span class="hljs-attribute">Create</span> tests for renderer           :<span class="hljs-number">2</span>d<br>       <span class="hljs-attribute">Add</span> to mermaid                      :<span class="hljs-number">1</span>d<br><br>       <span class="hljs-attribute">section</span> Documentation<br>       <span class="hljs-attribute">Describe</span> gantt syntax               :active, a1, after des1, <span class="hljs-number">3</span>d<br>       <span class="hljs-attribute">Add</span> gantt diagram to demo page      :after a1  , <span class="hljs-number">20</span>h<br>       <span class="hljs-attribute">Add</span> another diagram to demo page    :doc1, after a1  , <span class="hljs-number">48</span>h<br><br>       <span class="hljs-attribute">section</span> Last section<br>       <span class="hljs-attribute">Describe</span> gantt syntax               :after doc1, <span class="hljs-number">3</span>d<br>       <span class="hljs-attribute">Add</span> gantt diagram to demo page      :<span class="hljs-number">20</span>h<br>       <span class="hljs-attribute">Add</span> another diagram to demo page    :<span class="hljs-number">48</span>h<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">gantt       dateFormat  YYYY-MM-DD       title Adding GANTT diagram functionality to mermaid       section A section       Completed task            :done,    des1, 2014-01-06,2014-01-08       Active task               :active,  des2, 2014-01-09, 3d       Future task               :         des3, after des2, 5d       Future task2              :         des4, after des3, 5d       section Critical tasks       Completed task in the critical line :crit, done, 2014-01-06,24h       Implement parser and jison          :crit, done, after des1, 2d       Create tests for parser             :crit, active, 3d       Future task in critical line        :crit, 5d       Create tests for renderer           :2d       Add to mermaid                      :1d       section Documentation       Describe gantt syntax               :active, a1, after des1, 3d       Add gantt diagram to demo page      :after a1  , 20h       Add another diagram to demo page    :doc1, after a1  , 48h       section Last section       Describe gantt syntax               :after doc1, 3d       Add gantt diagram to demo page      :20h       Add another diagram to demo page    :48h</code></pre>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity学习笔记</title>
    <link href="/2022/12/01/SpringSecurity%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/12/01/SpringSecurity%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringSecurity学习"><a href="#SpringSecurity学习" class="headerlink" title="SpringSecurity学习"></a>SpringSecurity学习</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> <strong>Spring Security</strong> 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架 <strong>Shiro</strong>，它提供了更丰富的功能，社区资源也比 Shiro 丰富。</p><p> 一般来说中大型的项目都是使用 <strong>SpringSecurity</strong> 来做安全框架。小项目有 Shiro 的比较多，因为相比与 SpringSecurity，Shiro 的上手更加的简单。</p><p> 一般 Web 应用的需要进行<strong>认证</strong>和<strong>授权</strong>。</p><p> <strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p><p> <strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p><p> 而认证和授权也是 SpringSecurity 作为安全框架的核心功能。</p><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h2><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><p> 我们先要搭建一个简单的 SpringBoot 工程</p><p>① 设置父工程 添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;parent&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">2.5</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/parent&gt;<br>&lt;dependencies&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>        &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>        &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>    &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><p>② 创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityApplication</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SecurityApplication.class,args);<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>③ 创建 Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br> <br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br> <br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h3 id="1-2-引入-SpringSecurity"><a href="#1-2-引入-SpringSecurity" class="headerlink" title="1.2 引入 SpringSecurity"></a>1.2 引入 SpringSecurity</h3><p> 在 SpringBoot 项目中使用 SpringSecurity 我们只需要引入依赖即可实现入门案例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p> 引入依赖后我们在尝试去访问之前的接口就会自动跳转到一个 SpringSecurity 的默认登陆页面，默认用户名是 user, 密码会输出在控制台。</p><p> 必须登陆之后才能对接口进行访问。</p><h2 id="2-认证"><a href="#2-认证" class="headerlink" title="2. 认证"></a>2. 认证</h2><h3 id="2-1-登陆校验流程"><a href="#2-1-登陆校验流程" class="headerlink" title="2.1 登陆校验流程"></a>2.1 登陆校验流程</h3><p><img src="https://s3.bmp.ovh/imgs/2022/12/01/0009c8d8f3b411d5.png"></p><h3 id="2-2-原理初探"><a href="#2-2-原理初探" class="headerlink" title="2.2 原理初探"></a>2.2 原理初探</h3><p> 想要知道如何实现自己的登陆流程就必须要先知道入门案例中 SpringSecurity 的流程。</p><p>2.2.1 SpringSecurity 完整流程</p><p> SpringSecurity 的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/01/36708ab26d2ce7bf.png"></p><p> 图中只展示了核心过滤器，其它的非核心过滤器并没有在图中展示。</p><p><strong>UsernamePasswordAuthenticationFilter</strong>: 负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p><p><strong>ExceptionTranslationFilter：</strong> 处理过滤器链中抛出的任何 AccessDeniedException 和 AuthenticationException 。</p><p><strong>FilterSecurityInterceptor：</strong> 负责权限校验的过滤器。</p><p> 我们可以通过 Debug 查看当前系统中 SpringSecurity 过滤器链中有哪些过滤器及它们的顺序。</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/01/bbd05a0b451ed608.png"></p><p>2.2.2 认证流程详解</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/01/e29327ad2b30cab6.png"></p><p>概念速查:</p><p>Authentication 接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p><p>AuthenticationManager 接口：定义了认证 Authentication 的方法</p><p>UserDetailsService 接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。</p><p>UserDetails 接口：提供核心用户信息。通过 UserDetailsService 根据用户名获取处理的用户信息要封装成 UserDetails 对象返回。然后将这些信息封装到 Authentication 对象中。</p><h3 id="2-3-解决问题"><a href="#2-3-解决问题" class="headerlink" title="2.3 解决问题"></a>2.3 解决问题</h3><p>2.3.1 思路分析</p><p>登录</p><p> ①自定义登录接口</p><p> 调用 ProviderManager 的方法进行认证 如果认证通过生成 jwt</p><p> 把用户信息存入 redis 中</p><p> ②自定义 UserDetailsService</p><p> 在这个实现类中去查询数据库</p><p>校验：</p><p> ①定义 Jwt 认证过滤器</p><p> 获取 token</p><p> 解析 token 获取其中的 userid</p><p> 从 redis 中获取用户信息</p><p> 存入 SecurityContextHolder</p><p>2.3.2 准备工作</p><p>①添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--redis依赖--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;!--fastjson依赖--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.2</span><span class="hljs-number">.33</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!--jwt依赖--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>② 添加 Redis 相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.JavaType;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.type.TypeFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.SerializationException;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> org.springframework.util.Assert;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Redis使用FastJson序列化</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sg</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastJsonRedisSerializer</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RedisSerializer</span>&lt;T&gt;<br>&#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">DEFAULT_CHARSET</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br> <br>    <span class="hljs-keyword">private</span> Class&lt;T&gt; clazz;<br> <br>    <span class="hljs-keyword">static</span><br>    &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FastJsonRedisSerializer</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.clazz = clazz;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] serialize(T t) <span class="hljs-keyword">throws</span> SerializationException<br>    &#123;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> SerializationException<br>    &#123;<br>        <span class="hljs-keyword">if</span> (bytes == <span class="hljs-literal">null</span> || bytes.length &lt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, DEFAULT_CHARSET);<br> <br>        <span class="hljs-keyword">return</span> JSON.parseObject(str, clazz);<br>    &#125;<br> <br> <br>    <span class="hljs-keyword">protected</span> JavaType <span class="hljs-title function_">getJavaType</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br> <br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span><br>    &#123;<br>        RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        template.setConnectionFactory(connectionFactory);<br> <br>        <span class="hljs-type">FastJsonRedisSerializer</span> <span class="hljs-variable">serializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FastJsonRedisSerializer</span>(Object.class);<br> <br>        <span class="hljs-comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span><br>        template.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        template.setValueSerializer(serializer);<br> <br>        <span class="hljs-comment">// Hash的key也采用StringRedisSerializer的序列化方式</span><br>        template.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        template.setHashValueSerializer(serializer);<br> <br>        template.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>③ 响应类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;<br> <br><span class="hljs-meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseResult</span>&lt;T&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提示信息，如果有错误时，前端可以获取该字段进行提示</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询到的结果数据，</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> T data;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseResult</span><span class="hljs-params">(Integer code, String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseResult</span><span class="hljs-params">(Integer code, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseResult</span><span class="hljs-params">(Integer code, String msg, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>④工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.JwtBuilder;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br> <br><span class="hljs-keyword">import</span> javax.crypto.SecretKey;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.UUID;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JWT工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtil</span> &#123;<br> <br>    <span class="hljs-comment">//有效期为</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">JWT_TTL</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span> * <span class="hljs-number">60</span> *<span class="hljs-number">1000L</span>;<span class="hljs-comment">// 60 * 60 *1000  一个小时</span><br>    <span class="hljs-comment">//设置秘钥明文</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JWT_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zty&quot;</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getUUID</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span> token;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成jtw</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject token中要存放的数据（json格式）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createJWT</span><span class="hljs-params">(String subject)</span> &#123;<br>        <span class="hljs-type">JwtBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> getJwtBuilder(subject, <span class="hljs-literal">null</span>, getUUID());<span class="hljs-comment">// 设置过期时间</span><br>        <span class="hljs-keyword">return</span> builder.compact();<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成jtw</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject token中要存放的数据（json格式）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ttlMillis token超时时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createJWT</span><span class="hljs-params">(String subject, Long ttlMillis)</span> &#123;<br>        <span class="hljs-type">JwtBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> getJwtBuilder(subject, ttlMillis, getUUID());<span class="hljs-comment">// 设置过期时间</span><br>        <span class="hljs-keyword">return</span> builder.compact();<br>    &#125;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JwtBuilder <span class="hljs-title function_">getJwtBuilder</span><span class="hljs-params">(String subject, Long ttlMillis, String uuid)</span> &#123;<br>        <span class="hljs-type">SignatureAlgorithm</span> <span class="hljs-variable">signatureAlgorithm</span> <span class="hljs-operator">=</span> SignatureAlgorithm.HS256;<br>        <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> generalKey();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">nowMillis</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(nowMillis);<br>        <span class="hljs-keyword">if</span>(ttlMillis==<span class="hljs-literal">null</span>)&#123;<br>            ttlMillis=JwtUtil.JWT_TTL;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">expMillis</span> <span class="hljs-operator">=</span> nowMillis + ttlMillis;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">expDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(expMillis);<br>        <span class="hljs-keyword">return</span> Jwts.builder()<br>                .setId(uuid)              <span class="hljs-comment">//唯一的ID</span><br>                .setSubject(subject)   <span class="hljs-comment">// 主题  可以是JSON数据</span><br>                .setIssuer(<span class="hljs-string">&quot;sg&quot;</span>)     <span class="hljs-comment">// 签发者</span><br>                .setIssuedAt(now)      <span class="hljs-comment">// 签发时间</span><br>                .signWith(signatureAlgorithm, secretKey) <span class="hljs-comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span><br>                .setExpiration(expDate);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ttlMillis</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createJWT</span><span class="hljs-params">(String id, String subject, Long ttlMillis)</span> &#123;<br>        <span class="hljs-type">JwtBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> getJwtBuilder(subject, ttlMillis, id);<span class="hljs-comment">// 设置过期时间</span><br>        <span class="hljs-keyword">return</span> builder.compact();<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg&quot;</span>;<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> parseJWT(token);<br>        System.out.println(claims);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成加密后的秘钥 secretKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SecretKey <span class="hljs-title function_">generalKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);<br>        <span class="hljs-type">SecretKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(encodedKey, <span class="hljs-number">0</span>, encodedKey.length, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwt</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">parseJWT</span><span class="hljs-params">(String jwt)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> generalKey();<br>        <span class="hljs-keyword">return</span> Jwts.parser()<br>                .setSigningKey(secretKey)<br>                .parseClaimsJws(jwt)<br>                .getBody();<br>    &#125;<br> <br> <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br> <br><span class="hljs-meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCache</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> RedisTemplate redisTemplate;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存基本的对象，Integer、String、实体类等</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 缓存的键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 缓存的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCacheObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> T value)</span><br>    &#123;<br>        redisTemplate.opsForValue().set(key, value);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存基本的对象，Integer、String、实体类等</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 缓存的键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 缓存的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout 时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeUnit 时间颗粒度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCacheObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> T value, <span class="hljs-keyword">final</span> Integer timeout, <span class="hljs-keyword">final</span> TimeUnit timeUnit)</span><br>    &#123;<br>        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置有效时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key Redis键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout 超时时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true=设置成功；false=设置失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> timeout)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置有效时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key Redis键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout 超时时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit 时间单位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true=设置成功；false=设置失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> timeout, <span class="hljs-keyword">final</span> TimeUnit unit)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.expire(key, timeout, unit);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得缓存的基本对象。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 缓存键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存键值对应的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getCacheObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span><br>    &#123;<br>        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();<br>        <span class="hljs-keyword">return</span> operation.get(key);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除单个对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.delete(key);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除集合对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> collection 多个对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">deleteObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Collection collection)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.delete(collection);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存List数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 缓存的键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataList 待缓存的List数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-type">long</span> <span class="hljs-title function_">setCacheList</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> List&lt;T&gt; dataList)</span><br>    &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForList().rightPushAll(key, dataList);<br>        <span class="hljs-keyword">return</span> count == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : count;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得缓存的list对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 缓存的键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存键值对应的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">getCacheList</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存Set</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 缓存键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSet 缓存的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存数据的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; BoundSetOperations&lt;String, T&gt; <span class="hljs-title function_">setCacheSet</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> Set&lt;T&gt; dataSet)</span><br>    &#123;<br>        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);<br>        Iterator&lt;T&gt; it = dataSet.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext())<br>        &#123;<br>            setOperation.add(it.next());<br>        &#125;<br>        <span class="hljs-keyword">return</span> setOperation;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得缓存的set</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Set&lt;T&gt; <span class="hljs-title function_">getCacheSet</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().members(key);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存Map</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataMap</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCacheMap</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> Map&lt;String, T&gt; dataMap)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (dataMap != <span class="hljs-literal">null</span>) &#123;<br>            redisTemplate.opsForHash().putAll(key, dataMap);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得缓存的Map</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class="hljs-title function_">getCacheMap</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 往Hash中存入数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key Redis键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hKey Hash键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCacheMapValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> String hKey, <span class="hljs-keyword">final</span> T value)</span><br>    &#123;<br>        redisTemplate.opsForHash().put(key, hKey, value);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取Hash中的数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key Redis键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hKey Hash键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Hash中的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getCacheMapValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> String hKey)</span><br>    &#123;<br>        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();<br>        <span class="hljs-keyword">return</span> opsForHash.get(key, hKey);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除Hash中的数据</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hkey</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delCacheMapValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> String hkey)</span><br>    &#123;<br>        <span class="hljs-type">HashOperations</span> <span class="hljs-variable">hashOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForHash();<br>        hashOperations.delete(key, hkey);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取多个Hash中的数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key Redis键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hKeys Hash键集合</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Hash对象集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">getMultiCacheMapValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> Collection&lt;Object&gt; hKeys)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得缓存的基本对象列表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pattern 字符串前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对象列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Collection&lt;String&gt; <span class="hljs-title function_">keys</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String pattern)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.keys(pattern);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebUtils</span><br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将字符串渲染到客户端</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 渲染对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string 待渲染的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">renderString</span><span class="hljs-params">(HttpServletResponse response, String string)</span> &#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            response.setStatus(<span class="hljs-number">200</span>);<br>            response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>            response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            response.getWriter().print(string);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>⑤实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br> <br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">40356785423868312L</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 主键</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户名</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 昵称</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String nickName;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 密码</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 账号状态（0正常 1停用）</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String status;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 邮箱</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 手机号</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String phonenumber;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户性别（0男，1女，2未知）</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 头像</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String avatar;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户类型（0管理员，1普通用户）</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String userType;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 创建人的用户id</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Long createBy;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 创建时间</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 更新人</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Long updateBy;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 更新时间</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 删除标志（0代表未删除，1代表已删除）</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Integer delFlag;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-3-实现"><a href="#2-3-3-实现" class="headerlink" title="2.3.3 实现"></a>2.3.3 实现</h3><h4 id="2-3-3-1-数据库校验用户"><a href="#2-3-3-1-数据库校验用户" class="headerlink" title="2.3.3.1 数据库校验用户"></a>2.3.3.1 数据库校验用户</h4><p> 从之前的分析我们可以知道，我们可以自定义一个 UserDetailsService, 让 SpringSecurity 使用我们的 UserDetailsService。我们自己的 UserDetailsService 可以从数据库中查询用户名和密码。</p><p>准备工作</p><p> 我们先创建一个用户表， 建表语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `sys_user` (<br>  `id` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,<br>  `user_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;用户名&#x27;,<br>  `nick_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;昵称&#x27;,<br>  `password` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;密码&#x27;,<br>  `status` CHAR(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;账号状态（0正常 1停用）&#x27;,<br>  `email` VARCHAR(64) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,<br>  `phonenumber` VARCHAR(32) DEFAULT NULL COMMENT &#x27;手机号&#x27;,<br>  `sex` CHAR(1) DEFAULT NULL COMMENT &#x27;用户性别（0男，1女，2未知）&#x27;,<br>  `avatar` VARCHAR(128) DEFAULT NULL COMMENT &#x27;头像&#x27;,<br>  `user_type` CHAR(1) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;用户类型（0管理员，1普通用户）&#x27;,<br>  `create_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;创建人的用户id&#x27;,<br>  `create_time` DATETIME DEFAULT NULL COMMENT &#x27;创建时间&#x27;,<br>  `update_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;更新人&#x27;,<br>  `update_time` DATETIME DEFAULT NULL COMMENT &#x27;更新时间&#x27;,<br>  `del_flag` INT(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;删除标志（0代表未删除，1代表已删除）&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;用户表&#x27;<br></code></pre></td></tr></table></figure><p> 引入 MybatisPuls 和 mysql 驱动的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.3</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p> 配置数据库信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  datasource:<br>    url: jdbc:mysql:<span class="hljs-comment">//localhost:3306/sg_security?characterEncoding=utf-8&amp;serverTimezone=UTC</span><br>    username: root<br>    password: root<br>    driver-class-name: com.mysql.cj.jdbc.Driver<br></code></pre></td></tr></table></figure><p> 定义 Mapper 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p> 修改 User 实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">类名上加<span class="hljs-meta">@TableName(value = &quot;sys_user&quot;)</span> ,id字段上加 <span class="hljs-meta">@TableId</span><br></code></pre></td></tr></table></figure><p> 配置 Mapper 扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.zty.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleSecurityApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(SimpleSecurityApplication.class);<br>        System.out.println(run);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 添加 junit 依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p> 测试 MP 是否能正常使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapperTest</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserMapper</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);<br>        System.out.println(users);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>核心代码实现</p><p>创建一个类实现 UserDetailsService 接口，重写其中的方法。更加用户名从数据库中查询用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-comment">//根据用户名查询用户信息</span><br>        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(User::getUserName,username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(wrapper);<br>        <span class="hljs-comment">//如果查询不到数据就通过抛出异常来给出提示</span><br>        <span class="hljs-keyword">if</span>(Objects.isNull(user))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//TODO 根据用户查询权限信息 添加到LoginUser中</span><br>        <br>        <span class="hljs-comment">//封装成UserDetails对象返回 </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginUser</span>(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为 UserDetailsService 方法的返回值是 UserDetails 类型，所以需要定义一个类，实现该接口，把用户信息封装在其中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> User user;<br> <br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getPassword();<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getUserName();<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加 {noop}。例如</p><p><img src="https://img-blog.csdnimg.cn/a4557f33e1c54795aa0a6ca6fb302ce9.png" alt="img"></p><p>这样登陆的时候就可以用 sg 作为用户名，1234 作为密码来登陆了。</p><p>2.3.3.2 密码加密存储</p><p> 实际项目中我们不会把密码明文存储在数据库中。</p><p> 默认使用的 PasswordEncoder 要求数据库中的密码格式为：{id}password 。它会根据 id 去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换 PasswordEncoder。</p><p> 我们一般使用 SpringSecurity 为我们提供的 BCryptPasswordEncoder。</p><p> 我们只需要使用把 BCryptPasswordEncoder 对象注入 Spring 容器中，SpringSecurity 就会使用该 PasswordEncoder 来进行密码校验。</p><p> 我们可以定义一个 SpringSecurity 的配置类，SpringSecurity 要求这个配置类要继承 WebSecurityConfigurerAdapter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br> <br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-3-3-登陆接口"><a href="#2-3-3-3-登陆接口" class="headerlink" title="2.3.3.3 登陆接口"></a>2.3.3.3 登陆接口</h4><p> 接下我们需要自定义登陆接口，然后让 SpringSecurity 对这个接口放行, 让用户访问这个接口的时候不用登录也能访问。</p><p> 在接口中我们通过 AuthenticationManager 的 authenticate 方法来进行用户认证, 所以需要在 SecurityConfig 中配置把 AuthenticationManager 注入容器。</p><p> 认证成功的话要生成一个 jwt，放入响应中返回。并且为了让用户下回请求时能通过 jwt 识别出具体的是哪个用户，我们需要把用户信息存入 redis，可以把用户 id 作为 key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginServcie loginServcie;<br> <br>    <span class="hljs-meta">@PostMapping(&quot;/user/login&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> loginServcie.login(user);<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br> <br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>                <span class="hljs-comment">//关闭csrf</span><br>                .csrf().disable()<br>                <span class="hljs-comment">//不通过Session获取SecurityContext</span><br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>                .and()<br>                .authorizeRequests()<br>                <span class="hljs-comment">// 对于登录接口 允许匿名访问</span><br>                .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>                <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>                .anyRequest().authenticated();<br>    &#125;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoginServcie</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisCache redisCache;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(),user.getPassword());<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticate</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(authenticationToken);<br>        <span class="hljs-keyword">if</span>(Objects.isNull(authenticate))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//使用userid生成token</span><br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (LoginUser) authenticate.getPrincipal();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> loginUser.getUser().getId().toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JwtUtil.createJWT(userId);<br>        <span class="hljs-comment">//authenticate存入redis</span><br>        redisCache.setCacheObject(<span class="hljs-string">&quot;login:&quot;</span>+userId,loginUser);<br>        <span class="hljs-comment">//把token响应给前端</span><br>        HashMap&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;token&quot;</span>,jwt);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;登陆成功&quot;</span>,map);<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>2.3.3.4 认证过滤器</p><p> 我们需要自定义一个过滤器，这个过滤器会去获取请求头中的 token，对 token 进行解析取出其中的 userid。</p><p> 使用 userid 去 redis 中获取对应的 LoginUser 对象。</p><p> 然后封装 Authentication 对象存入 SecurityContextHolder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationTokenFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisCache redisCache;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!StringUtils.hasText(token)) &#123;<br>            <span class="hljs-comment">//放行</span><br>            filterChain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//解析token</span><br>        String userid;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> JwtUtil.parseJWT(token);<br>            userid = claims.getSubject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;token非法&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//从redis中获取用户信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">redisKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;login:&quot;</span> + userid;<br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> redisCache.getCacheObject(redisKey);<br>        <span class="hljs-keyword">if</span>(Objects.isNull(loginUser))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户未登录&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//存入SecurityContextHolder</span><br>        <span class="hljs-comment">//TODO 获取权限信息封装到Authentication中</span><br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(loginUser,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>        SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br>        <span class="hljs-comment">//放行</span><br>        filterChain.doFilter(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br> <br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br> <br> <br>    <span class="hljs-meta">@Autowired</span><br>    JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>                <span class="hljs-comment">//关闭csrf</span><br>                .csrf().disable()<br>                <span class="hljs-comment">//不通过Session获取SecurityContext</span><br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>                .and()<br>                .authorizeRequests()<br>                <span class="hljs-comment">// 对于登录接口 允许匿名访问</span><br>                .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>                <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>                .anyRequest().authenticated();<br> <br>        <span class="hljs-comment">//把token校验过滤器添加到过滤器链中</span><br>        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);<br>    &#125;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>2.3.3.5 退出登陆</p><p> 我们只需要定义一个登陆接口，然后获取 SecurityContextHolder 中的认证信息，删除 redis 中对应的数据即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoginServcie</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisCache redisCache;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(),user.getPassword());<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticate</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(authenticationToken);<br>        <span class="hljs-keyword">if</span>(Objects.isNull(authenticate))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//使用userid生成token</span><br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (LoginUser) authenticate.getPrincipal();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> loginUser.getUser().getId().toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JwtUtil.createJWT(userId);<br>        <span class="hljs-comment">//authenticate存入redis</span><br>        redisCache.setCacheObject(<span class="hljs-string">&quot;login:&quot;</span>+userId,loginUser);<br>        <span class="hljs-comment">//把token响应给前端</span><br>        HashMap&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;token&quot;</span>,jwt);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;登陆成功&quot;</span>,map);<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">logout</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (LoginUser) authentication.getPrincipal();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userid</span> <span class="hljs-operator">=</span> loginUser.getUser().getId();<br>        redisCache.deleteObject(<span class="hljs-string">&quot;login:&quot;</span>+userid);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;退出成功&quot;</span>);<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="3-授权"><a href="#3-授权" class="headerlink" title="3. 授权"></a>3. 授权</h2><h3 id="3-0-权限系统的作用"><a href="#3-0-权限系统的作用" class="headerlink" title="3.0 权限系统的作用"></a>3.0 权限系统的作用</h3><p> 例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</p><p> 总结起来就是<strong>不同的用户可以使用不同的功能</strong>。这就是权限系统要去实现的效果。</p><p> 我们不能只依赖前端去判断用户的权限来选择显示哪些菜单哪些按钮。因为如果只是这样，如果有人知道了对应功能的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。</p><p> 所以我们还需要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须具有所需权限才能进行相应的操作。</p><h3 id="3-1-授权基本流程"><a href="#3-1-授权基本流程" class="headerlink" title="3.1 授权基本流程"></a>3.1 授权基本流程</h3><p> 在 SpringSecurity 中，会使用默认的 FilterSecurityInterceptor 来进行权限校验。在 FilterSecurityInterceptor 中会从 SecurityContextHolder 获取其中的 Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p><p> 所以我们在项目中只需要把当前登录用户的权限信息也存入 Authentication。</p><p> 然后设置我们的资源所需要的权限即可。</p><h3 id="3-2-授权实现"><a href="#3-2-授权实现" class="headerlink" title="3.2 授权实现"></a>3.2 授权实现</h3><p>3.2.1 限制访问资源所需权限</p><p> SpringSecurity 为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。</p><p> 但是要使用它我们需要先开启相关配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br></code></pre></td></tr></table></figure><p> 然后就可以使用对应的注解。@PreAuthorize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br> <br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;test&#x27;)&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.2.2 封装权限信息</p><p> 我们前面在写 UserDetailsServiceImpl 的时候说过，在查询出用户后还要获取对应的权限信息，封装到 UserDetails 中返回。</p><p> 我们先直接把权限信息写死封装到 UserDetails 中进行测试。</p><p> 我们之前定义了 UserDetails 的实现类 LoginUser，想要让其能封装权限信息就要对其进行修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zty.domain;<br> <br><span class="hljs-keyword">import</span> com.alibaba.fastjson.annotation.JSONField;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br> <br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br> <br> <br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> User user;<br>        <br>    <span class="hljs-comment">//存储权限信息</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; permissions;<br>    <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginUser</span><span class="hljs-params">(User user,List&lt;String&gt; permissions)</span> &#123;<br>        <span class="hljs-built_in">this</span>.user = user;<br>        <span class="hljs-built_in">this</span>.permissions = permissions;<br>    &#125;<br> <br> <br>    <span class="hljs-comment">//存储SpringSecurity所需要的权限信息的集合</span><br>    <span class="hljs-meta">@JSONField(serialize = false)</span><br>    <span class="hljs-keyword">private</span> List&lt;GrantedAuthority&gt; authorities;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span>  Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-keyword">if</span>(authorities!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> authorities;<br>        &#125;<br>        <span class="hljs-comment">//把permissions中字符串类型的权限信息转换成GrantedAuthority对象存入authorities中</span><br>        authorities = permissions.stream().<br>                map(SimpleGrantedAuthority::<span class="hljs-keyword">new</span>)<br>                .collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> authorities;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getPassword();<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getUserName();<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p> LoginUser 修改完后我们就可以在 UserDetailsServiceImpl 中去把权限信息封装到 LoginUser 中了。我们写死权限进行测试，后面我们再从数据库中查询权限信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zty.service.impl;<br> <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.conditions.query.LambdaQueryChainWrapper;<br><span class="hljs-keyword">import</span> com.zty.domain.LoginUser;<br><span class="hljs-keyword">import</span> com.zty.domain.User;<br><span class="hljs-keyword">import</span> com.zty.mapper.UserMapper;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br> <br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Objects;<br> <br> <br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(User::getUserName,username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(wrapper);<br>        <span class="hljs-keyword">if</span>(Objects.isNull(user))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//TODO 根据用户查询权限信息 添加到LoginUser中</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;test&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginUser</span>(user,list);<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>3.2.3 从数据库查询权限信息</p><p>3.2.3.1 RBAC 权限模型</p><p> RBAC 权限模型（Role-Based Access Control）即：基于角色的权限控制。这是目前最常被开发者使用也是相对易用、通用权限模型。</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/01/c949edce0625e8eb.png"></p><p>3.2.3.2 准备工作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE /*!32312 IF NOT EXISTS*/`sg_security` /*!40100 DEFAULT CHARACTER SET utf8mb4 */;<br> <br>USE `sg_security`;<br> <br>/*Table structure for table `sys_menu` */<br> <br>DROP TABLE IF EXISTS `sys_menu`;<br> <br>CREATE TABLE `sys_menu` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT,<br>  `menu_name` varchar(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;菜单名&#x27;,<br>  `path` varchar(200) DEFAULT NULL COMMENT &#x27;路由地址&#x27;,<br>  `component` varchar(255) DEFAULT NULL COMMENT &#x27;组件路径&#x27;,<br>  `visible` char(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;菜单状态（0显示 1隐藏）&#x27;,<br>  `status` char(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;菜单状态（0正常 1停用）&#x27;,<br>  `perms` varchar(100) DEFAULT NULL COMMENT &#x27;权限标识&#x27;,<br>  `icon` varchar(100) DEFAULT &#x27;#&#x27; COMMENT &#x27;菜单图标&#x27;,<br>  `create_by` bigint(20) DEFAULT NULL,<br>  `create_time` datetime DEFAULT NULL,<br>  `update_by` bigint(20) DEFAULT NULL,<br>  `update_time` datetime DEFAULT NULL,<br>  `del_flag` int(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;是否删除（0未删除 1已删除）&#x27;,<br>  `remark` varchar(500) DEFAULT NULL COMMENT &#x27;备注&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;菜单表&#x27;;<br> <br>/*Table structure for table `sys_role` */<br> <br>DROP TABLE IF EXISTS `sys_role`;<br> <br>CREATE TABLE `sys_role` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT,<br>  `name` varchar(128) DEFAULT NULL,<br>  `role_key` varchar(100) DEFAULT NULL COMMENT &#x27;角色权限字符串&#x27;,<br>  `status` char(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;角色状态（0正常 1停用）&#x27;,<br>  `del_flag` int(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;del_flag&#x27;,<br>  `create_by` bigint(200) DEFAULT NULL,<br>  `create_time` datetime DEFAULT NULL,<br>  `update_by` bigint(200) DEFAULT NULL,<br>  `update_time` datetime DEFAULT NULL,<br>  `remark` varchar(500) DEFAULT NULL COMMENT &#x27;备注&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;角色表&#x27;;<br> <br>/*Table structure for table `sys_role_menu` */<br> <br>DROP TABLE IF EXISTS `sys_role_menu`;<br> <br>CREATE TABLE `sys_role_menu` (<br>  `role_id` bigint(200) NOT NULL AUTO_INCREMENT COMMENT &#x27;角色ID&#x27;,<br>  `menu_id` bigint(200) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;菜单id&#x27;,<br>  PRIMARY KEY (`role_id`,`menu_id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;<br> <br>/*Table structure for table `sys_user` */<br> <br>DROP TABLE IF EXISTS `sys_user`;<br> <br>CREATE TABLE `sys_user` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,<br>  `user_name` varchar(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;用户名&#x27;,<br>  `nick_name` varchar(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;昵称&#x27;,<br>  `password` varchar(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;密码&#x27;,<br>  `status` char(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;账号状态（0正常 1停用）&#x27;,<br>  `email` varchar(64) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,<br>  `phonenumber` varchar(32) DEFAULT NULL COMMENT &#x27;手机号&#x27;,<br>  `sex` char(1) DEFAULT NULL COMMENT &#x27;用户性别（0男，1女，2未知）&#x27;,<br>  `avatar` varchar(128) DEFAULT NULL COMMENT &#x27;头像&#x27;,<br>  `user_type` char(1) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;用户类型（0管理员，1普通用户）&#x27;,<br>  `create_by` bigint(20) DEFAULT NULL COMMENT &#x27;创建人的用户id&#x27;,<br>  `create_time` datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,<br>  `update_by` bigint(20) DEFAULT NULL COMMENT &#x27;更新人&#x27;,<br>  `update_time` datetime DEFAULT NULL COMMENT &#x27;更新时间&#x27;,<br>  `del_flag` int(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;删除标志（0代表未删除，1代表已删除）&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;用户表&#x27;;<br> <br>/*Table structure for table `sys_user_role` */<br> <br>DROP TABLE IF EXISTS `sys_user_role`;<br> <br>CREATE TABLE `sys_user_role` (<br>  `user_id` bigint(200) NOT NULL AUTO_INCREMENT COMMENT &#x27;用户id&#x27;,<br>  `role_id` bigint(200) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;角色id&#x27;,<br>  PRIMARY KEY (`user_id`,`role_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br> <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>DISTINCT m.`perms`<br>FROM<br>sys_user_role ur<br>LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`<br>LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`<br>LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`<br>WHERE<br>user_id = 2<br>AND r.`status` = 0<br>AND m.`status` = 0<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zty.domain;<br> <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br> <br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 菜单表(Menu)实体类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> makejava</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2021-11-24 15:30:08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@TableName(value=&quot;sys_menu&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Menu</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">54979041104113736L</span>;<br>    <br>        <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜单名</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String menuName;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 路由地址</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String path;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 组件路径</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String component;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜单状态（0显示 1隐藏）</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String visible;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜单状态（0正常 1停用）</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String status;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 权限标识</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String perms;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜单图标</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String icon;<br>    <br>    <span class="hljs-keyword">private</span> Long createBy;<br>    <br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <br>    <span class="hljs-keyword">private</span> Long updateBy;<br>    <br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 是否删除（0未删除 1已删除）</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Integer delFlag;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 备注</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String remark;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.2.3.3 代码实现</p><p> 我们只需要根据用户 id 去查询到其所对应的权限信息即可。</p><p> 所以我们可以先定义个 mapper，其中提供一个方法可以根据 userid 查询权限信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.zty.domain.Menu;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MenuMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Menu&gt; &#123;<br>    List&lt;String&gt; <span class="hljs-title function_">selectPermsByUserId</span><span class="hljs-params">(Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> 尤其是自定义方法，所以需要创建对应的 mapper 文件，定义对应的 sql 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.zty.mapper.MenuMapper&quot;</span>&gt;<br> <br> <br>    &lt;select id=<span class="hljs-string">&quot;selectPermsByUserId&quot;</span> resultType=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;<br>        SELECT<br>            DISTINCT m.`perms`<br>        FROM<br>            sys_user_role ur<br>            LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`<br>            LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`<br>            LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`<br>        <span class="hljs-type">WHERE</span><br>            <span class="hljs-variable">user_id</span> <span class="hljs-operator">=</span> #&#123;userid&#125;<br>            AND r.`status` = <span class="hljs-number">0</span><br>            AND m.`status` = <span class="hljs-number">0</span><br>    &lt;/select&gt;<br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><p> 在 application.yml 中配置 mapperXML 文件的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  datasource:<br>    url: jdbc:mysql:<span class="hljs-comment">//localhost:3306/security?characterEncoding=utf-8&amp;serverTimezone=UTC</span><br>    username: root<br>    password: root<br>    driver-class-name: com.mysql.cj.jdbc.Driver<br>  redis:<br>    host: localhost<br>    port: <span class="hljs-number">6379</span><br>mybatis-plus:<br>  mapper-locations: classpath*:/mapper<span class="hljs-comment">/**/*.xml </span><br><span class="hljs-comment"> </span><br></code></pre></td></tr></table></figure><p> 然后我们可以在 UserDetailsServiceImpl 中去调用该 mapper 的方法查询权限信息封装到 LoginUser 对象中即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MenuMapper menuMapper;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(User::getUserName,username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(wrapper);<br>        <span class="hljs-keyword">if</span>(Objects.isNull(user))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>        &#125;<br>        List&lt;String&gt; permissionKeyList =  menuMapper.selectPermsByUserId(user.getId());<br><span class="hljs-comment">//        //测试写法</span><br><span class="hljs-comment">//        List&lt;String&gt; list = new ArrayList&lt;&gt;(Arrays.asList(&quot;test&quot;));</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginUser</span>(user,permissionKeyList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-自定义失败处理"><a href="#4-自定义失败处理" class="headerlink" title="4. 自定义失败处理"></a>4. 自定义失败处理</h2><p> 我们还希望在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的 json，这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道 SpringSecurity 的异常处理机制。</p><p> 在 SpringSecurity 中，如果我们在认证或者授权的过程中出现了异常会被 ExceptionTranslationFilter 捕获到。在 ExceptionTranslationFilter 中会去判断是认证失败还是授权失败出现的异常。</p><p> 如果是认证过程中出现的异常会被封装成 AuthenticationException 然后调用 <strong>AuthenticationEntryPoint</strong> 对象的方法去进行异常处理。</p><p> 如果是授权过程中出现的异常会被封装成 AccessDeniedException 然后调用 <strong>AccessDeniedHandler</strong> 对象的方法去进行异常处理。</p><p> 所以如果我们需要自定义异常处理，我们只需要自定义 AuthenticationEntryPoint 和 AccessDeniedHandler 然后配置给 SpringSecurity 即可。</p><p>①自定义实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccessDeniedHandlerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDeniedHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>(HttpStatus.FORBIDDEN.value(), <span class="hljs-string">&quot;权限不足&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br>        WebUtils.renderString(response,json);<br> <br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationEntryPointImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationEntryPoint</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commence</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>(HttpStatus.UNAUTHORIZED.value(), <span class="hljs-string">&quot;认证失败请重新登录&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br>        WebUtils.renderString(response,json);<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>②配置给 SpringSecurity</p><p> 先注入对应的处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccessDeniedHandler accessDeniedHandler;<br>~~~~<br> <br>然后我们可以使用HttpSecurity对象的方法去配置。<br> <br>~~~~java<br>        http.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint).<br>                accessDeniedHandler(accessDeniedHandler);<br></code></pre></td></tr></table></figure><h2 id="5-跨域"><a href="#5-跨域" class="headerlink" title="5. 跨域"></a>5. 跨域</h2><p> 浏览器出于安全的考虑，使用 XMLHttpRequest 对象发起 HTTP 请求时必须遵守同源策略，否则就是跨域的 HTTP 请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。</p><p> 前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。</p><p> 所以我们就要处理一下，让前端能进行跨域请求。</p><p>①先对 SpringBoot 配置，运行跨域请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>      <span class="hljs-comment">// 设置允许跨域的路径</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">// 设置允许跨域请求的域名</span><br>                .allowedOriginPatterns(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">// 是否允许cookie</span><br>                .allowCredentials(<span class="hljs-literal">true</span>)<br>                <span class="hljs-comment">// 设置允许的请求方式</span><br>                .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>)<br>                <span class="hljs-comment">// 设置允许的header属性</span><br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">// 跨域允许时间</span><br>                .maxAge(<span class="hljs-number">3600</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>②开启 SpringSecurity 的跨域访问</p><p>由于我们的资源都会收到 SpringSecurity 的保护，所以想要跨域访问还要让 SpringSecurity 运行跨域访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http<br>            <span class="hljs-comment">//关闭csrf</span><br>            .csrf().disable()<br>            <span class="hljs-comment">//不通过Session获取SecurityContext</span><br>            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>            .and()<br>            .authorizeRequests()<br>            <span class="hljs-comment">// 对于登录接口 允许匿名访问</span><br>            .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>            <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>            .anyRequest().authenticated();<br> <br>    <span class="hljs-comment">//添加过滤器</span><br>    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);<br> <br>    <span class="hljs-comment">//配置异常处理器</span><br>    http.exceptionHandling()<br>            <span class="hljs-comment">//配置认证失败处理器</span><br>            .authenticationEntryPoint(authenticationEntryPoint)<br>            .accessDeniedHandler(accessDeniedHandler);<br> <br>    <span class="hljs-comment">//允许跨域</span><br>    http.cors();<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="6-遗留小问题"><a href="#6-遗留小问题" class="headerlink" title="6. 遗留小问题"></a>6. 遗留小问题</h2><h3 id="其它权限校验方法"><a href="#其它权限校验方法" class="headerlink" title="其它权限校验方法"></a>其它权限校验方法</h3><p> 我们前面都是使用 @PreAuthorize 注解，然后在在其中使用的是 hasAuthority 方法进行校验。SpringSecurity 还为我们提供了其它方法例如：hasAnyAuthority，hasRole，hasAnyRole 等。</p><p> 这里我们先不急着去介绍这些方法，我们先去理解 hasAuthority 的原理，然后再去学习其他方法你就更容易理解，而不是死记硬背区别。并且我们也可以选择定义校验方法，实现我们自己的校验逻辑。</p><p> hasAuthority 方法实际是执行到了 SecurityExpressionRoot 的 hasAuthority，大家只要断点调试既可知道它内部的校验原理。</p><p> 它内部其实是调用 authentication 的 getAuthorities 方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p><p> hasAnyAuthority 方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;,&#x27;test&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> hasRole 要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreAuthorize(&quot;hasRole(&#x27;system:dept:list&#x27;)&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> hasAnyRole 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreAuthorize(&quot;hasAnyRole(&#x27;admin&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义权限校验方法"><a href="#自定义权限校验方法" class="headerlink" title="自定义权限校验方法"></a>自定义权限校验方法</h3><p> 我们也可以定义自己的权限校验方法，在 @PreAuthorize 注解中使用我们的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;ex&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SGExpressionRoot</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasAuthority</span><span class="hljs-params">(String authority)</span>&#123;<br>        <span class="hljs-comment">//获取当前用户的权限</span><br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (LoginUser) authentication.getPrincipal();<br>        List&lt;String&gt; permissions = loginUser.getPermissions();<br>        <span class="hljs-comment">//判断用户权限集合中是否存在authority</span><br>        <span class="hljs-keyword">return</span> permissions.contains(authority);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 在 SPEL 表达式中使用 @ex 相当于获取容器中 bean 的名字未 ex 的对象。然后再调用这个对象的 hasAuthority 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-meta">@PreAuthorize(&quot;@ex.hasAuthority(&#x27;system:dept:list&#x27;)&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于配置的权限控制"><a href="#基于配置的权限控制" class="headerlink" title="基于配置的权限控制"></a>基于配置的权限控制</h3><p> 我们也可以在配置类中使用使用配置的方式对资源进行权限控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http<br>            <span class="hljs-comment">//关闭csrf</span><br>            .csrf().disable()<br>            <span class="hljs-comment">//不通过Session获取SecurityContext</span><br>            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>            .and()<br>            .authorizeRequests()<br>            <span class="hljs-comment">// 对于登录接口 允许匿名访问</span><br>            .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>            .antMatchers(<span class="hljs-string">&quot;/testCors&quot;</span>).hasAuthority(<span class="hljs-string">&quot;system:dept:list222&quot;</span>)<br>            <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>            .anyRequest().authenticated();<br> <br>    <span class="hljs-comment">//添加过滤器</span><br>    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);<br> <br>    <span class="hljs-comment">//配置异常处理器</span><br>    http.exceptionHandling()<br>            <span class="hljs-comment">//配置认证失败处理器</span><br>            .authenticationEntryPoint(authenticationEntryPoint)<br>            .accessDeniedHandler(accessDeniedHandler);<br> <br>    <span class="hljs-comment">//允许跨域</span><br>    http.cors();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p> CSRF 是指跨站请求伪造（Cross-site request forgery），是 web 常见的攻击之一。</p><p> <a href="https://blog.csdn.net/freeking101/article/details/86537087">https://blog.csdn.net/freeking101/article/details/86537087</a></p><p> SpringSecurity 去防止 CSRF 攻击的方式就是通过 csrf_token。后端会生成一个 csrf_token，前端发起请求的时候需要携带这个 csrf_token, 后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</p><p> 我们可以发现 CSRF 攻击依靠的是 cookie 中所携带的认证信息。但是在前后端分离的项目中我们的认证信息其实是 token，而 token 并不是存储中 cookie 中，并且需要前端代码去把 token 设置到请求头中才可以，所以 CSRF 攻击也就不用担心了。</p><h3 id="认证成功处理器"><a href="#认证成功处理器" class="headerlink" title="认证成功处理器"></a>认证成功处理器</h3><p> 实际上在 UsernamePasswordAuthenticationFilter 进行登录认证的时候，如果登录成功了是会调用 AuthenticationSuccessHandler 的方法进行认证成功后的处理的。AuthenticationSuccessHandler 就是登录成功处理器。</p><p> 我们也可以自己去自定义成功处理器进行成功后的相应处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SGSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationSuccessHandler</span> &#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;认证成功了&quot;</span>);<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationSuccessHandler successHandler;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.formLogin().successHandler(successHandler);<br> <br>        http.authorizeRequests().anyRequest().authenticated();<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h3 id="认证失败处理器"><a href="#认证失败处理器" class="headerlink" title="认证失败处理器"></a>认证失败处理器</h3><p> 实际上在 UsernamePasswordAuthenticationFilter 进行登录认证的时候，如果认证失败了是会调用 AuthenticationFailureHandler 的方法进行认证失败后的处理的。AuthenticationFailureHandler 就是登录失败处理器。</p><p> 我们也可以自己去自定义失败处理器进行失败后的相应处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SGFailureHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationFailureHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;认证失败了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationSuccessHandler successHandler;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationFailureHandler failureHandler;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.formLogin()<br><span class="hljs-comment">//                配置认证成功处理器</span><br>                .successHandler(successHandler)<br><span class="hljs-comment">//                配置认证失败处理器</span><br>                .failureHandler(failureHandler);<br> <br>        http.authorizeRequests().anyRequest().authenticated();<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h3 id="登出成功处理器"><a href="#登出成功处理器" class="headerlink" title="登出成功处理器"></a>登出成功处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SGLogoutSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LogoutSuccessHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLogoutSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;注销成功&quot;</span>);<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationSuccessHandler successHandler;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationFailureHandler failureHandler;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.formLogin()<br><span class="hljs-comment">//                配置认证成功处理器</span><br>                .successHandler(successHandler)<br><span class="hljs-comment">//                配置认证失败处理器</span><br>                .failureHandler(failureHandler);<br> <br>        http.logout()<br>                <span class="hljs-comment">//配置注销成功处理器</span><br>                .logoutSuccessHandler(logoutSuccessHandler);<br> <br>        http.authorizeRequests().anyRequest().authenticated();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>基础</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>秋招简记</title>
    <link href="/2022/11/25/%E7%A7%8B%E6%8B%9B%E7%AE%80%E8%AE%B0/"/>
    <url>/2022/11/25/%E7%A7%8B%E6%8B%9B%E7%AE%80%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="秋招简记"><a href="#秋招简记" class="headerlink" title="秋招简记"></a>秋招简记</h1><h2 id="1-投递记录"><a href="#1-投递记录" class="headerlink" title="1.投递记录"></a>1.投递记录</h2><p>8.7~~~~10.20   </p><p>投递（官网、BOSS、智联、51job、海投网等等）总计300+</p><p>表格记录如下：（部分截图，总表格很全含投递地址）  </p><p><a href="https://jnwedld8az.feishu.cn/docx/doxcnI1sgjSW7XLeuoI2BqAaLme">https://jnwedld8az.feishu.cn/docx/doxcnI1sgjSW7XLeuoI2BqAaLme</a></p><p><img src="https://s3.bmp.ovh/imgs/2022/11/25/842846d43569502d.png"></p><h2 id="2-过程"><a href="#2-过程" class="headerlink" title="2.过程"></a>2.过程</h2><ul><li>记八股文+算法+多方面学习</li><li>测评   超级多（测评也会挂！57次）</li><li>笔试   超级多  （难度不一 91次）</li><li>面试   10月份初比较多（74次 流程不一，难度不一）</li><li>offer  （9个）</li></ul><h3 id="3-收获"><a href="#3-收获" class="headerlink" title="3.收获"></a>3.收获</h3><ol><li><h5 id="10-8-浩鲸科技"><a href="#10-8-浩鲸科技" class="headerlink" title="10.8-浩鲸科技"></a>10.8-浩鲸科技<img src="https://s3.bmp.ovh/imgs/2022/11/25/42be2b8a2779648d.png"></h5></li><li><h5 id="10-14-希望学"><a href="#10-14-希望学" class="headerlink" title="10.14-希望学"></a>10.14-希望学</h5><p><img src="https://s3.bmp.ovh/imgs/2022/11/25/e38043e8242c0d98.png"></p></li><li><h4 id="10-19-同程旅行"><a href="#10-19-同程旅行" class="headerlink" title="10.19-同程旅行"></a>10.19-同程旅行</h4><p><img src="https://s3.bmp.ovh/imgs/2022/11/25/7239b6c00032f8d9.png"></p></li><li><h4 id="10-20-闻泰科技-给的很低，直接拒绝了"><a href="#10-20-闻泰科技-给的很低，直接拒绝了" class="headerlink" title="10.20 - 闻泰科技   给的很低，直接拒绝了"></a>10.20 - 闻泰科技   给的很低，直接拒绝了</h4></li><li><h4 id="10-25-新国都"><a href="#10-25-新国都" class="headerlink" title="10.25 - 新国都"></a>10.25 - 新国都</h4><p><img src="https://s3.bmp.ovh/imgs/2022/11/25/978d3a358d43d499.png"></p></li><li><h4 id="10-25-迈普通信"><a href="#10-25-迈普通信" class="headerlink" title="10.25 - 迈普通信"></a>10.25 - 迈普通信</h4><p><img src="https://s3.bmp.ovh/imgs/2022/11/25/acdb08789a3c2e34.png"></p></li><li><h4 id="11-3-鼎桥通信"><a href="#11-3-鼎桥通信" class="headerlink" title="11.3 - 鼎桥通信"></a>11.3 - 鼎桥通信</h4><p><img src="https://s3.bmp.ovh/imgs/2022/11/25/1d89e6954a0e59b6.png"></p></li><li><h5 id="11-11-苏宁易购-给的很低，电话直接拒了。"><a href="#11-11-苏宁易购-给的很低，电话直接拒了。" class="headerlink" title="11.11 - 苏宁易购  给的很低，电话直接拒了。"></a>11.11 - 苏宁易购  给的很低，电话直接拒了。</h5></li><li><h5 id="11-11-中邮消费金融"><a href="#11-11-中邮消费金融" class="headerlink" title="11.11 - 中邮消费金融"></a>11.11 - 中邮消费金融</h5><p><img src="https://s3.bmp.ovh/imgs/2022/11/25/10eff269fb955839.png"></p></li></ol><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h4><ul><li>提前准备，不要临阵磨枪。</li><li>学会表达，学会随机应变。</li><li>多总结错误，多咨询，多了解。</li><li>主动出击，不要盲目从众，认真填写简历投递。</li><li>注重优势，掩盖短板。</li><li>不断试错，及时调整。</li><li>春招继续加油！</li></ul>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>大学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次实习工作总结和回忆~ ｜ 实习</title>
    <link href="/2022/08/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E4%B9%A0%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%E5%92%8C%E5%9B%9E%E5%BF%86/"/>
    <url>/2022/08/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E4%B9%A0%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%E5%92%8C%E5%9B%9E%E5%BF%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-准备篇"><a href="#1-准备篇" class="headerlink" title="1.准备篇"></a>1.准备篇</h1><p>2022年3月初，怀着忐忑的心情，我步入了漫长而又艰难的找实习环节，我深刻的记得，第一家面试的是字节跳动暑期实习，收到面试时我也很惊讶，因为自己的懵懂无知，也不太熟悉面试的流程，也是第一次面试，只能通过牛客上数不胜数的文章，获取一点点心里安慰。因为自己投递太早，也没有充分的去准备，随着面试的不断进行，我也慢慢的发现了自己的许多问题，第一次的工作机会也就这样错过了。时至今日，字节跳动也是我一直想要去工作和奋斗的一家公司，不知为何，总会有一种莫名其妙的感觉指引我。在这之后，我也就慢慢的的总结和积累，查看面经，八股，刷题，持续了一个多月，我又开始了疯狂的投简历，但是对于我们双非本科来说，网络上面投简历可能初筛都过不了就已经凉了，在不断的试错中，也认识到了今年就业形式的严峻，所以我把目光从各大公司的官网转向了如Boss、智联这样的招聘软件上面去，刚开始效果还是可以的，也有很多和hr的交流，但是可能因为各种原因，这上面的实习薪资和实习条件有些苛刻，所以也排除了很多机会。然后就是冷淡期，也只能自己疯狂的搜索，然后找对岗位海投，在5月初开始，终于陆陆续续有了很多中小厂的面试，不管是电话面试还是线下面试，都有很多吧，我也总结了这些中小厂的面试风格：层出不穷、参差不齐！有的可能重点关注技术，有的可能重点关注经历，等等。在这段时间里，每次线下面试几乎都要坐1个半小时的地铁去公司面试，也面试了挺多的，在不断的筛选和不断努力中，终于获得了为数不多的实习offer，也正是自己不断的面试和没有放弃，要不然可能这个暑假已经在家摆烂了。最终选择的是一个中小厂，实习200一天，双休，早10晚8，没有什么硬性要求实习多久，使用的是Go语言（本人之前都是Java），在还没去实习之前，我也参加了字节跳动后端青训营，也对于Golang有了一定的了解，这个青训营也穿插在实习过程中，后面也会说到~ ~ ~ ~</p><h1 id="2-初入篇"><a href="#2-初入篇" class="headerlink" title="2.初入篇"></a>2.初入篇</h1><p>2022年6月12日，因为工作的地方离我的学校还是挺远的，在一段艰难的租房经历过后（第一次租房，这里就不赘述了），终于来到了一个陌生的地方，一个全新的环境，开始了我的实习生活。2022年6月13日，星期一，我早早的就醒了，在一段简单的收拾过后，我也早早的来到了公司等候，今天是入职的第一天，也在今天过来实习的还有另外两个同学（不认识），但是他们好像是hr实习生，我是研发的，就没有过多的交集，第一天上午就是刚到公司必备的培训环节，介绍了公司的发展以及公司的管理层，快到中午时分，我们结束了培训，然后到前台领取了办公用品（电脑、笔、本子），我习惯用自己的电脑，所以没有要公司的（不用还有每个月200电脑补贴），就这样，给我们培训的HRBP就带我去另外一栋楼（公司有两层，在挨着的两栋楼各一层）去见我的mentor了，到了之后我才发现，mentor就是面试我的那个人，简单的介绍过后，我也来到了我的工位，很宽敞，就在mentor旁边，对我的所作所为就是一览无余的那一种。之所以选择这个公司，是因为我感觉公司的环境比较好，很干净，空间很大，不会很压抑的感觉。随后mentor便带我去吃饭了，去的是外面的馆子，不是食堂，mentor点了四个菜请我吃，反正没有炫完，哈哈哈，太多了，可能mentor怕把我饿着吧，通过交谈，我也对mentor有了更多的了解，也聊了很多的东西，互相也还是有一个比较好的初印象吧，对他的详细介绍放在下面章节，中午回去便开始了休息，到点工作的时候，我也紧张的打开了电脑，然后便在那里发呆，时刻等待着mentor给我分配任务，就这样持续了一个多小时吧，mentor终于开了口，让我先把公司一些开发流程熟悉一下，然后便给我发了一堆链接（都是公司自己的知识库），我也就慢慢的进行了了解和学习，紧接着HRBP也发来了实习生学习计划，其实也就是一些公司相关理论学习以及研发各大技术栈的学习视频等等。在我简单的打算过后，我开启了一个新的浏览器，然后专门实习使用，免得和学习的浏览器书签混乱，老规矩，对着他们发的东西就是一顿的分类+收藏，然后便开始了漫长的学习，第一天也就这样过去了。实习第二天我也早早的就来到了公司，因为10点上班，但是我感觉还是太晚了，哈哈哈，9.20左右我就到公司了，然后就瞎折腾，看看牛客啥的，上午的学习有条不紊的进行，但是我也发现了很多的问题，这些技术栈我几乎没有接触过，可能在学校自己学习始终是一个井底之蛙，很多东西都只是听说过，这一下突然来这么多，还是挺难的。大概到了第三天下午这个样子，我就已经基本上看的差不多了，然后mentor便叫我把开发环境给配置好，对，配环境，众所周知，这是一个漫长而已问题百出的时间，公司使用的开发语言的Go，之前Java的那一套环境也不能用了，只能重新配，还好在来之前几天刚好结束了字节跳动青训营的课程，也独自完成了抖音迷你版大项目的制作，然后实习过后也就只剩下项目答辩还没有进行了，当时也不知道能不能过。就这样，拿着我的刚学的一些golang知识，我便开始在我的windows系统折腾一套专属于实习开发的go环境出来，这一系列流程很轻松，没有任何的问题，自己写的demo程序也能正常编译运行。但是，也就只能编译运行而已。知道mentor给了我一个gitlab的链接，叫我把项目clone下来看看的时候，我才发现我的环境存在着很大的问题，首先，导包问题，项目代码需要导入很多公司内部的包，我的电脑不知道为什么就是导入不了，导入GitHub官方包都没有问题，然后就是各种问题层出不穷，make不行，脚本不行，很多linux系统原本就有的命令，windows需要安装一大堆，然而还很有可能出错，折腾了很久过后，我也像另外一个开发同事一样妥协了，玩虚拟机！然后的问题也就迎刃而解了，除了一些网络问题和版本问题，其他都无大碍，到这里，我也就可以正式进行开发工作了。</p><h1 id="3-过程篇"><a href="#3-过程篇" class="headerlink" title="3.过程篇"></a>3.过程篇</h1><p>我清楚的记得，那是来到公司实习的第四天，mentor突然对我说，这里有一个小小的需求，不是很急，你来看一下，我把链接发你，你把代项目拉下来先熟悉一下代码。然后，我的开发工作也就正式开始了 ，和mentor先了解一些这些业务的具体流程，mentor也细心的给我讲解了代码的相关问题以及这个需求需要准备的工作，总之，我个人当时还是很紧张的，毕竟才来几天，啥都不懂，也不知道他们究竟是干嘛的功能，当时我也没有表现的不会，很爽快的答应了，在这过程中，我也第一次和测试、前端、产品、客户端进行了合作开发，相互了解需求和接口的相关问题，通过这些需求的开发，我也学会了很多的东西，了解了很多自己从未接触过的知识。我个人感觉我们公司的代码结构和服务的开发是非常的接近云原生的，高效的CI&#x2F;CD,一套完整的CR、DR流程，测试和开发环境分割很明确也很精密，代码编写和测试也很方便，同时，上线也有一套极为成熟的系统，能够快速发布，灰度发布以及快速回滚，能够解决很多突发的问题，项目的迭代工作和版本控制等各方面也是做的特别好的，在这种严格的代码管理开发架构下工作，代码能力和风格也得到了很大的提升，mentor也在review我的代码的时候给了我很多的建议和帮助，我能够感觉到自己从中学到了很多的东西。<strong>在这期间，我也在周末完成了字节跳动暑期青训营大项目的答辩（因为团队组建之初太随意，都摆烂，到最后我就自己一个人做项目、写文档、答辩），经过了漫长的结果等待，我也收获了本次青训营的结营证书、大项目专属证书以及完成大项目字节跳动给的礼物（抖音logo双肩包、logo雨伞、300元京东礼品劵【啥都能买，哈哈哈，这个还是挺激动的】），大厂就是好，总之，没有辜负我一直没有放弃的决心！</strong>在这两个多月的实习期间，也完成了30余个需求&#x2F;Bug的解决，完成上线工作和发布工作20余次（上线就很惨，上线就意味着可能会加班，还好两个月以来就加了一次，到10点左右，上线有一点点小问题，其他上线都圆满完成，正常下班！），我也学会了很多企业化开发流程中需要注意的东西和一些自己需要提升和学习的方面。有普通的bug修改，有新需求的设计和研发，有企业核心数据迁移方案的设计和具体接口代码的实现，有数据库查询优化，有潜在问题查找和修复，也有企业定制接口修改工作，总之，这一次的实习经历还是很圆满的！</p><h1 id="4-人物篇"><a href="#4-人物篇" class="headerlink" title="4.人物篇"></a>4.人物篇</h1><p>主要还是介绍我的mentor吧，实习这两个月，基本上每天都和他一起吃饭，其他人就不在这里赘述了。首先，他很特别，特别在很多地方，我第一次见到他是被他独特的工位吸引的，他的桌子上面还有一个自己买的架子，然后也买了一个单独的高凳子，在工作区能够一眼看到他的工位那种，很高，公司的凳子也就在旁边放东西，他也没有坐，他还有一个睡觉的折叠床在旁边，每天中午他都会午休，总之，他挺特别的，其他人基本都是趴桌子上面，哈哈哈，正因为他的工位被他搞得又高又大，所以我说我在他的旁边干啥都被他看的一览无余。他个子不大，我每次跟着他我就感觉我像他的保镖一样，哈哈哈，但是他每天都是骑摩托车40多分钟来工作，还是挺厉害的。我第一次见他我还以为他也就27 8左右，吃饭的时候聊天中也知道他结婚很久了，30多了吧，看着挺年轻的，没有秃头，但是头发不多，在后面的慢慢了解中，也加深了我对他的崇拜。说几点吧：他不仅是我的mentor，也是我们部门的leader、他是四川大学毕业的学霸（我双非）、他在腾讯工作过2年左右、他创业过（具体不知道成功还是失败了，看情况应该是赚了一些钱的）、他在成都有两套房（不是偏远地方的，两套房就算了，他还有一个房子在一楼还带花园，纯纯羡慕＋崇拜）、他很努力，工作很认真（每天都是最后一个人走，他其他人说他基本上都是很晚才回家，对工作很负责，也可能因为职位在那里，记得有一次他休假我也看他早上8点就在提交代码，我的妈呀，我凭什么不努力呀！）、他还有两个孩子（这也可能是他比较努力工作的一些原因吧，为人父母，就得这样！加油就完事了!），总之，我感觉mentor是一个很厉害的人，也很伟大，虽然是川大的，也没有一点架子，经常给我指导，也在讨论交流中经常给予我鼓励和肯定，还说我不错嘛，有前途，哈哈哈！和他聊天没有一点年龄（我20 他30+）之间带来的沟壑，在这段实习过程中，他给了我莫大的帮助，非常的感谢他！希望他也越来越好！</p><h1 id="5-结尾篇"><a href="#5-结尾篇" class="headerlink" title="5.结尾篇"></a>5.结尾篇</h1><p>2022年8月21日，我和mentor说了我的想法，我打算回学校继续学习了，说了自己的规划和打算，打算继续扎实基础，找到一个更加适合自己的，更加长久的工作，毕竟秋招也已经开始一段时间了，我也不想失去大学生活中就业的好机会，天高任鸟飞，海阔凭鱼跃，我们都有不同的人生，很多事情和机会都要靠我们自己去争取，所以我做出了选择，希望自己能够不负青春，不负韶华！希望mentor以及各位同事也能走向更好的人生，公司能够蓬勃发展，<strong>愿你，我，以及看到这个文章的所有人，前程似锦！</strong></p><p><em><strong>附上实习上班途中随手拍的一张照片留作纪念吧！</strong></em></p><p><img src="https://s3.bmp.ovh/imgs/2022/08/21/a951d3ccc5cc438b.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>实习</tag>
      
      <tag>大学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字节跳动青训营大项目总结</title>
    <link href="/2022/07/02/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%A4%A7%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2022/07/02/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5%E5%A4%A7%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="项目汇报文档"><a href="#项目汇报文档" class="headerlink" title="项目汇报文档"></a>项目汇报文档</h4><p><a href="http://tiktok.zruler.fun/">http://tiktok.zruler.fun/</a></p><p><strong>使用Ctrl+鼠标左键点击进入即可查看！！！！</strong></p><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>Feed：Feed流中每一条状态或者是消息都是Feed，比如朋友圈中的一个状态就是一个Feed，微博中的一条微博就是Feed。</p><p>Feed流：持续更新并呈现给用户内容的信息流。每个人的朋友圈，微博关注页面也都是一个Feed流。</p><p>Timeline：Timeline其实是一种Feed流的类型，微博，朋友圈其实都是Timeline类型的Feed流，但是由于Timeline类型出现最早，使用最广泛，最为人熟知，因此也用Timeline来表示Feed流。</p><p>关注页Feed流：展示其他人的Feed消息的页面，比如朋友圈、微博首页等。</p><p>个人页Feed流：展示自己发送过来的Feed消息的页面，比如微信中的相册、微博个人页等。</p><h2 id="2、特征"><a href="#2、特征" class="headerlink" title="2、特征"></a>2、特征</h2><p>Feed流系统有一些典型的特点，比如：</p><ul><li>多账号内容流：Feed流系统中肯定会存在成千上万的账号，账号之间可以关注，取关，加好友和拉黑等操作。只要满足这一条，那么就可以当做Feed流系统来设计。</li><li>非稳定的账号关系：由于存在关注，取关等操作，所以系统中的用户之间的关系就会一直在变化，是一种非稳定的状态。</li><li>读写比例100:1：读写严重不平衡，读多写少，一般读写比例在10：1，甚至100：1以上。</li><li>消息必达性要求高：比如发送了一条朋友圈后，结果部分朋友看到了，部分朋友没看到，如果偏偏女朋友没看到，那么可能会产生很严重的感情矛盾，后果很严重。</li></ul><h2 id="3、分类"><a href="#3、分类" class="headerlink" title="3、分类"></a>3、分类</h2><p>Feed流的分类有很多种，但最常见的分类有两种:</p><ul><li><strong>Timeline：按发布的时间顺序排序，先发布的先看到，后发布的排列在最顶端，类似于微信朋友圈，微博等。这也是一种最常见的形式。产品如果选择Timeline类型，那么就是认为<code>Feed流中的Feed不多，但是每个Feed都很重要，都需要用户看到。</code></strong></li><li>Rank：按某个非时间的因子排序，一般是按照用户的喜好度排序，用户最喜欢的排在最前面，次喜欢的排在后面。这种一般假定用户可能看到的Feed非常多，而用户花费在这里的时间有限，那么就为用户选择出用户最想看的Top N结果，场景的应用场景有图片分享、新闻推荐类、商品推荐等。</li></ul><h2 id="4、实现"><a href="#4、实现" class="headerlink" title="4、实现"></a>4、实现</h2><p><strong>解决Feed流最核心的两个问题:一个是存储，另一个是推送</strong></p><h3 id="4-1、存储"><a href="#4-1、存储" class="headerlink" title="4.1、存储"></a>4.1、存储</h3><p>因为该项目中Feed比较简单，就类比于空间说说，因此可以使用MysQL关系型数据库存储，如果对于数据结构比较复杂的Feed流就要使用NosQL数据库，这样存储更方便与高效，比如MongoDB或者HBase。</p><h3 id="4-2、推送"><a href="#4-2、推送" class="headerlink" title="4.2、推送"></a>4.2、推送</h3><p>在推送方案里面的，有三种方案，分别是:</p><ul><li>拉方案：也称为<code>读扩散</code>，用户主动去拉取关注人的Feed内容</li><li><strong>推方案：也成为<code>写扩散</code>，当用户添加Feed时，会自动将Feed通知给关注的人(优选)</strong></li></ul><p><strong>使用Redis Sorted Sets(方便按时间排序Timeline）维护粉丝的Feed集合，当博主添加Feed时，主动将内容推送到粉丝集合中，这样用户可以很方便快速从集合中读取</strong></p><ul><li>推拉结合：比如微博，大部分用户的账号关系都是几百个，但是有个别用户是1000万以上才使用。</li></ul><h2 id="5、表结构设计"><a href="#5、表结构设计" class="headerlink" title="5、表结构设计"></a>5、表结构设计</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `t_feed`  (<br>  `id` INT(11) NOT NULL AUTO_INCREMENT,<br>  `content` VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;内容&#x27;,<br>  `fk_diner_id` INT(11) NULL DEFAULT NULL,<br>  `praise_amount` INT(11) NULL DEFAULT NULL COMMENT &#x27;点赞数量&#x27;,<br>  `comment_amount` INT(11) NULL DEFAULT NULL COMMENT &#x27;评论数量&#x27;,<br>  `fk_restaurant_id` INT(11) NULL DEFAULT NULL,<br>  `create_date` DATETIME(0) NULL DEFAULT NULL,<br>  `update_date` DATETIME(0) NULL DEFAULT NULL,<br>  `is_valid` TINYINT(1) NULL DEFAULT NULL,<br>  PRIMARY KEY (`id`) USING BTREE<br>) ENGINE = INNODB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang随记 ｜ 实习笔记</title>
    <link href="/2022/06/22/golang%E9%9A%8F%E8%AE%B0/"/>
    <url>/2022/06/22/golang%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-defer的注意事项和细节"><a href="#1-defer的注意事项和细节" class="headerlink" title="1.defer的注意事项和细节"></a>1.defer的注意事项和细节</h4><ul><li>当go执行到一个defer时，不会立即执行defer后的语句，而是将defer后的语句压入到一个独立栈中【暂时称该栈为defer栈】，然后继续执行函数下一个语句。</li><li>当函数执行完毕后，再从defer栈中，依次从栈顶取出语句执行（注：遵守栈  先入后出的机制出栈，然后执行），所以前面看到案例的输出顺序。</li><li>在defer 将语句放入到栈时，也会将相关的值拷贝同时入栈。</li></ul><p><strong>例子：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">accumulate</span><span class="hljs-params">(counterPtr *<span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>        *counterPtr++<br>        <span class="hljs-keyword">defer</span> fmt.Println(*counterPtr)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;counter = %d \n&quot;</span>, *counterPtr)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> couter = <span class="hljs-number">0</span><br>    accumulate(&amp;couter)<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">counter = <span class="hljs-number">5</span><br><span class="hljs-number">5</span><br><span class="hljs-number">4</span><br><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="2-GoLang中-amp-与-的区别以及使用"><a href="#2-GoLang中-amp-与-的区别以及使用" class="headerlink" title="2.GoLang中&amp;与*的区别以及使用"></a>2.GoLang中&amp;与*的区别以及使用</h4><p><code>&amp;</code>符号的意思是对变量取地址<br><code>*</code>符号的意思是对指针取值</p><p><strong>例子</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a *<span class="hljs-type">int</span> <span class="hljs-comment">// 存储的是int的指针，目前为空</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">int</span> = <span class="hljs-number">4</span> <span class="hljs-comment">// 存储的是int的值</span><br>a = &amp;b <span class="hljs-comment">// a 指向 b 的地址</span><br>a = b <span class="hljs-comment">// a 无法等于 b，会报错，a是指针，b是值，存储的类型不同</span><br>fmt.Println(a) <span class="hljs-comment">// a:0xc00000a090(返回了地址)</span><br>fmt.Println(*a) <span class="hljs-comment">// *a:4(返回了值)</span><br>fmt.Println(*&amp;a) <span class="hljs-comment">// *抵消了&amp;，返回了0xc00000a090本身</span><br>*a = <span class="hljs-number">5</span> <span class="hljs-comment">// 改变 a 的地址的值</span><br>fmt.Println(b) <span class="hljs-comment">// b:5，改变后 b 同样受到改变，因为 a 的地址是指向 b 的</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="GO的结构体和数组以及string均是值类型-，切片是引用类型"><a href="#GO的结构体和数组以及string均是值类型-，切片是引用类型" class="headerlink" title="GO的结构体和数组以及string均是值类型 ，切片是引用类型"></a>GO的结构体和数组以及string均是值类型 ，切片是引用类型</h4><p><strong>值类型和引用类型</strong><br>值类型：int、float、bool、string、数组array、结构体struct</p><p>引用类型：指针、切片slice、map、接口interface、函数func、管道chan</p><p><strong>区别</strong><br>值类型：</p><p>变量直接存储值，内存通常在栈中分配。<br>给新的变量赋值时(拷贝时)，为深拷贝，直接开辟新的内存地址存储值。</p><p>引用类型：</p><p>变量直接存储内存地址，这个地址存储值。内存通常在堆上分配。<br>给新的变量赋值时(拷贝时)，为浅拷贝，新的变量通过指针指向原来的内存地址。可以使用copy关键字实现引用类型的深拷贝。<br>当如果没有任何一个变量引用这个地址时，这个地址就会被GC垃圾回收。</p><h4 id="Go语言中函数的参数永远是拷贝的"><a href="#Go语言中函数的参数永远是拷贝的" class="headerlink" title="Go语言中函数的参数永远是拷贝的"></a>Go语言中函数的参数永远是拷贝的</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(接收者变量  *接收者类型)</span></span> 函数名称 (参数)(返回值)&#123;&#125;  <br><span class="hljs-comment">// 这里的前缀代表该方法的接收者，只有该类型的变量可以调用该方法</span><br><span class="hljs-comment">// 接收者代表的是调用该方法的具体类型变量，多用类型名首字母小写表示</span><br><span class="hljs-comment">// 类似于Java语言里面的对象继承的多态属性，不同类型对象调用的方法实现不同</span><br><br><span class="hljs-comment">//接收者变量的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有子方法</span><br></code></pre></td></tr></table></figure><h4 id="Go结构体嵌套可以模拟实现继承"><a href="#Go结构体嵌套可以模拟实现继承" class="headerlink" title="Go结构体嵌套可以模拟实现继承"></a>Go结构体嵌套可以模拟实现继承</h4><h5 id="Go-for循环里面使用协程需要复制一份再进行操作，否则会出现读取数据异常"><a href="#Go-for循环里面使用协程需要复制一份再进行操作，否则会出现读取数据异常" class="headerlink" title="Go for循环里面使用协程需要复制一份再进行操作，否则会出现读取数据异常"></a>Go for循环里面使用协程需要复制一份再进行操作，否则会出现读取数据异常</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>   <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> user <span class="hljs-keyword">struct</span> &#123;<br>   name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">var</span> users []*user<br>   users = <span class="hljs-built_in">append</span>(users, &amp;user&#123;name: <span class="hljs-string">&quot;john&quot;</span>&#125;)<br>   users = <span class="hljs-built_in">append</span>(users, &amp;user&#123;name: <span class="hljs-string">&quot;jane&quot;</span>&#125;)<br>   users = <span class="hljs-built_in">append</span>(users, &amp;user&#123;name: <span class="hljs-string">&quot;joe&quot;</span>&#125;)<br>   <span class="hljs-keyword">for</span> _, user := <span class="hljs-keyword">range</span> users &#123; <span class="hljs-comment">// 此处的user是指针，每次循环所在地址不变，只是地址所在的数据值发生了变化</span><br>      fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;user)<br>      user := user <span class="hljs-comment">//协程里面需要循环的变量需要复制一份，不然会出现协程里面读取数据错误</span><br>      fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;user)<br>      <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>         fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, user)<br>         fmt.Println(user.name)<br>      &#125;()<br>   &#125;<br>   time.Sleep(<span class="hljs-number">2</span> * time.Second)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实习过程记录总结 ｜ 实习笔记</title>
    <link href="/2022/06/20/%E5%AE%9E%E4%B9%A0%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95%E6%80%BB%E7%BB%93/"/>
    <url>/2022/06/20/%E5%AE%9E%E4%B9%A0%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="实习常用命令合集"><a href="#实习常用命令合集" class="headerlink" title="实习常用命令合集"></a>实习常用命令合集</h1><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">日志级别（开发环境日志级别为INFO）<br>ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF<br>开发环境和线上环境日志级别不同！通过控制日志级别减轻线上环境日志压力！<br></code></pre></td></tr></table></figure><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java">git操作规范<br><br>修改或者开发新功能流程<br><br><span class="hljs-number">1.</span> git checkout master #切换到master分支<br><span class="hljs-number">2.</span> git pull  origin master #将master更新到最新状态<br><span class="hljs-number">3.</span> git checkout -b dev-分支名称  # 从最新master分支切出一个开发分支进行开发<br><span class="hljs-number">4.</span> 在<span class="hljs-number">3</span>操作切出的分支进行功能开发·············<br><span class="hljs-number">5.</span> 功能完成后~<br><span class="hljs-number">6.</span> git checkout master #切换回到master分支<br><span class="hljs-number">7.</span> git pull origin master #将master更新到最新状态（因为在开发过程中可能另外一个人已经将代码合并到master分支）<br><span class="hljs-number">8.</span> git checkout  dev分支 # 切换回到dev开发分支<br><span class="hljs-number">9.</span> git rebase master # 修改master基点<br><span class="hljs-number">10.</span>在从master重新创建新分支同步完成的功能<br><span class="hljs-number">11.</span> 然后在进行合并到master分支<br>    <br><span class="hljs-comment">// git 把一个分支的修改内容转移到master分支然后重新从master建立新分支</span><br>git stash<br><br>git checkout master<br><br>git pull origin master<br><br>git checkout -b 新分支名称<br><br>git stash pop<br><br>git diff<br><br>git status<br><br><span class="hljs-comment">//  合并分支rebase</span><br>git checkout master <br><br>git  pull<br><br>git checkout 开发分支<br><br>git rebase master<br><br>处理冲突 <br><br>git  push -f  #强制推送<br>    <br><span class="hljs-comment">//  git合并多次commit操作</span><br><br>#### One<br><span class="hljs-number">1.1</span> git add .  /   git  add 文件名<br><br><span class="hljs-number">1.2</span>. git commit --amend  <span class="hljs-string">&quot;message&quot;</span> # 可以将本次提交合并到上一次提交<br><br>#### Two<br><span class="hljs-number">2.1</span>. git log # 查看提交记录<br><br><span class="hljs-number">2.2</span>. git rebase -i  HEAD~<span class="hljs-number">4</span> # 从HEAD版本开始往前数<span class="hljs-number">4</span>个版本（根据需要变化起始值和结束值）<br><br><span class="hljs-number">2.3</span>. 进入vim编辑器过后修改需要合并的commit前缀，pick-&gt;s<br><br>例如：<br>pick commit1<br>s commit2<br>pick commit3<br>s commit4<br><br>上述修改即为把commit2和commit1合并，commit4和commit3合并，根据需要自己调整即可！<br><br>修改完成后保存退出<br><br>可能需要手动处理冲突（处理冲突后 git add .  &amp;&amp;   git rebase --<span class="hljs-keyword">continue</span>）<br><br>上述流程完成后会进入commit信息修改，根据需要修改即可，然后保存退出<br><br><span class="hljs-number">2.4</span>. git push -f   /   git  push -f origin 远程分支   # 强制推送到远程分支<br></code></pre></td></tr></table></figure><p>K8s</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go">k8s常规操作指令<br><br><span class="hljs-number">1.</span>k -n 环境名称 edit deploy 项目名称-deploy  # 修改测试部署项目镜像<br>例子<span class="hljs-number">1</span>： k -n xxx edit deploy xxx-deploy <br><br><span class="hljs-number">2.</span> k -n 环境名称 rollout restart deploy xxx-deploy # 重启项目<br><br><span class="hljs-comment">// 以下路径视情况而定</span><br><span class="hljs-number">3.</span> tail -f /<span class="hljs-keyword">var</span>/log/xxx/xxx/xxx.app.log # 查看日志记录<br><br><span class="hljs-number">4.</span> tail -f /<span class="hljs-keyword">var</span>/log/xxx/xxx/xxx.err.log # 查看错误日志记录<br><br><br><span class="hljs-number">5.</span>grep <span class="hljs-string">&#x27;日志内容&#x27;</span> /<span class="hljs-keyword">var</span>/log/xxx/xxx/xxx.err.log # 查找日志<br><br><span class="hljs-number">6.</span>ssh  用户名@主机地址    # 通过ssh连接远程<br><br>获取k8s部署情况！<br>dk get pod| grep xxx  <span class="hljs-comment">//查找节点</span><br><br>dk rollout restart deployment xxx-deploy <span class="hljs-comment">// 重启节点</span><br><br>k logs 镜像名称 <span class="hljs-comment">// 查看k8s日志</span><br></code></pre></td></tr></table></figure><p>MongoDB</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">MongoDB数据库操作<br><br><span class="hljs-number">1.</span> k -n 环境名称 exec -it mongo节点名称 bash # 连接数据库<br><span class="hljs-number">2.</span>mongo<br><span class="hljs-number">3.</span>use 数据库名称；# 切换到对应数据库<br><span class="hljs-number">4.</span>show tables； # 查询数据库所有表<br><span class="hljs-number">5.</span>db.表名.find();  #查询表信息<br><span class="hljs-number">6.</span>db.company.find(&#123;<span class="hljs-string">&quot;account_id&quot;</span> : <span class="hljs-string">&quot;616e71114798df14bc84e00c&quot;</span>&#125;) #匹配查询<br><br>更新数据段<br><span class="hljs-number">7.</span>db.company.update(&#123;<span class="hljs-string">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;62ba69b0f13474e2c38a3087&quot;</span>)&#125;, &#123;$set:&#123;<span class="hljs-string">&quot;auto_configed&quot;</span>:<span class="hljs-literal">true</span>&#125;&#125;)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>实习</tag>
      
      <tag>大学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小厂实习面试记录-004</title>
    <link href="/2022/05/28/%E5%B0%8F%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95-004/"/>
    <url>/2022/05/28/%E5%B0%8F%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95-004/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-什么是类加载？类加载的过程？"><a href="#1-什么是类加载？类加载的过程？" class="headerlink" title="1.什么是类加载？类加载的过程？"></a>1.什么是类加载？类加载的过程？</h3><p>类的加载指的是将类的<code>class</code>文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个此类的对象，通过这个对象可以访问到方法区对应的类信息。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/28/40c277e2f4e8bdfb.png"></p><p><strong>加载</strong></p><ol><li>通过类的全限定名获取定义此类的二进制字节流</li><li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构</li><li>在内存中生成一个代表该类的<code>Class</code>对象，作为方法区类信息的访问入口</li></ol><p><strong>验证</strong></p><p>确保Class文件的字节流中包含的信息符合虚拟机规范，保证在运行后不会危害虚拟机自身的安全。主要包括四种验证：<strong>文件格式验证，元数据验证，字节码验证，符号引用验证</strong>。</p><p><strong>准备</strong></p><p>为类变量分配内存并设置类变量初始值的阶段。</p><p><strong>解析</strong></p><p>虚拟机将常量池内的符号引用替换为直接引用的过程。符号引用用于描述目标，直接引用直接指向目标的地址。</p><p><strong>初始化</strong></p><p>开始执行类中定义的<code>Java</code>代码，初始化阶段是调用类构造器的过程。</p><h3 id="2-什么是双亲委派模型？"><a href="#2-什么是双亲委派模型？" class="headerlink" title="2.什么是双亲委派模型？"></a>2.什么是双亲委派模型？</h3><p>一个类加载器收到一个类的加载请求时，它首先不会自己尝试去加载它，而是把这个请求<strong>委派</strong>给父类加载器去完成，这样层层委派，因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/28/49da36b2f9691b57.png"></p><p>双亲委派模型的具体实现代码在 <code>java.lang.ClassLoader</code>中，此类的 <code>loadClass()</code> 方法运行过程如下：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时抛出 <code>ClassNotFoundException</code>，此时尝试自己去加载。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>    <span class="hljs-comment">// The parent class loader for delegation</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ClassLoader parent;<br><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-keyword">return</span> loadClass(name, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-type">boolean</span> resolve) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-keyword">synchronized</span> (getClassLoadingLock(name)) &#123;<br>            <span class="hljs-comment">// First, check if the class has already been loaded</span><br>            Class&lt;?&gt; c = findLoadedClass(name);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>                        c = parent.loadClass(name, <span class="hljs-literal">false</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        c = findBootstrapClassOrNull(name);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                    <span class="hljs-comment">// ClassNotFoundException thrown if class not found</span><br>                    <span class="hljs-comment">// from the non-null parent class loader</span><br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// If still not found, then invoke findClass in order</span><br>                    <span class="hljs-comment">// to find the class.</span><br>                    c = findClass(name);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (resolve) &#123;<br>                resolveClass(c);<br>            &#125;<br>            <span class="hljs-keyword">return</span> c;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-为什么需要双亲委派模型？"><a href="#3-为什么需要双亲委派模型？" class="headerlink" title="3.为什么需要双亲委派模型？"></a>3.为什么需要双亲委派模型？</h3><p>双亲委派模型的好处：可以防止内存中出现多份同样的字节码。如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个<code>java.lang.Object</code>的同名类并放在<code>ClassPath</code>中，多个类加载器都去加载这个类到内存中，系统中将会出现多个不同的<code>Object</code>类，那么类之间的比较结果及类的唯一性将无法保证。</p><h3 id="4-什么是类加载器，类加载器有哪些"><a href="#4-什么是类加载器，类加载器有哪些" class="headerlink" title="4.什么是类加载器，类加载器有哪些?"></a>4.什么是类加载器，类加载器有哪些?</h3><ul><li><p>实现通过类的全限定名获取该类的二进制字节流的代码块叫做类加载器。</p><p>主要有一下四种类加载器:</p><ul><li><strong>启动类加载器</strong>：用来加载 Java 核心类库，无法被 Java 程序直接引用。</li><li><strong>扩展类加载器</strong>：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</li><li><strong>系统类加载器</strong>：它根据应用的类路径来加载 Java 类。可通过<code>ClassLoader.getSystemClassLoader()</code>获取它。</li><li><strong>自定义类加载器</strong>：通过继承<code>java.lang.ClassLoader</code>类的方式实现。</li></ul></li></ul><h3 id="5-Java中变量，代码块，构造器之间执行顺序是怎么样的？"><a href="#5-Java中变量，代码块，构造器之间执行顺序是怎么样的？" class="headerlink" title="5.Java中变量，代码块，构造器之间执行顺序是怎么样的？"></a>5.Java中变量，代码块，构造器之间执行顺序是怎么样的？</h3><p>Java程序中类中个元素的初始化顺序 初始化的原则是：</p><ul><li>先初始化<strong>静态</strong>部分，再初始化<strong>动态</strong>部分，</li><li>先初始化<strong>父类</strong>部分，后初始化<strong>子类</strong>部分，</li><li>先初始化<strong>变量</strong>，再初始化<strong>代码块</strong>和<strong>构造器</strong>。</li></ul><h3 id="6-怎么自定义一个类加载器？"><a href="#6-怎么自定义一个类加载器？" class="headerlink" title="6.怎么自定义一个类加载器？"></a>6.怎么自定义一个类加载器？</h3><p>加载一个类时，一般是调用类加载器的loadClass()方法来加载一个类，loadClass()方法的工作流程如下：</p><p>1.先调用findLoadedClass(className)来获取这个类，判断类是否已加载。</p><p>2.如果未加载，如果父类加载器不为空，调用父类加载器的loadClass()来加载这个类，父类加载器为空，就调用父类加载器加载这个类。</p><p>3.父类加载器加载失败，那么调用该类加载器findClass(className)方法来加载这个类。</p><ul><li><p>所以我们一般自定义类加载器都是<strong>继承ClassLoader，重写findClass()方法</strong>，来实现类加载，这样不会违背双亲委派类加载机制。</p></li><li><p>也可以通过<strong>重写loadClass()方法</strong>进行类加载，但是这样会违背双亲委派类加载机制。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelegationClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>  <span class="hljs-keyword">private</span> String classpath;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DelegationClassLoader</span><span class="hljs-params">(String classpath, ClassLoader parent)</span> &#123;<br>    <span class="hljs-built_in">super</span>(parent);<br>    <span class="hljs-built_in">this</span>.classpath = classpath;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> Class&lt;？&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">classFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.classpath + name.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>) + <span class="hljs-string">&quot;.class&quot;</span>;<br>      is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(classFilePath);<br>      <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[is.available()];<br>      is.read(buf);<br>      <span class="hljs-keyword">return</span> defineClass(name, buf, <span class="hljs-number">0</span>, buf.length);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(name);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          is.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOError</span>(e);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>      <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException,<br>      MalformedURLException &#123;<br>    sun.applet.<span class="hljs-type">Main</span> <span class="hljs-variable">main1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.applet.Main();<br><br>    <span class="hljs-type">DelegationClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelegationClassLoader</span>(<span class="hljs-string">&quot;java-study/target/classes/&quot;</span>,<br>        getSystemClassLoader());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sun.applet.Main&quot;</span>;<br>    Class&lt;？&gt; clz = cl.loadClass(name);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">main2</span> <span class="hljs-operator">=</span> clz.newInstance();<br><br>    System.out.println(<span class="hljs-string">&quot;main1 class: &quot;</span> + main1.getClass());<br>    System.out.println(<span class="hljs-string">&quot;main2 class: &quot;</span> + main2.getClass());<br>    System.out.println(<span class="hljs-string">&quot;main1 classloader: &quot;</span> + main1.getClass().getClassLoader());<br>    System.out.println(<span class="hljs-string">&quot;main2 classloader: &quot;</span> + main2.getClass().getClassLoader());<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">itrCl</span> <span class="hljs-operator">=</span> cl;<br>    <span class="hljs-keyword">while</span> (itrCl != <span class="hljs-literal">null</span>) &#123;<br>      System.out.println(itrCl);<br>      itrCl = itrCl.getParent();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-Java线程模型详解"><a href="#7-Java线程模型详解" class="headerlink" title="7.Java线程模型详解"></a>7.Java线程模型详解</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>线程是操作系统的最小调度单位，包含于进程。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以<a href="https://so.csdn.net/so/search?q=%E5%B9%B6%E5%8F%91&spm=1001.2101.3001.7020">并发</a>多个线程，每条线程可以并行执行不同的任务。</p><h3 id="与进程的不同"><a href="#与进程的不同" class="headerlink" title="与进程的不同"></a>与进程的不同</h3><ol><li>进程是操作系统资源分配的最小单位，线程是操作系统执行的最小单位；</li><li>进程包含线程，一个进程可以包含多个线程，同一个进程中的不同线程共享同一资源（此处会引发另一个问题，线程不可见问题）；</li><li>进程是指一段程序的执行过程，线程指的是进程中一个单一顺序的控制流（任务）；</li></ol><h3 id="线程分类"><a href="#线程分类" class="headerlink" title="线程分类"></a>线程分类</h3><p>线程主要分为两种</p><ul><li>内核线程，简称 KLT(Kernel Level Thread)</li><li>用户线程，简称 ULT(User Level Thread)</li></ul><h3 id="内核线程"><a href="#内核线程" class="headerlink" title="内核线程"></a>内核线程</h3><p>系统内核管理线程，内核保存线程的状态和上下文，线程阻塞不会引起进程阻塞。在多处理器上，多线程在多处理器上并行运行。线程的创建、调度和管理等生命周期是由内核直接管理完成，效率比 ULT 要低，比进程要高。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/28/032ebf303995872f.png"></p><p>内核空间会维护 [<strong>进程表</strong>] 和[<strong>线程表</strong>]。进程表中维护并管理进程 [运行的程序代码] 集合。线程维护并管理各个进程中的线程集合。线程阻塞，其所在的进程不会阻塞。内核线程和轻量级进程 (Light Weight Process,LWP, 是使用内核线程的一种高级接口) 是一对一模型，这个文章后面会有介绍。</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li>优点：可以将复杂的线程生命周期的管理任务交给操作系统，编程和实现简单；线程维护在操作系统内核，线程阻塞不会阻塞进程；如果机器是多核处理器，内核线程可以充分利用多核处理器进行并行运行线程。</li><li>缺点：当线程进行调度、创建等，会涉及到用户态和内核态之间的转化以及线程上下文的切换，资源消耗大、效率较低。</li></ul><h3 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h3><p>用户程序实现，不依赖操作系统内核，应用提供创建、调度和管理线程的函数来控制用户线程。不需要用户态 &#x2F; 核心态切换，速度高、效率高。内核对 ULT 无感知，线程阻塞则进程（包含它的所有线程）阻塞。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/28/f9ac535894bc7731.png"></p><p>内核空间会维护 [进程表]进程表中记录进程 [运行的程序代码] 集合。线程阻塞，其所在的进程也会阻塞。操作系统内核无法感知用户线程，对于线程的创建、调度、撤销等无感知。</p><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li>优点：由于操作系统内核无法感知用户线程，对于线程的创建、调度、撤销等无感知。所以当线程进行调度、创建等，不会涉及到用户态和内核态之间的转化以及线程上下文的切换，资源消耗小、效率较高。</li><li>缺点：需要维护复杂的线程生命周期，编程和实现复杂；线程维护在进程中，内核无感知，线程阻塞会阻塞整个进程（包含整个进程的其他线程）；用户线程不能充分利用多核处理器进行并行运行线程，只能在单个核中运行。</li></ul><h2 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h2><p>线程模型主要分为三种</p><ul><li>一对一模型</li><li>多对一模型</li><li>多对多模型</li></ul><h3 id="一对一模型"><a href="#一对一模型" class="headerlink" title="一对一模型"></a>一对一模型</h3><p>一对一模型 简易</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/28/0a1d8476adc02847.png"></p><p>用户空间的一个线程 (应用程序的线程概念) 对应内核的一个线程，1:1。用户空间的线程通过 LWP(属于用户空间) 对内核线程进行创建、销毁等操作。由于每个线程的创建、调度、销毁都需要内核的支持，每次线程的创建、切换都会设计用户状态 &#x2F; 内核状态的切换，性能开销比较大，并且单个进程能够创建的 LWP 的数量是有限。能够充分里用多核的优势。</p><p>一对一模型</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/28/1ca92c5d58e79b76.png"></p><p>用户进程可以创建多个 (有限个)LWP 对内核线程进行管理 (包含创建、销毁等生命周期的方法)，本质上还是操作系统进行的管理。KLT 是实际的计算运行的线程，在内核空间，由操作系统内核进行管理维护 (创建、调度、销毁等)。<strong>严格意义上，LWP 是属于操作系统层面的</strong></p><p>一对一模型 详细</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/28/152ba0318ecbbadb.png"></p><p>JVM 进程中通过 new Thread(Runnable&#x2F;Callable) 创建 Java 层面的线程。Java 线程通过库调度器调用 LWP 的接口创建、销毁内核线程等。内核线程是由操作系统内核进行管理维护。</p><p><strong>注：About LWP</strong></p><ol><li><strong>其实 LWP(轻量级进程) 是操作系统提供的操作内核线程的入口 (接口)，属于中间层。</strong></li><li><strong>在 Linux 操作系统中，往往都是通过 fork 函数创建一个子进程来代表内核中的线程，在 fork 完一个子进程后，还需要将父进程中大部分的上下文信息复制到子进程中，消耗大量 cpu 时间用来初始化内存空间，产生大量冗余数据。为了避免上述情况，轻量级进程 (Light Weight Process, LWP) 便出现了，其使用 clone 系统调用创建子进程，过程中只将部分父进程数据进行复制，没有被复制的资源可以通过指针进行数据共享，这样一来 LWP 的运行单元更小、运行速度更快。</strong></li><li><strong>LWP 与内核线程一一映射，每个 LWP 都由一个内核线程支持</strong></li><li><strong>LWP 可以被普通进程创建，有父子进程的关系。</strong></li></ol><h3 id="多对一模型"><a href="#多对一模型" class="headerlink" title="多对一模型"></a>多对一模型</h3><p>多对一模型 简易</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/28/20de4dcda95197d1.png"></p><p>一个内核线程可以对应多个用户线程，即跟用户线程相匹配。用户线程的创建、调度、销毁不需要内核的支持，所以也就不涉及上下文切换的资源损耗，效率通常较高。但是内核无法感知到用户线程（只能感知到用户空间的进程），所以当一个进程中的一个线程阻塞，将会导致整个进程都阻塞。由于内核感知的是应用进程，所以进程中的多线程只能是运行在单个运算核上，无法充分利用计算性能并行计算，当然如果机器是单核就另当别论了；</p><p>多对一模型</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/28/e9f62403ab6f0a6e.png"></p><p>此时内核直接管理进程，所有的资源类操作都是通过进程进行代为转发与内核进行通信，所谓的一直对外？</p><h3 id="多对多模型"><a href="#多对多模型" class="headerlink" title="多对多模型"></a>多对多模型</h3><p>多对多模型 简易</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/28/cb1e3ac3746a4110.png"></p><p>这个模型其实就是一个混合的线程模型。LWP 和内核是 1:1 对应关系 (LWP 需要内核的支持才能工作，fork 等函数)。用户线程和 LWP 是 n:1(n&gt;0) 对应关系。由于用户进程和 LWP(可以理解为内核线程) 是 n:m 的关系，所以即解决了 1:1 模型中性能开销及线程数量的问题，也解决了 N:1 模型中阻塞问题，同时也能充分利用 CPU 的多核优势。</p><p>多对多模型</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/28/db331dba990f6e10.png"></p><blockquote><p>此模型是大部分协程实现的基础。(Go语言)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>实习</tag>
      
      <tag>大学</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你真的会团队合作开发吗？ ｜ 青训营笔记06</title>
    <link href="/2022/05/25/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C%E5%BC%80%E5%8F%91%E5%90%97%EF%BC%9F%20%EF%BD%9C%20%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B006/"/>
    <url>/2022/05/25/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C%E5%BC%80%E5%8F%91%E5%90%97%EF%BC%9F%20%EF%BD%9C%20%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B006/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Git基本命令"><a href="#1-Git基本命令" class="headerlink" title="1.Git基本命令"></a>1.Git基本命令</h2><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/abf505ba20dd920e.png"></p><h2 id="2-本地仓库创建和初始化"><a href="#2-本地仓库创建和初始化" class="headerlink" title="2.本地仓库创建和初始化"></a>2.本地仓库创建和初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">项目初始化<br>    mkdir study<br>    cd study<br>    git init<br>其他参数<br>--initial-branch初始化的分支<br>--bare创建一个裸仓库（纯Git日录，没有工作目录)<br>--template可以通过模版来创建预先构建好的自定义git目录<br></code></pre></td></tr></table></figure><ul><li><h4 id="git文件目录，add，commit，push，Pull等操作都是通过修改这个文件下的文件来实现！"><a href="#git文件目录，add，commit，push，Pull等操作都是通过修改这个文件下的文件来实现！" class="headerlink" title=".git文件目录，add，commit，push，Pull等操作都是通过修改这个文件下的文件来实现！"></a>.git文件目录，add，commit，push，Pull等操作都是通过修改这个文件下的文件来实现！</h4></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/913963c7da861818.png"></p><ul><li><h4 id="文件存储流程"><a href="#文件存储流程" class="headerlink" title="文件存储流程"></a>文件存储流程</h4></li></ul><h5 id="本地仓库（工作区）-—-add-—-gt-缓存区—-commit—-gt-git-directory—-push—-gt-远程仓库"><a href="#本地仓库（工作区）-—-add-—-gt-缓存区—-commit—-gt-git-directory—-push—-gt-远程仓库" class="headerlink" title="本地仓库（工作区） — add —&gt;  缓存区— commit— &gt;. git directory— push— &gt;远程仓库"></a>本地仓库（工作区） — add —&gt;  缓存区— commit— &gt;. git directory— push— &gt;远程仓库</h5><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/4fe87cd4f9a02caa.png"></p><h2 id="3-常见Git配置"><a href="#3-常见Git配置" class="headerlink" title="3.常见Git配置"></a>3.常见Git配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">常见Git配置<br>用户名配置<br>git config --global user.name “zty-f<span class="hljs-string">&quot;</span><br><span class="hljs-string">git config --global user.email zruler@163.com</span><br><span class="hljs-string">        </span><br><span class="hljs-string">Instead of配置    </span><br><span class="hljs-string">git config --global url.git@github.com:.insteadOf https://github.com/</span><br><span class="hljs-string"></span><br><span class="hljs-string">Git命令别名配置 类似于快捷短语</span><br><span class="hljs-string">git config --global alias.cin &quot;</span>commit --amend --no-edit<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="4-免密配置（SSH-Remote）"><a href="#4-免密配置（SSH-Remote）" class="headerlink" title="4.免密配置（SSH Remote）"></a>4.免密配置（SSH Remote）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">URL:  git<span class="hljs-meta">@github</span>.com:git/git.git免密配置<br></code></pre></td></tr></table></figure><ul><li>SSH可以通过公私钥的机制，将生成公钥存放在服务端，从而实现免密访问目前的Key的类型四种，分别是</li></ul><p>​dsa       rsa    ecdsa    ed25519</p><ul><li><p>默认使用的是rsa，由于一些安全问题，现在已经不推荐使用dsa和 rsa了，优先推荐使用ed25519</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//生成密钥</span><br>ssh -keygen -t ed25519 -C “your_email” <br> <span class="hljs-comment">//密钥默认存在~/.ssh/id_ed25519.pub</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="5-Git进行版本控制的4大对象（Object）"><a href="#5-Git进行版本控制的4大对象（Object）" class="headerlink" title="5.Git进行版本控制的4大对象（Object）"></a>5.Git进行版本控制的4大对象（Object）</h2><ul><li><h5 id="commit-x2F-tree-x2F-blob-在git里面都统一称为Object，除此之外还有个tag的-object"><a href="#commit-x2F-tree-x2F-blob-在git里面都统一称为Object，除此之外还有个tag的-object" class="headerlink" title="commit &#x2F; tree &#x2F; blob 在git里面都统一称为Object，除此之外还有个tag的 object."></a>commit &#x2F; tree &#x2F; blob 在git里面都统一称为Object，除此之外还有个tag的 object.</h5></li><li><h5 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h5><p>存储文件的内容</p></li><li><h5 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h5><p>存储文件的目录信息</p></li><li><h5 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h5><p>存储提交信息，一个Commit可以对应唯一版本的代码</p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/ebb192cd51ff4d59.png"></p><h2 id="6-Refs"><a href="#6-Refs" class="headerlink" title="6.Refs"></a>6.Refs</h2><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/7ae0309b743dacf8.png"></p><ul><li><h5 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h5><p>git checkout -b 可以创建一个新分支</p><h5 id="分支一般用于开发阶段，是可以不新添加Commit进行迭代的"><a href="#分支一般用于开发阶段，是可以不新添加Commit进行迭代的" class="headerlink" title="分支一般用于开发阶段，是可以不新添加Commit进行迭代的"></a>分支一般用于开发阶段，是可以不新添加Commit进行迭代的</h5></li><li><h5 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h5><ul><li>标签一般表示的是-一个稳定版本，指向的Commit一般不会变更</li><li>通过 git tag 命令生成tag</li><li>通过git tag -a 版本号  -m “辅助信息”命令生成带信息的tag</li></ul></li></ul><h2 id="7-修改历史版本"><a href="#7-修改历史版本" class="headerlink" title="7.修改历史版本"></a>7.修改历史版本</h2><ol><li><h5 id="commit-amend"><a href="#commit-amend" class="headerlink" title="commit  - amend"></a>commit  - amend</h5><h5 id="通过这个命令可以修改最近的一次-commit信息，修改之后commit-id会变"><a href="#通过这个命令可以修改最近的一次-commit信息，修改之后commit-id会变" class="headerlink" title="通过这个命令可以修改最近的一次 commit信息，修改之后commit id会变"></a>通过这个命令可以修改最近的一次 commit信息，修改之后commit id会变</h5></li><li><h5 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h5><h5 id="通过git-rebase-i-HEAD-3可以实现对最近三个commit的修改"><a href="#通过git-rebase-i-HEAD-3可以实现对最近三个commit的修改" class="headerlink" title="通过git rebase -i HEAD~3可以实现对最近三个commit的修改:"></a>通过git rebase -i HEAD~3可以实现对最近三个commit的修改:</h5><p>1.合并commit<br>2.修改具体的commit message</p><p>3.删除某个commit</p></li><li><h5 id="filter-branch"><a href="#filter-branch" class="headerlink" title="filter  - branch"></a>filter  - branch</h5></li></ol><h5 id="该命令可以指定删除所有提交中的某个文件或者全局修改邮箱地址等操作"><a href="#该命令可以指定删除所有提交中的某个文件或者全局修改邮箱地址等操作" class="headerlink" title="该命令可以指定删除所有提交中的某个文件或者全局修改邮箱地址等操作"></a>该命令可以指定删除所有提交中的某个文件或者全局修改邮箱地址等操作</h5><p>  <img src="https://s3.bmp.ovh/imgs/2022/05/25/22e05ba3e7e891f4.png"></p><h2 id="8-Git-GC"><a href="#8-Git-GC" class="headerlink" title="8.Git GC"></a>8.Git GC</h2><ul><li><h5 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h5><p>通过git gc命令，可以删除一些不需要的object,以及公对object进行一些打也压缩来减少仓库的体积。</p></li><li><h5 id="Reflog"><a href="#Reflog" class="headerlink" title="Reflog"></a>Reflog</h5><p>reflog是用于记录操作日志，防止误操作后数据丢失，通过reflog来找到丢失的数据，手动将日志设置为过期。</p></li><li><h5 id="指定时间"><a href="#指定时间" class="headerlink" title="指定时间"></a>指定时间</h5><p>git  gc  prune&#x3D;now   指定的是修剪多久之前的对象，默认是两周前。</p></li></ul><h2 id="9-Git-Clone-amp-Pull-amp-Fetch"><a href="#9-Git-Clone-amp-Pull-amp-Fetch" class="headerlink" title="9.Git Clone&amp;Pull&amp;Fetch"></a>9.Git Clone&amp;Pull&amp;Fetch</h2><ul><li><h5 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h5><h6 id="拉取完整的仓库到本地日录，可以指定分支，深度。"><a href="#拉取完整的仓库到本地日录，可以指定分支，深度。" class="headerlink" title="拉取完整的仓库到本地日录，可以指定分支，深度。"></a>拉取完整的仓库到本地日录，可以指定分支，深度。</h6></li><li><h5 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h5><h6 id="将远端某些分支最新代码拉取到本地，不会执行merge操作，会修改refs-x2F-remote内的分支信息，如果需要和本地代码合并需要手动操作。"><a href="#将远端某些分支最新代码拉取到本地，不会执行merge操作，会修改refs-x2F-remote内的分支信息，如果需要和本地代码合并需要手动操作。" class="headerlink" title="将远端某些分支最新代码拉取到本地，不会执行merge操作，会修改refs&#x2F;remote内的分支信息，如果需要和本地代码合并需要手动操作。"></a>将远端某些分支最新代码拉取到本地，不会执行merge操作，会修改refs&#x2F;remote内的分支信息，如果需要和本地代码合并需要手动操作。</h6></li><li><h5 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h5><h6 id="拉取远端某分支，并和本地代码进行合并，操作等同于-git-fetch-git-merge-也可以通过git-pull-–rebase完成git-fetch-git-rebase操作。"><a href="#拉取远端某分支，并和本地代码进行合并，操作等同于-git-fetch-git-merge-也可以通过git-pull-–rebase完成git-fetch-git-rebase操作。" class="headerlink" title="拉取远端某分支，并和本地代码进行合并，操作等同于 git fetch+ git merge,也可以通过git pull –rebase完成git fetch + git rebase操作。"></a>拉取远端某分支，并和本地代码进行合并，操作等同于 git fetch+ git merge,也可以通过git pull –rebase完成git fetch + git rebase操作。</h6><h6 id="可能存在冲突，需要解决冲突。"><a href="#可能存在冲突，需要解决冲突。" class="headerlink" title="可能存在冲突，需要解决冲突。"></a>可能存在冲突，需要解决冲突。</h6></li></ul><h2 id="10-Git-Push（本地代码同步到远端的方式）"><a href="#10-Git-Push（本地代码同步到远端的方式）" class="headerlink" title="10.Git  Push（本地代码同步到远端的方式）"></a>10.Git  Push（本地代码同步到远端的方式）</h2><ul><li><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><h6 id="一般使用git-push-origin-master命令即可完成"><a href="#一般使用git-push-origin-master命令即可完成" class="headerlink" title="一般使用git push origin master命令即可完成"></a>一般使用git push origin master命令即可完成</h6></li><li><h5 id="冲突问题"><a href="#冲突问题" class="headerlink" title="冲突问题"></a>冲突问题</h5><h6 id="1、如果本地的commit记录和远端的commit-历史不一致，则会产生冲突，比如-git-commit-–amend-或者"><a href="#1、如果本地的commit记录和远端的commit-历史不一致，则会产生冲突，比如-git-commit-–amend-或者" class="headerlink" title="1、如果本地的commit记录和远端的commit 历史不一致，则会产生冲突，比如 git commit –amend 或者"></a>1、如果本地的commit记录和远端的commit 历史不一致，则会产生冲突，比如 git commit –amend 或者</h6><h6 id="git-rebase都有可能导致这个问题。"><a href="#git-rebase都有可能导致这个问题。" class="headerlink" title="git   rebase都有可能导致这个问题。"></a>git   rebase都有可能导致这个问题。</h6><h6 id="2，如果该分支就自己一个人使用，或者团队内确认过可以修改历史则可以通过git-push-origin-master-f来完成强制推送，一般不推荐主干分支进行该操作，正常都应该解决冲突后再进行推送。"><a href="#2，如果该分支就自己一个人使用，或者团队内确认过可以修改历史则可以通过git-push-origin-master-f来完成强制推送，一般不推荐主干分支进行该操作，正常都应该解决冲突后再进行推送。" class="headerlink" title="2，如果该分支就自己一个人使用，或者团队内确认过可以修改历史则可以通过git push origin master -f来完成强制推送，一般不推荐主干分支进行该操作，正常都应该解决冲突后再进行推送。"></a>2，如果该分支就自己一个人使用，或者团队内确认过可以修改历史则可以通过git push origin master -f来完成强制推送，一般不推荐主干分支进行该操作，正常都应该解决冲突后再进行推送。</h6></li><li><h5 id="推送规则限制"><a href="#推送规则限制" class="headerlink" title="推送规则限制"></a>推送规则限制</h5><h6 id="可以通过保护分支，来配置一些保护规则，防止误操作，或者一些不合规的操作出现，导致代码丢失。"><a href="#可以通过保护分支，来配置一些保护规则，防止误操作，或者一些不合规的操作出现，导致代码丢失。" class="headerlink" title="可以通过保护分支，来配置一些保护规则，防止误操作，或者一些不合规的操作出现，导致代码丢失。"></a>可以通过保护分支，来配置一些保护规则，防止误操作，或者一些不合规的操作出现，导致代码丢失。</h6></li></ul><h2 id="11-Git-团队开发具体流程简述"><a href="#11-Git-团队开发具体流程简述" class="headerlink" title="11.Git 团队开发具体流程简述"></a>11.Git 团队开发具体流程简述</h2><h3 id="一、创建开发分支"><a href="#一、创建开发分支" class="headerlink" title="一、创建开发分支"></a>一、创建开发分支</h3><ol><li>队长先建个组织，然后创建一个团队的远程仓库(例如：MagicMe)</li><li>队长创建dev分支，分支创建完毕后，会自动跳转到dev分支。由于dev分支是从main分支上创建的，因此内容与main分支一致。</li><li>main分支是稳定版本，一般不轻易改动；dev分支是开发测试用的，可以随便弄。</li><li>团队仓库和个人仓库不要混淆，是先从团队仓库fork到自己的远程仓库，有了自己的远程仓库再clone到自己的本地仓库，进行开发修改后，先提交到 自己的本地仓库，再提交到自己的远程仓库，再pull到团队仓库。</li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/ebf8b9b70b2f1ac2.png"></p><h3 id="二、Fork项目到个人的仓库"><a href="#二、Fork项目到个人的仓库" class="headerlink" title="二、Fork项目到个人的仓库"></a>二、Fork项目到个人的仓库</h3><ol><li>队员从团队的仓库，fork到自己的远程仓库</li><li>然后Clone自己的远程仓库到自己的本地仓库</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git clone &lt;ssh的地址&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>此时你自己的本地仓库并没有把自己的远程仓库的dev分支clone下来</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">git branch <span class="hljs-comment">//查看自己的本地分支，你只能发现只有main分支</span><br>git branch -a<span class="hljs-comment">//查看所有分支，包括你本地仓库的main分支和你的远程仓库的dev分支</span><br>git checkout -b dev origin/dev<span class="hljs-comment">//创建一个本地的dev分支，再把自己远程的仓库的dev分支（origin/dev）的内容放在该分支内，并切换到dev分支。</span><br>  <br>git branch<span class="hljs-comment">//现在就可以查看本地的main分支和dev分支了。</span><br>ls 或 dir<span class="hljs-comment">//可以看到dev分支的内容</span><br>  <br>git checkout master<br><span class="hljs-comment">//想切换回master分支的时候，再用 git checkout master</span><br></code></pre></td></tr></table></figure><h3 id="三、和团队项目保持同步"><a href="#三、和团队项目保持同步" class="headerlink" title="三、和团队项目保持同步"></a>三、和团队项目保持同步</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//什么时候保持同步呢，每天开始写代码前，都得先保持同步，每天的代码写完后，必须pull。明天重复这个过程。</span><br><span class="hljs-comment">//换句话说就是，你只要pull了，之后想写代码，得先保持同步。</span><br><br>git remote -v<span class="hljs-comment">//查看有没有设置upstream</span><br><span class="hljs-comment">//如果没有显示upstream</span><br>git remote add upstream 团队项目地址<br>git remote -v<span class="hljs-comment">//如果出现upstream，则设置成功</span><br>  <br>git fetch upstream<span class="hljs-comment">//获取团队项目最新版本，此时并没有把最新版本合并到你本地的分支上</span><br>git merge upstream/dev<span class="hljs-comment">//如果当前分支是dev分支,会将源分支（upstream/dev）合并到当前分支（dev）</span><br><span class="hljs-comment">//如果你是在本地的master分支上开发，那么在使用该命令前，先切换到master分支。</span><br>  <br><span class="hljs-comment">//注意此时只是将团队项目的最新版本合并到了本地分支，你的远程仓库并没有合并，所以需要:</span><br>git push origin dev<span class="hljs-comment">//推送本地仓库到远程仓库</span><br></code></pre></td></tr></table></figure><h3 id="四、push修改到自己的项目上"><a href="#四、push修改到自己的项目上" class="headerlink" title="四、push修改到自己的项目上"></a>四、push修改到自己的项目上</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//开发修改后</span><br>git add .<span class="hljs-comment">//将所有文件添加到暂存区</span><br>git commit -m &lt;message&gt;<span class="hljs-comment">//提交到自己的本地仓库</span><br>git push<span class="hljs-comment">//提交到自己的远程的仓库</span><br><span class="hljs-comment">//注意，在当前所在分支使用push，会push到与这个分支相关联的远程仓库分支。这里dev分支与origin/dev关联，因此push到GitHub上的dev分支。</span><br></code></pre></td></tr></table></figure><h3 id="五、请求合并到团队项目上"><a href="#五、请求合并到团队项目上" class="headerlink" title="五、请求合并到团队项目上"></a>五、请求合并到团队项目上</h3><p>首先到你的GitHub上，进入你的远程仓库里。点击红框处的Pull request</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/c4dc33d58e34c240.png"></p><p>下图左边红框，表示要合并到fzu2015&#x2F;CourseManagement项目的dev分支。<br>下图右边红框，表示要从自己仓库的dev分支发起合并请求。</p><p>总的意思就是从自己的远程仓库要合并到团队的仓库</p><p>点击红框处的 Create pull request就可以发送合并请求了。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/f7c9ad3464dcab8a.png"></p><p>当然，在发送请求之前，你可以检查一下你都改了哪些东西。在上面那个页面往下拉，就可以看到两者的对比。如下图</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/cdc5805264e7f773.png"></p><p>以上操作结束后，团队成员的流程就结束了。最后一步交给团队项目负责人来完成。</p><h3 id="六、团队项目负责人审核及同意合并请求"><a href="#六、团队项目负责人审核及同意合并请求" class="headerlink" title="六、团队项目负责人审核及同意合并请求"></a>六、团队项目负责人审核及同意合并请求</h3><p>首先进入GitHub的团队项目仓库中。此时右边的Pull requests显示当前项目有几个Pull request。点击进入查看。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/e0b84cefe8b453b1.png"></p><p>选择一个Pull request</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/36c309d4073939c7.png"></p><p>项目负责人审核有两个要注意的地方</p><ul><li><p>一个是下图的①。一定要看清楚是合并到哪个分支。这里是从schaepher的dev分支合并到fzu2015的dev分支。</p></li><li><p>另一个是下图的②。点击进去后，就可以查看该Pull request对项目做了哪些修改。这样如果有问题，可以及时发现，并关闭该Pull request。</p><blockquote><p>如果关闭了，一定要告诉队友，否则他可能会不知道。虽然也可以直接在下面发布Comment告诉他，但队友不一定看到。</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/f011ff5479ac3a49.png"></p></li><li><p>如果没有问题，可以点击Merge pull request。这样就合并好了。</p></li></ul><h3 id="分支的问题"><a href="#分支的问题" class="headerlink" title="分支的问题"></a>分支的问题</h3><p>组员的本地仓库应该有两个分支，一个是main分支和dev分支。</p><p>如果只在本地的dev分支上开发，开发完后，push到自己的远程仓库的dev分支上，然后pull到团队仓库上dev分支上。</p><p>如果你在本地的dev分支上开发后，也可以先合并到本地的main分支上，此时你本地的main分支就有本地的dev分支的全部内容。</p><p>然后push到自己的远程仓库，你在哪个分支push的，就会推送到自己的远程仓库相对应的分支上。</p><p>最后，组员可以选择将自己的远程仓库的main分支还是dev分支pull到团队仓库的main分支还是dev分支。</p><p>组员pull后，队长那边是可以看到组员是以什么方式pull的，队长具有是否合并的权利。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/1f0871f31ac06259.png"></p><p>如果你想要合并分支，无论是本地的，还是自己的远程仓库，还是团队的仓库，有以下的的命令:</p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//比如你想把dev分支合并到main分支</span><br>git checkout mian<span class="hljs-comment">//先切换到main分支</span><br>git merge dev<span class="hljs-comment">//dev分支合并到main分支</span><br><span class="hljs-comment">//合并后，dev分支不会消失，main分支的内容会变的和dev分支一样；</span><br></code></pre></td></tr></table></figure><p>重点强调！！！</p><p><strong>自己的本地的仓库，自己的远程仓库，团队的仓库，都可以创建任意多的分支。</strong></p><p>自己的本地的仓库，自己的远程仓库，团队的仓库，这三种仓库，都有分支的创建和合并的功能，如何使用，取决于你自己。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">正常流程：<br>自己的本地仓库有main分支和dev分支，自己远程仓库有main分支和dev分支，团队的仓库也有main分支和dev分支。分支不过是不同的时间线，相当于两个平行宇宙，互不干扰。如果想要干扰，只能合并。<br><br>合并的方式也有很多种：<br>自己本地仓库main分支与dev分支合并。<br>自己远程仓库相当于自己的本地仓库的备份，自己本地仓库是什么样子的，自己的远程仓库就应该是什么样子的。<br>  自己的远程仓库可以用mian分支合并团队仓库的main或dev分支。<br>  自己的远程仓库也可以用dev分支合并团队仓库的main或dev分支。<br>远程仓库能不能合并到团队仓库，取决于队长。<br></code></pre></td></tr></table></figure><h3 id="队长和组员的关系"><a href="#队长和组员的关系" class="headerlink" title="队长和组员的关系"></a>队长和组员的关系</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">队长和组员的操作大部分是一样的。<br>不过队长多了是否合并权，和创建团队组织和创建团队仓库。其他操作都和组员一样。<br></code></pre></td></tr></table></figure><h3 id="一篇文章"><a href="#一篇文章" class="headerlink" title="一篇文章"></a>一篇文章</h3><p>团队协作，为了规范，一般都是 fork 组织的仓库到自己帐号下，再提交 pr，组织的仓库一直保持更新，下面介绍如何保持自己 fork 之后的仓库与上游仓库同步。</p><p>下面以我 fork 团队的博客仓库为例</p><p>点击 fork 组织仓库到自己帐号下，然后就可以在自己的帐号下 clone 相应的仓库</p><p>使用 <code>git remote -v</code> 查看当前的远程仓库地址，输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">source-shell<br>origin  git<span class="hljs-meta">@github</span>.com:ibrother/staticblog.github.io.git (fetch)<br>origin  git<span class="hljs-meta">@github</span>.com:ibrother/staticblog.github.io.git (push)<br></code></pre></td></tr></table></figure><p>可以看到从自己帐号 clone 下来的仓库，远程仓库地址是与自己的远程仓库绑定的（这不是废话吗）</p><p>接下来运行 <code>git remote add upstream https://github.com/staticblog/staticblog.github.io.git</code></p><p>这条命令就算添加一个别名为 upstream（上游）的地址，指向之前 fork 的原仓库地址。<code>git remote -v</code> 输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">origin  https:<span class="hljs-comment">//github.com/snowfigure/solo.git (fetch)</span><br>origin  https:<span class="hljs-comment">//github.com/snowfigure/solo.git (push)</span><br>upstream        https:<span class="hljs-comment">//github.com/b3log/solo.git (fetch)</span><br>upstream        https:<span class="hljs-comment">//github.com/b3log/solo.git (push)</span><br></code></pre></td></tr></table></figure><p>之后运行下面几条命令，就可以保持本地仓库和上游仓库同步了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">git fetch upstream<br>git checkout master<br>git merge upstream/master<br></code></pre></td></tr></table></figure><p>接着就是熟悉的推送本地仓库到远程仓库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git push origin master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网中会发生什么？ ｜ 青训营笔记05</title>
    <link href="/2022/05/24/%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%AD%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F%20%EF%BD%9C%20%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/24/%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%AD%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F%20%EF%BD%9C%20%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-1-网络接入-互联网"><a href="#1-1-网络接入-互联网" class="headerlink" title="1.1 网络接入-互联网"></a>1.1 网络接入-互联网</h4><p>首先我们的电脑或者手机或者ipad，通过网络连接到路由器，然后再通过路由器连接到各大互联网公司的转发中，然后最终到达我们所需服务的服务器获取服务！</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/24/a43807c917bb78cb.png"></p><h4 id="1-2-网络接入-路由"><a href="#1-2-网络接入-路由" class="headerlink" title="1.2 网络接入-路由"></a>1.2 网络接入-路由</h4><p>​路由是指<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a>从一个接口上收到<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8C%85">数据包</a>，根据数据包的目的<a href="https://baike.baidu.com/item/%E5%9C%B0%E5%9D%80">地址</a>进行定向并转发到另一个接口的过程。路由通常与桥接来对比，在粗心的人看来，它们似乎完成的是同样的事。它们的主要<a href="https://baike.baidu.com/item/%E5%8C%BA%E5%88%AB">区别</a>在于<a href="https://baike.baidu.com/item/%E6%A1%A5%E6%8E%A5">桥接</a>发生在<a href="https://baike.baidu.com/item/OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B">OSI参考模型</a>的第二层（<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82">数据链路层</a>），而路由发生在第三层（<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%B1%82">网络层</a>）。这一<a href="https://baike.baidu.com/item/%E5%8C%BA%E5%88%AB">区别</a>使二者在传递信息的过程中使用不同的信息，从而以不同的方式来完成其任务。</p><h4 id="2-网络分层结构"><a href="#2-网络分层结构" class="headerlink" title="2. 网络分层结构"></a>2. 网络分层结构</h4><p>计算机网络体系大致分为三种，OSI七层模型、TCP&#x2F;IP四层模型和五层模型。一般面试的时候考察比较多的是五层模型。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/3ba24fd8c69a4d8a.png"></p><p>五层模型：应用层、传输层、网络层、数据链路层、物理层。</p><ul><li><strong>应用层</strong>：为应用程序提供交互服务。在互联网中的应用层协议很多，如域名系统DNS、HTTP协议、SMTP协议等。</li><li><strong>传输层</strong>：负责向两台主机进程之间的通信提供数据传输服务。传输层的协议主要有传输控制协议TCP和用户数据协议UDP。</li><li><strong>网络层</strong>：选择合适的路由和交换结点，确保数据及时传送。主要包括IP协议。</li><li><strong>数据链路层</strong>：在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。</li><li><strong>物理层</strong>：实现相邻节点间比特流的透明传输，尽可能屏蔽传输介质和物理设备的差异。</li></ul><h4 id="三次握手（建立TCP连接的过程）"><a href="#三次握手（建立TCP连接的过程）" class="headerlink" title="三次握手（建立TCP连接的过程）"></a>三次握手（建立TCP连接的过程）</h4><p>假设发送端为客户端，接收端为服务端。开始时客户端和服务端的状态都是<code>CLOSED</code>。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/6de7c6257799e080.png"></p><ol><li>第一次握手：客户端向服务端发起建立连接请求，客户端会随机生成一个起始序列号x，客户端向服务端发送的字段中包含标志位<code>SYN=1</code>，序列号<code>seq=x</code>。第一次握手前客户端的状态为<code>CLOSE</code>，第一次握手后客户端的状态为<code>SYN-SENT</code>。此时服务端的状态为<code>LISTEN</code>。</li><li>第二次握手：服务端在收到客户端发来的报文后，会随机生成一个服务端的起始序列号y，然后给客户端回复一段报文，其中包括标志位<code>SYN=1</code>，<code>ACK=1</code>，序列号<code>seq=y</code>，确认号<code>ack=x+1</code>。第二次握手前服务端的状态为<code>LISTEN</code>，第二次握手后服务端的状态为<code>SYN-RCVD</code>，此时客户端的状态为<code>SYN-SENT</code>。（其中<code>SYN=1</code>表示要和客户端建立一个连接，<code>ACK=1</code>表示确认序号有效）</li><li>第三次握手：客户端收到服务端发来的报文后，会再向服务端发送报文，其中包含标志位<code>ACK=1</code>，序列号<code>seq=x+1</code>，确认号<code>ack=y+1</code>。第三次握手前客户端的状态为<code>SYN-SENT</code>，第三次握手后客户端和服务端的状态都为<code>ESTABLISHED</code>。<strong>此时连接建立完成。</strong></li></ol><h4 id="两次握手可以吗？"><a href="#两次握手可以吗？" class="headerlink" title="两次握手可以吗？"></a>两次握手可以吗？</h4><p>第三次握手主要为了<strong>防止已失效的连接请求报文段</strong>突然又传输到了服务端，导致产生问题。</p><ul><li>比如客户端A发出连接请求，可能因为网络阻塞原因，A没有收到确认报文，于是A再重传一次连接请求。</li><li>连接成功，等待数据传输完毕后，就释放了连接。</li><li>然后A发出的第一个连接请求等到连接释放以后的某个时间才到达服务端B，此时B误认为A又发出一次新的连接请求，于是就向A发出确认报文段。</li><li>如果不采用三次握手，只要B发出确认，就建立新的连接了，<strong>此时A不会响应B的确认且不发送数据，则B一直等待A发送数据，浪费资源。</strong></li></ul><h4 id="四次挥手（断开TCP连接的过程）"><a href="#四次挥手（断开TCP连接的过程）" class="headerlink" title="四次挥手（断开TCP连接的过程）"></a>四次挥手（断开TCP连接的过程）</h4><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/5a03ad87b87b50de.png"></p><ol><li>A的应用进程先向其TCP发出连接释放报文段（<code>FIN=1，seq=u</code>），并停止再发送数据，主动关闭TCP连接，进入<code>FIN-WAIT-1</code>（终止等待1）状态，等待B的确认。</li><li>B收到连接释放报文段后即发出确认报文段（<code>ACK=1，ack=u+1，seq=v</code>），B进入<code>CLOSE-WAIT</code>（关闭等待）状态，此时的TCP处于半关闭状态，A到B的连接释放。</li><li>A收到B的确认后，进入<code>FIN-WAIT-2</code>（终止等待2）状态，等待B发出的连接释放报文段。</li><li>B发送完数据，就会发出连接释放报文段（<code>FIN=1，ACK=1，seq=w，ack=u+1</code>），B进入<code>LAST-ACK</code>（最后确认）状态，等待A的确认。</li><li>A收到B的连接释放报文段后，对此发出确认报文段（<code>ACK=1，seq=u+1，ack=w+1</code>），A进入<code>TIME-WAIT</code>（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间<code>2MSL</code>（最大报文段生存时间）后，A才进入<code>CLOSED</code>状态。B收到A发出的确认报文段后关闭连接，若没收到A发出的确认报文段，B就会重传连接释放报文段。</li></ol><h4 id="第四次挥手为什么要等待2MSL？"><a href="#第四次挥手为什么要等待2MSL？" class="headerlink" title="第四次挥手为什么要等待2MSL？"></a>第四次挥手为什么要等待2MSL？</h4><ul><li><strong>保证A发送的最后一个ACK报文段能够到达B</strong>。这个<code>ACK</code>报文段有可能丢失，B收不到这个确认报文，就会超时重传连接释放报文段，然后A可以在<code>2MSL</code>时间内收到这个重传的连接释放报文段，接着A重传一次确认，重新启动2MSL计时器，最后A和B都进入到<code>CLOSED</code>状态，若A在<code>TIME-WAIT</code>状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到B重传的连接释放报文段，所以不会再发送一次确认报文段，B就无法正常进入到<code>CLOSED</code>状态。</li><li><strong>防止已失效的连接请求报文段出现在本连接中</strong>。A在发送完最后一个<code>ACK</code>报文段后，再经过2MSL，就可以使这个连接所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现旧的连接请求报文段。</li></ul><h4 id="为什么是四次挥手？"><a href="#为什么是四次挥手？" class="headerlink" title="为什么是四次挥手？"></a>为什么是四次挥手？</h4><p>因为当Server端收到Client端的<code>SYN</code>连接请求报文后，可以直接发送<code>SYN+ACK</code>报文。<strong>但是在关闭连接时，当Server端收到Client端发出的连接释放报文时，很可能并不会立即关闭SOCKET</strong>，所以Server端先回复一个<code>ACK</code>报文，告诉Client端我收到你的连接释放报文了。只有等到Server端所有的报文都发送完了，这时Server端才能发送连接释放报文，之后两边才会真正的断开连接。故需要四次挥手。</p><h4 id="TCP有哪些特点？"><a href="#TCP有哪些特点？" class="headerlink" title="TCP有哪些特点？"></a>TCP有哪些特点？</h4><ul><li>TCP是<strong>面向连接</strong>的运输层协议。</li><li><strong>点对点</strong>，每一条TCP连接只能有两个端点。</li><li>TCP提供<strong>可靠交付</strong>的服务。</li><li>TCP提供<strong>全双工通信</strong>。</li><li><strong>面向字节流</strong>。</li></ul><h4 id="TCP和UDP的区别？"><a href="#TCP和UDP的区别？" class="headerlink" title="TCP和UDP的区别？"></a>TCP和UDP的区别？</h4><ol><li>TCP<strong>面向连接</strong>；UDP是无连接的，即发送数据之前不需要建立连接。</li><li>TCP提供<strong>可靠的服务</strong>；UDP不保证可靠交付。</li><li>TCP<strong>面向字节流</strong>，把数据看成一连串无结构的字节流；UDP是面向报文的。</li><li>TCP有<strong>拥塞控制</strong>；UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如实时视频会议等）。</li><li>每一条TCP连接只能是<strong>点到点</strong>的；UDP支持一对一、一对多、多对一和多对多的通信方式。</li><li>TCP首部开销20字节；UDP的首部开销小，只有8个字节。</li></ol><h4 id="HTTP协议的特点？"><a href="#HTTP协议的特点？" class="headerlink" title="HTTP协议的特点？"></a>HTTP协议的特点？</h4><ol><li>HTTP允许传输<strong>任意类型</strong>的数据。传输的类型由Content-Type加以标记。</li><li><strong>无状态</strong>。对于客户端每次发送的请求，服务器都认为是一个新的请求，上一次会话和下一次会话之间没有联系。</li><li>支持<strong>客户端&#x2F;服务器模式</strong>。</li></ol><h4 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h4><p>HTTP请求由<strong>请求行、请求头部、空行和请求体</strong>四个部分组成。</p><ul><li><strong>请求行</strong>：包括请求方法，访问的资源URL，使用的HTTP版本。<code>GET</code>和<code>POST</code>是最常见的HTTP方法，除此以外还包括<code>DELETE、HEAD、OPTIONS、PUT、TRACE</code>。</li><li><strong>请求头</strong>：格式为“属性名:属性值”，服务端根据请求头获取客户端的信息，主要有<code>cookie、host、connection、accept-language、accept-encoding、user-agent</code>。</li><li><strong>请求体</strong>：用户的请求数据如用户名，密码等。</li></ul><p><strong>请求报文示例</strong>：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">POST</span> /xxx <span class="hljs-variable constant_">HTTP</span>/<span class="hljs-number">1.1</span> 请求行<br><span class="hljs-title class_">Accept</span><span class="hljs-symbol">:image/gif</span>.image/jpeg, 请求头部<br><span class="hljs-title class_">Accept</span>-<span class="hljs-title class_">Language</span><span class="hljs-symbol">:zh-cn</span><br><span class="hljs-title class_">Connection</span><span class="hljs-symbol">:Keep-Alive</span><br><span class="hljs-title class_">Host</span><span class="hljs-symbol">:localhost</span><br><span class="hljs-title class_">User</span>-<span class="hljs-title class_">Agent</span><span class="hljs-symbol">:Mozila/</span><span class="hljs-number">4.0</span>(compatible;<span class="hljs-variable constant_">MSIE5</span>.<span class="hljs-number">01</span>;<span class="hljs-title class_">Window</span> <span class="hljs-variable constant_">NT5</span>.<span class="hljs-number">0</span>)<br><span class="hljs-title class_">Accept</span>-<span class="hljs-title class_">Encoding</span><span class="hljs-symbol">:gzip</span>,deflate<br><br>username=dabin 请求体<br></code></pre></td></tr></table></figure><p>HTTP响应也由四个部分组成，分别是：<strong>状态行、响应头、空行和响应体</strong>。</p><ul><li><strong>状态行</strong>：协议版本，状态码及状态描述。</li><li><strong>响应头</strong>：响应头字段主要有<code>connection、content-type、content-encoding、content-length、set-cookie、Last-Modified，、Cache-Control、Expires</code>。</li><li><strong>响应体</strong>：服务器返回给客户端的内容。</li></ul><p><strong>响应报文示例</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">HTTP/1.1 200 OK<br>Server:Apache Tomcat/5.0.12<br>Date:Mon,6Oct2003 13:23:42 GMT<br>Content-Length:112<br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>响应体<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="HTTP状态码有哪些？"><a href="#HTTP状态码有哪些？" class="headerlink" title="HTTP状态码有哪些？"></a>HTTP状态码有哪些？</h4><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/c756caf850e73a03.png"></p><h4 id="POST和GET的区别？"><a href="#POST和GET的区别？" class="headerlink" title="POST和GET的区别？"></a>POST和GET的区别？</h4><ul><li>GET请求参数通过URL传递，POST的参数放在请求体中。</li><li>GET产生一个TCP数据包；POST产生两个TCP数据包。对于GET方式的请求，浏览器会把请求头和请求体一并发送出去；而对于POST，浏览器先发送请求头，服务器响应100 continue，浏览器再发送请求体。</li><li>GET请求会被浏览器主动缓存，而POST不会，除非手动设置。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li></ul><h4 id="HTTP长连接和短连接？"><a href="#HTTP长连接和短连接？" class="headerlink" title="HTTP长连接和短连接？"></a>HTTP长连接和短连接？</h4><p>HTTP短连接：浏览器和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。<strong>HTTP1.0默认使用的是短连接</strong>。</p><p>HTTP长连接：指的是<strong>复用TCP连接</strong>。多个HTTP请求可以复用同一个TCP连接，这就节省了TCP连接建立和断开的消耗。</p><p><strong>HTTP&#x2F;1.1起，默认使用长连接</strong>。要使用长连接，客户端和服务器的HTTP首部的Connection都要设置为keep-alive，才能支持长连接。</p><h4 id="HTTP1-1和-HTTP2-0的区别？"><a href="#HTTP1-1和-HTTP2-0的区别？" class="headerlink" title="HTTP1.1和 HTTP2.0的区别？"></a>HTTP1.1和 HTTP2.0的区别？</h4><p>HTTP2.0相比HTTP1.1支持的特性：</p><ul><li><strong>新的二进制格式</strong>：HTTP1.1 基于文本格式传输数据；HTTP2.0采用二进制格式传输数据，解析更高效。</li><li><strong>多路复用</strong>：在一个连接里，允许同时发送多个请求或响应，<strong>并且这些请求或响应能够并行的传输而不被阻塞</strong>，避免 HTTP1.1 出现的”队头堵塞”问题。</li><li><strong>头部压缩</strong>，HTTP1.1的header带有大量信息，而且每次都要重复发送；HTTP2.0 把header从数据中分离，并封装成头帧和数据帧，<strong>使用特定算法压缩头帧</strong>，有效减少头信息大小。并且HTTP2.0**在客户端和服务器端记录了之前发送的键值对，对于相同的数据，不会重复发送。**比如请求a发送了所有的头信息字段，请求b则**只需要发送差异数据**，这样可以减少冗余数据，降低开销。</li><li><strong>服务端推送</strong>：HTTP2.0允许服务器向客户端推送资源，无需客户端发送请求到服务器获取。</li></ul><h4 id="HTTPS与HTTP的区别？"><a href="#HTTPS与HTTP的区别？" class="headerlink" title="HTTPS与HTTP的区别？"></a>HTTPS与HTTP的区别？</h4><ol><li>HTTP是超文本传输协议，信息是<strong>明文传输</strong>；HTTPS则是具有<strong>安全性</strong>的ssl加密传输协议。</li><li>HTTP和HTTPS用的端口不一样，HTTP端口是80，HTTPS是443。</li><li>HTTPS协议<strong>需要到CA机构申请证书</strong>，一般需要一定的费用。</li><li>HTTP运行在TCP协议之上；HTTPS运行在SSL协议之上，SSL运行在TCP协议之上。</li></ol><h4 id="浏览器中输入URL返回页面过程？"><a href="#浏览器中输入URL返回页面过程？" class="headerlink" title="浏览器中输入URL返回页面过程？"></a>浏览器中输入URL返回页面过程？</h4><ol><li><strong>解析域名</strong>，找到主机 IP。</li><li>浏览器利用 IP 直接与网站主机通信，<strong>三次握手</strong>，建立 TCP 连接。浏览器会以一个随机端口向服务端的 web 程序 80 端口发起 TCP 的连接。</li><li>建立 TCP 连接后，浏览器向主机发起一个HTTP请求。</li><li>服务器<strong>响应请求</strong>，返回响应数据。</li><li>浏览器<strong>解析响应内容，进行渲染</strong>，呈现给用户。</li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/05/24/4439893882fbb74d.png"></p><h4 id="DNS-的解析过程？"><a href="#DNS-的解析过程？" class="headerlink" title="DNS 的解析过程？"></a>DNS 的解析过程？</h4><ol><li>浏览器搜索<strong>自己的DNS缓存</strong></li><li>若没有，则搜索<strong>操作系统中的DNS缓存和hosts文件</strong></li><li>若没有，则操作系统将域名发送至<strong>本地域名服务器</strong>，本地域名服务器查询自己的DNS缓存，查找成功则返回结果，否则依次向<strong>根域名服务器、顶级域名服务器、权限域名服务器</strong>发起查询请求，最终返回IP地址给本地域名服务器</li><li>本地域名服务器将得到的IP地址返回给<strong>操作系统</strong>，同时自己也<strong>将IP地址缓存起来</strong></li><li>操作系统将 IP 地址返回给浏览器，同时自己也将IP地址缓存起来</li><li>浏览器得到域名对应的IP地址</li></ol>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯云智后台开发实习一面</title>
    <link href="/2022/05/20/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%99%BA%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/"/>
    <url>/2022/05/20/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%99%BA%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="腾讯云智后台开发一面"><a href="#腾讯云智后台开发一面" class="headerlink" title="腾讯云智后台开发一面"></a>腾讯云智后台开发一面</h3><ol><li><h4 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h4></li><li><h4 id="介绍项目"><a href="#介绍项目" class="headerlink" title="介绍项目"></a>介绍项目</h4></li><li><h4 id="项目使用redis做什么，原理"><a href="#项目使用redis做什么，原理" class="headerlink" title="项目使用redis做什么，原理"></a>项目使用redis做什么，原理</h4></li><li><h4 id="项目使用rabbitmq，具体流程是什么"><a href="#项目使用rabbitmq，具体流程是什么" class="headerlink" title="项目使用rabbitmq，具体流程是什么"></a>项目使用rabbitmq，具体流程是什么</h4></li><li><h4 id="项目过程中遇到问题怎么排查"><a href="#项目过程中遇到问题怎么排查" class="headerlink" title="项目过程中遇到问题怎么排查"></a>项目过程中遇到问题怎么排查</h4></li><li><h4 id="怎么发现和解决缓存失效等问题"><a href="#怎么发现和解决缓存失效等问题" class="headerlink" title="怎么发现和解决缓存失效等问题"></a>怎么发现和解决缓存失效等问题</h4></li><li><h4 id="MySQL索引失效的场景"><a href="#MySQL索引失效的场景" class="headerlink" title="MySQL索引失效的场景"></a>MySQL索引失效的场景</h4></li></ol><blockquote><p><strong>导致索引失效的情况：</strong></p></blockquote><ul><li><h5 id="对于组合索引，不是使用组合索引最左边的字段，则不会使用索引"><a href="#对于组合索引，不是使用组合索引最左边的字段，则不会使用索引" class="headerlink" title="对于组合索引，不是使用组合索引最左边的字段，则不会使用索引"></a>对于组合索引，不是使用组合索引最左边的字段，则不会使用索引</h5></li><li><h5 id="以-开头的like查询如-abc，无法使用索引；非-开头的like查询如abc-，相当于范围查询，会使用索引"><a href="#以-开头的like查询如-abc，无法使用索引；非-开头的like查询如abc-，相当于范围查询，会使用索引" class="headerlink" title="以%开头的like查询如%abc，无法使用索引；非%开头的like查询如abc%，相当于范围查询，会使用索引"></a>以%开头的like查询如<code>%abc</code>，无法使用索引；非%开头的like查询如<code>abc%</code>，相当于范围查询，会使用索引</h5></li><li><h5 id="查询条件中列类型是字符串，没有使用引号，可能会因为类型不同发生隐式转换，使索引失效"><a href="#查询条件中列类型是字符串，没有使用引号，可能会因为类型不同发生隐式转换，使索引失效" class="headerlink" title="查询条件中列类型是字符串，没有使用引号，可能会因为类型不同发生隐式转换，使索引失效"></a>查询条件中列类型是字符串，没有使用引号，可能会因为类型不同发生隐式转换，使索引失效</h5></li><li><h5 id="判断索引列是否不等于某个值时"><a href="#判断索引列是否不等于某个值时" class="headerlink" title="判断索引列是否不等于某个值时"></a>判断索引列是否不等于某个值时</h5></li><li><h5 id="对索引列进行运算"><a href="#对索引列进行运算" class="headerlink" title="对索引列进行运算"></a>对索引列进行运算</h5></li><li><h5 id="查询条件使用or连接，也会导致索引失效"><a href="#查询条件使用or连接，也会导致索引失效" class="headerlink" title="查询条件使用or连接，也会导致索引失效"></a>查询条件使用<code>or</code>连接，也会导致索引失效</h5></li></ul><ol start="8"><li><h4 id="场景题：要实现三个功能，A-gt-B-gt-C，其中一个错误，依次回退之前所有操作，你会怎么设计。"><a href="#场景题：要实现三个功能，A-gt-B-gt-C，其中一个错误，依次回退之前所有操作，你会怎么设计。" class="headerlink" title="场景题：要实现三个功能，A-&gt;B-&gt;C，其中一个错误，依次回退之前所有操作，你会怎么设计。"></a>场景题：要实现三个功能，A-&gt;B-&gt;C，其中一个错误，依次回退之前所有操作，你会怎么设计。</h4></li></ol><p>​使用栈！</p><ol start="9"><li><h4 id="线程池7大参数"><a href="#线程池7大参数" class="headerlink" title="线程池7大参数"></a>线程池7大参数</h4></li></ol><blockquote><p><strong>ThreadPoolExecutor 的通用构造函数：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-type">int</span> corePoolSize, </span><br><span class="hljs-params"><span class="hljs-type">int</span> maximumPoolSize, </span><br><span class="hljs-params"><span class="hljs-type">long</span> keepAliveTime, </span><br><span class="hljs-params">TimeUnit unit, </span><br><span class="hljs-params">BlockingQueue&lt;Runnable&gt; workQueue, </span><br><span class="hljs-params">ThreadFactory threadFactory, </span><br><span class="hljs-params">RejectedExecutionHandler handler</span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><p>1、<code>corePoolSize</code>：当有新任务时，如果线程池中线程数没有达到线程池的基本大小，则会创建新的线程执行任务，否则将任务放入阻塞队列。当线程池中存活的线程数总是大于 corePoolSize 时，应该考虑调大 corePoolSize。</p><p>2、<code>maximumPoolSize</code>：当阻塞队列填满时，如果线程池中线程数没有超过最大线程数，则会创建新的线程运行任务。否则根据拒绝策略处理新任务。非核心线程类似于临时借来的资源，这些线程在空闲时间超过 keepAliveTime 之后，就应该退出，避免资源浪费。</p><p>3、<code>BlockingQueue</code>：存储等待运行的任务。</p><p>4、<code>keepAliveTime</code>：<strong>非核心线程</strong>空闲后，保持存活的时间，此参数只对非核心线程有效。设置为0，表示多余的空闲线程会被立即终止。</p><p>5、<code>TimeUnit</code>：时间单位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">TimeUnit.DAYS<br>TimeUnit.HOURS<br>TimeUnit.MINUTES<br>TimeUnit.SECONDS<br>TimeUnit.MILLISECONDS<br>TimeUnit.MICROSECONDS<br>TimeUnit.NANOSECONDS<br></code></pre></td></tr></table></figure><p>6、<code>ThreadFactory</code>：每当线程池创建一个新的线程时，都是通过线程工厂方法来完成的。在 ThreadFactory 中只定义了一个方法 newThread，每当线程池需要创建新线程就会调用它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ThreadFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String poolName;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThreadFactory</span><span class="hljs-params">(String poolName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.poolName = poolName;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable runnable)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAppThread</span>(runnable, poolName);<span class="hljs-comment">//将线程池名字传递给构造函数，用于区分不同线程池的线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7、<code>RejectedExecutionHandler</code>：当队列和线程池都满了的时候，根据拒绝策略处理新任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">AbortPolicy：默认的策略，直接抛出RejectedExecutionException<br>DiscardPolicy：不处理，直接丢弃<br>DiscardOldestPolicy：将等待队列队首的任务丢弃，并执行当前任务<br>CallerRunsPolicy：由调用线程处理该任务<br></code></pre></td></tr></table></figure><ol start="9"><li><h4 id="平时看哪些书籍，喜欢记笔记吗？"><a href="#平时看哪些书籍，喜欢记笔记吗？" class="headerlink" title="平时看哪些书籍，喜欢记笔记吗？"></a>平时看哪些书籍，喜欢记笔记吗？</h4></li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>语速放慢，不要紧张，思路理清楚再回答。</li><li>问题可能面试完就想起来了，一问就蒙，这就是记的不够彻底，还得继续加深学习！</li><li>提前准备好面试环境！</li><li>继续努力，继续加油！</li></ul>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>实习</tag>
      
      <tag>大学</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang学习&amp;DATABASE/SQL与GORM设计与实践 ｜ 青训营笔记04</title>
    <link href="/2022/05/18/Golang%E5%AD%A6%E4%B9%A0-DATABASE-SQL%E4%B8%8EGORM%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E8%B7%B5-%EF%BD%9C-%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B004/"/>
    <url>/2022/05/18/Golang%E5%AD%A6%E4%B9%A0-DATABASE-SQL%E4%B8%8EGORM%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E8%B7%B5-%EF%BD%9C-%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B004/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="DATABASE-x2F-SQL与GORM-设计与实践"><a href="#DATABASE-x2F-SQL与GORM-设计与实践" class="headerlink" title="DATABASE&#x2F;SQL与GORM 设计与实践"></a>DATABASE&#x2F;SQL与GORM 设计与实践</h2><h3 id="1-理解-database-x2F-sql"><a href="#1-理解-database-x2F-sql" class="headerlink" title="1.理解 database&#x2F;sql"></a>1.理解 database&#x2F;sql</h3><ul><li><h5 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h5></li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stata">import (<br><span class="hljs-string">&quot;database/sql&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>_ <span class="hljs-string">&quot;github.com/go-sql-driver/mysql&quot;</span><br>)<br><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">db</span>, <span class="hljs-keyword">err</span> := sql.<span class="hljs-keyword">Open</span>(<span class="hljs-string">&quot;mysql&quot;</span>, <span class="hljs-string">&quot;user:password@/dbname&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">err</span> != nil &#123;<br>panic(<span class="hljs-keyword">err</span>)<br>&#125;<br><span class="hljs-comment">// See &quot;Important settings&quot; section.</span><br><span class="hljs-keyword">db</span>.SetConnMaxLifetime(time.Minute * 3)<br><span class="hljs-keyword">db</span>.SetMaxOpenConns(10)<br><span class="hljs-keyword">db</span>.SetMaxIdleConns(10)<br></code></pre></td></tr></table></figure><ul><li><h5 id="DB连接的几种类型"><a href="#DB连接的几种类型" class="headerlink" title="DB连接的几种类型"></a>DB连接的几种类型</h5><ul><li>直接连接&#x2F;Conn</li><li>预编译&#x2F;Stmt</li><li>事务&#x2F;TX</li></ul></li><li><h5 id="处理返回数据的几种方式"><a href="#处理返回数据的几种方式" class="headerlink" title="处理返回数据的几种方式"></a>处理返回数据的几种方式</h5><ul><li>Exec&#x2F; ExecContext -&gt; Result</li><li>Query &#x2F; QueryContext -&gt; Rows (Columns)</li><li>QueryRow &#x2F; QueryRowContext -&gt; Row (Rows简化)</li></ul></li></ul><h3 id="2-GORM基础使用"><a href="#2-GORM基础使用" class="headerlink" title="2.GORM基础使用"></a>2.GORM基础使用</h3><h3 id="GORM：设计简洁、功能强大、自由扩展的全功能ORM-（对象关系映射）"><a href="#GORM：设计简洁、功能强大、自由扩展的全功能ORM-（对象关系映射）" class="headerlink" title="GORM：设计简洁、功能强大、自由扩展的全功能ORM （对象关系映射）"></a>GORM：设计简洁、功能强大、自由扩展的全功能ORM （对象关系映射）</h3><ul><li><p>设计原则:API精简、测试优先、最小惊讶、灵活扩展、无依赖  <strong>可信赖</strong></p></li><li><p>功能完善:</p><ul><li>关联:一对一、一对多、单表自关联、多态;Preload、Joins 预加载、级联删除;关联模式;自定义关联表</li><li>事务:事务代码块、嵌套事务、Save Point</li><li>多数据库、读写分离、命名参数、Map、子查询、分组条件、代码共享、SQL表达式(查询、创建、更新)、自动选字段、查询优化器</li><li>字段权限、软删除、批量数据处理、Propared Stmt、自定义类型、命名策略、虚拟字段、自动track 时间、SQLBuilder、Logger</li><li>代码生成、复合主键、Constraint、Prometheus、Auto Migration、真·跨数据库兼容</li><li>多模式灵活自由扩展</li><li>Dovelopor Friondly</li></ul><h4 id="简单创建连接"><a href="#简单创建连接" class="headerlink" title="- 简单创建连接"></a>- 简单创建连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> (<br>  <span class="hljs-string">&quot;gorm.io/driver/mysql&quot;</span><br>  <span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br>)<br><br>func <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情</span><br>  dsn := <span class="hljs-string">&quot;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><br>  db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="高级配置"><a href="#高级配置" class="headerlink" title="- 高级配置"></a>- 高级配置</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">db, err := gorm.Open(mysql.New(mysql.Config&#123;<br>  DSN: <span class="hljs-string">&quot;gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>, <span class="hljs-comment">// DSN data source name</span><br>  DefaultStringSize: <span class="hljs-number">256</span>, <span class="hljs-comment">// string 类型字段的默认长度</span><br>  DisableDatetimePrecision: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持</span><br>  DontSupportRenameIndex: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引</span><br>  DontSupportRenameColumn: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 用 `change` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列</span><br>  SkipInitializeWithVersion: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 根据当前 MySQL 版本自动配置</span><br>&#125;), &amp;gorm.Config&#123;&#125;)<br></code></pre></td></tr></table></figure><h4 id="CRUD"><a href="#CRUD" class="headerlink" title="- CRUD"></a>- CRUD</h4><p><img src="https://s3.bmp.ovh/imgs/2022/05/16/3acf18e7eafa51d7.png"></p></li></ul><h4 id="模型定义"><a href="#模型定义" class="headerlink" title="- 模型定义"></a>- 模型定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>  ID           <span class="hljs-type">uint</span><br>  Name         <span class="hljs-type">string</span><br>  Email        *<span class="hljs-type">string</span><br>  Age          <span class="hljs-type">uint8</span><br>  Birthday     *time.Time<br>  MemberNumber sql.NullString<br>  ActivedAt    sql.NullTime<br>  CreatedAt    time.Time<br>  UpdatedAt    time.Time<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="约定大于配置"><a href="#约定大于配置" class="headerlink" title="- 约定大于配置"></a>- 约定大于配置</h4><ul><li><p>GORM 倾向于约定，而不是配置。默认情况下，GORM 使用 ID 作为主键，使用结构体名的 蛇形复数 作为表名，字段名的 蛇形 作为列名，并使用 CreatedAt、UpdatedAt 字段追踪创建、更新时间。</p></li><li><p>遵循 GORM 已有的约定，可以减少您的配置和代码量。如果约定不符合您的需求，GORM 允许您自定义配置它们。</p></li></ul><h4 id="使用-ID-作为主键"><a href="#使用-ID-作为主键" class="headerlink" title="使用 ID 作为主键"></a>使用 <code>ID</code> 作为主键</h4><p>默认情况下，GORM 会使用 <code>ID</code> 作为表的主键。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>  ID   <span class="hljs-type">string</span> <span class="hljs-comment">// 默认情况下，名为 `ID` 的字段会作为表的主键</span><br>  Name <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>你可以通过标签 <code>primaryKey</code> 将其它字段设为主键</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 将 `UUID` 设为主键</span><br><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">struct</span> &#123;<br>  ID     <span class="hljs-type">int64</span><br>  UUID   <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;primaryKey&quot;`</span><br>  Name   <span class="hljs-type">string</span><br>  Age    <span class="hljs-type">int64</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复数表名"><a href="#复数表名" class="headerlink" title="复数表名"></a>复数表名</h4><p>GORM 使用结构体名的 <code>蛇形命名</code> 作为表名。对于结构体 <code>User</code>，根据约定，其表名为 <code>users</code></p><h4 id="TableName"><a href="#TableName" class="headerlink" title="TableName"></a>TableName</h4><p>您可以实现 <code>Tabler</code> 接口来更改默认表名，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Tabler <span class="hljs-keyword">interface</span> &#123;<br>    TableName() <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// TableName 会将 User 的表名重写为 `profiles`</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(User)</span></span> TableName() <span class="hljs-type">string</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;profiles&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="简单总结："><a href="#简单总结：" class="headerlink" title="简单总结："></a>简单总结：</h4><ul><li><p>GORM是一种对象关系映射ORM框架，数据表对应结构体，数据行对应结构体实例，数据库字段对应结构体字段。</p></li><li><p>在gorm中，表名默认就是结构体名称的复数，也可以通过方法或者db.Table(“表名”)自定义表名；</p></li><li><p>列名由两个单词组成，在数据库中默认转小写后用下划线链接；</p></li><li><p>如果结构体有ID字段则默认ID字段为主键。</p></li><li><p>另外，GORM内置了一个gorm.Model结构体。gorm.Model是一个包含了ID, CreatedAt, UpdatedAt, DeletedAt四个字段的Golang结构体，可以将其嵌入到自己的结构体中。（如果模型内置了gorm.model有DeletedAt字段，则调用Delete删除该记录时，将会设置DeletedAt字段为当前时间，而不是直接将记录从数据库中删除，即软删除）</p></li><li><p>gorm中支持的结构体tag：</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">Type    指定列数据类型<br>Size    指定列大小, 默认值<span class="hljs-number">255</span><br>PRIMARY_KEY    将列指定为主键<br>UNIQUE    将列指定为唯一<br>NOT NULL    将列指定为非 NULL<br>Column    指定列名<br><span class="hljs-keyword">default</span>  设置默认值<br></code></pre></td></tr></table></figure><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go">查询<br><br>db.Select(<span class="hljs-string">&quot;name, age&quot;</span>).Order(<span class="hljs-string">&quot;age desc&quot;</span>).Limit(<span class="hljs-number">3</span>).Find(&amp;user, <span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;jinzhu&quot;</span>)<br>db.Select(<span class="hljs-string">&quot;name, age&quot;</span>).Order(<span class="hljs-string">&quot;age desc&quot;</span>).Limit(<span class="hljs-number">3</span>).Where(<span class="hljs-string">&quot;name = ?&quot;</span>,<span class="hljs-string">&quot;jinzhu&quot;</span>).Find(&amp;users)<br>修改<br><span class="hljs-comment">// 根据给定的条件更新单个属性</span><br>db.Model(&amp;user).Where(<span class="hljs-string">&quot;active = ?&quot;</span>, <span class="hljs-literal">true</span>).Update(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-comment">// 使用 map 更新多个属性，只会更新其中有变化的属性</span><br>db.Model(&amp;user).Updates(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&quot;active&quot;</span>: <span class="hljs-literal">false</span>&#125;)<br><span class="hljs-comment">// 使用 struct 更新多个属性，只会更新其中有变化且为非零值的字段</span><br>db.Model(&amp;user).Updates(User&#123;Name: <span class="hljs-string">&quot;hello&quot;</span>, Age: <span class="hljs-number">18</span>&#125;)<br><br>如果你想更新或忽略某些字段，你可以使用 Select，Omit<br><br>删除<br>db.Where(<span class="hljs-string">&quot;email LIKE ?&quot;</span>, <span class="hljs-string">&quot;%jinzhu%&quot;</span>).Delete(Email&#123;&#125;)<br>db.Delete(Email&#123;&#125;, <span class="hljs-string">&quot;email LIKE ?&quot;</span>, <span class="hljs-string">&quot;%jinzhu%&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>在 GORM 中使用多个立即执行方法时，后一个立即执行方法会复用前一个立即执行方法的条件 (不包括内联条件，find中写的条件) 。立即执行方法是指那些会立即生成SQL语句并发送到数据库的方法,一般是CRUD方法，如：Create, First, Find, Take, Save, UpdateXXX, Delete, Scan, Row, Rows…</p></li><li><p>db.debug  可以返回查询的sql语句。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国软件与技术服务股份有限公司（成都）实习面试记录</title>
    <link href="/2022/05/17/%E4%B8%AD%E5%9B%BD%E8%BD%AF%E4%BB%B6(%E6%88%90%E9%83%BD%E5%88%86%E5%85%AC%E5%8F%B8)%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/05/17/%E4%B8%AD%E5%9B%BD%E8%BD%AF%E4%BB%B6(%E6%88%90%E9%83%BD%E5%88%86%E5%85%AC%E5%8F%B8)%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-HashMap和HashTable区别"><a href="#1-HashMap和HashTable区别" class="headerlink" title="1.HashMap和HashTable区别"></a>1.HashMap和HashTable区别</h3><ol><li><p>HashMap<strong>作者</strong>比HashTable多了著名顶顶的并发大神Doug Lea；</p></li><li><p><strong>产生时间不同</strong>：HashTable伴随Java发布到现在，HashMap产生于JDK1.2；</p></li><li><p><strong>继承父类不同</strong>：HashMap是继承自AbstractMap类，而HashTable是继承自Dictionary类。不过它们都实现了同时实现了Map、Cloneable（可复制）、Serializable（可序列化）这三个接口。</p></li><li><p><strong>对外提供的接口不同</strong>：Hashtable比HashMap多提供了elments() 和contains() 两个方法。</p></li><li><p><strong>对Null key 和Null value的支持不同</strong>：Hashtable既不支持Null key也不支持Null value。Hashtable的put()方法的注释中有说明。HashMap都支持！</p></li><li><p>Hashtable是<strong>线程安全</strong>的，它的每个方法中都加入了Synchronize方法。在多线程并发的环境下，可以直接使用Hashtable，不需要自己为它的方法实现同步。</p><p>HashMap<strong>不是线程安全</strong>的，在多线程并发的环境下，可能会产生死锁等问题。使用HashMap时就必须要自己增加同步处理。</p></li><li><p><strong>遍历方式的内部实现上不同：</strong>Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。</p><p>HashMap的Iterator是fail-fast迭代器。当有其它线程改变了HashMap的结构（增加，删除，修改元素），将会抛出ConcurrentModificationException。不过，通过Iterator的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。</p></li><li><p><strong>初始容量大小和每次扩充容量大小的不同：</strong><br>Hashtable默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。</p></li><li><p><strong>计算hash值的方法不同</strong>：</p><p>Hashtable直接使用<strong>对象的hashCode</strong>。hashCode是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值。然后再使用除留余数发来获得最终的位置。Hashtable在计算元素的位置时需要进行一次除法运算，而除法运算是比较耗时的。<br>HashMap为了提高计算效率，将哈希表的<strong>大小固定为了2的幂</strong>，这样在取模预算时，不需要做除法，只需要做位运算。位运算比除法的效率要高很多。HashMap的效率虽然提高了，但是hash冲突却也增加了。因为它得出的hash值的低位相同的概率比较高，而计算位运算</p><p>为了解决这个问题，HashMap<strong>重新根据hashcode计算hash值后，又对hash值做了一些运算来打散数据</strong>。使得取得的位置更加分散，从而减少了hash冲突。当然了，为了高效，HashMap只做了一些简单的位处理。从而不至于把使用2 的幂次方带来的效率提升给抵消掉。</p></li></ol><h3 id="2-String类常用API"><a href="#2-String类常用API" class="headerlink" title="2.String类常用API"></a>2.String类常用API</h3><p><img src="https://s3.bmp.ovh/imgs/2022/05/17/daefdcb015c05929.png"></p><h3 id="3-Java常用的类，包，接口"><a href="#3-Java常用的类，包，接口" class="headerlink" title="3.Java常用的类，包，接口"></a>3.Java常用的类，包，接口</h3><ul><li><h5 id="常用的类包括："><a href="#常用的类包括：" class="headerlink" title="常用的类包括："></a>常用的类包括：</h5><p>Object、String、Math、Thread、Date、File。</p></li><li><h5 id="常用的接口："><a href="#常用的接口：" class="headerlink" title="常用的接口："></a>常用的接口：</h5><p>List、Map、Runnable、collection、comparable。</p></li><li><h5 id="常用的包："><a href="#常用的包：" class="headerlink" title="常用的包："></a>常用的包：</h5><p>java.lang.包：这个是系统的基础类；<br>java.util.包：这个是系统辅助类，特别是集合类；<br>java.io.包：这里面是所有输入输出有关的类，比如文件操作等；<br>java.math.包：数学常用类；</p><p>java.net.包：这里面是与网络有关的类；</p><p>java.sql.包：这个是数据库操作的类；</p><p>java.nio.包：为了完善 io 包中的功能，提高 io 包中性能而写的一个新包；</p></li><li><h5 id="Java集合框架："><a href="#Java集合框架：" class="headerlink" title="Java集合框架："></a>Java集合框架：</h5><p>接口：Collection、List、Set、Map、Iterator<br>类：Collections、ArrayList、HashMap</p></li></ul><h3 id="4-JSP内置对象有哪些？"><a href="#4-JSP内置对象有哪些？" class="headerlink" title="4.JSP内置对象有哪些？"></a>4.JSP内置对象有哪些？</h3><ol><li><p>HttpServletRequet类的<strong>Request对象</strong>：代表请求对象，主要用于接受客户端通过HTTP协议连接传输服务器端的数据。</p></li><li><p>HttpSevletResponse类的<strong>Response对象</strong>：代表响应对象，主要用于向客户端发送数据。</p></li><li><p>JspWriter类的<strong>out对象</strong>：主要用于向客户端输出数据，out的基类是jspWriter</p></li><li><p>HttpSession类的<strong>session对象</strong>：主要用来分别保存每个月的信息与请求关联的会话；会话状态的维持是web应用开发者必须面对的问题。</p></li><li><p>ServletContext类的<strong>application对象</strong>：主要用于保存用户信息，代码片段的运行环境；它是一个共享的内置对象，即一个容器中的多个用户共享一个application，故其保存的信息被所有用户所共享。</p></li><li><p>PageContext类的<strong>PageContext对象</strong>：管理网页属性，为jsp页面包装页面的上下文，管理对属于jsp的特殊可见部分中已经命名对象的访问，它的创建和初始化都是由容器来完成的。</p></li><li><p>ServletConfig类的<strong>Config对象</strong>：代码片段配置对象，标识Servlet的配置。</p></li><li><p>Object类的<strong>Page对象</strong>：处理jsp页面，是object类的一个实例，指的是jsp实现类的实例</p></li><li><p><strong>Exception对象</strong>：处理jsp文件执行时发生的错误和异常，只有在错误页面里才使用，前提是在页面指令里要有isErrorPage&#x3D;true。</p></li></ol><h3 id="5-HTML表格单元格合并"><a href="#5-HTML表格单元格合并" class="headerlink" title="5.HTML表格单元格合并"></a>5.HTML表格单元格合并</h3><h5 id="！！！！使用rowspan（行合并）和colspan（列合并）"><a href="#！！！！使用rowspan（行合并）和colspan（列合并）" class="headerlink" title="！！！！使用rowspan（行合并）和colspan（列合并）"></a>！！！！使用rowspan（行合并）和colspan（列合并）</h5><p><strong>1</strong>、如果要合并两行或更多行，则将使用rowspan属性。<br><strong>2</strong>、如果要将两个或多个列合并为一个列，将使用colspan属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单元格合并<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>a1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>a2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>a3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>b1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>b2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                1、row合并的时候，删除“下面的”单元格。</span><br><span class="hljs-comment">                2、row合并的时候，对删除哪个没有要求。</span><br><span class="hljs-comment">                --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>b3c3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>c1c2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2022/05/17/3051dfb736786570.png"></p><h3 id="6-GroupBY和外连接使用"><a href="#6-GroupBY和外连接使用" class="headerlink" title="6.GroupBY和外连接使用"></a>6.GroupBY和外连接使用</h3><h5 id="表a"><a href="#表a" class="headerlink" title="表a"></a>表a</h5><p><img src="https://s3.bmp.ovh/imgs/2022/05/17/b61d5c3f4960cb89.png"></p><h5 id="表b"><a href="#表b" class="headerlink" title="表b"></a>表b</h5><p><img src="https://s3.bmp.ovh/imgs/2022/05/17/50b91ce633654d82.png"></p><h4 id="1-查询每个部门dpt中成绩最好的人。"><a href="#1-查询每个部门dpt中成绩最好的人。" class="headerlink" title="1.查询每个部门dpt中成绩最好的人。"></a>1.查询每个部门dpt中成绩最好的人。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name,age,site,position,score <span class="hljs-keyword">FROM</span> a <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> b <span class="hljs-keyword">on</span> a.id <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">WHERE</span> score <span class="hljs-keyword">in</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">max</span>(score) <span class="hljs-keyword">from</span> a,b <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dpt);<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2022/05/17/d767d8a7e984ae2f.png"></p><h4 id="2-a-b-表外连接进行查询。"><a href="#2-a-b-表外连接进行查询。" class="headerlink" title="2.a b 表外连接进行查询。"></a>2.a b 表外连接进行查询。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> a <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> b <span class="hljs-keyword">on</span> a.id <span class="hljs-operator">=</span> b.id;<span class="hljs-operator">/</span><span class="hljs-operator">/</span>左外连接<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2022/05/17/a9eedab86ca1416b.png"></p><h3 id="不同的-SQL-JOIN"><a href="#不同的-SQL-JOIN" class="headerlink" title="不同的 SQL JOIN"></a>不同的 SQL JOIN</h3><p>不同的 SQL JOIN 类型：</p><h5 id="内连接："><a href="#内连接：" class="headerlink" title="内连接："></a>内连接：</h5><ul><li><strong>INNER JOIN</strong>：如果表中有至少一个匹配，则返回行  <strong>等同于JOIN</strong></li></ul><h5 id="外连接："><a href="#外连接：" class="headerlink" title="外连接："></a>外连接：</h5><ul><li><strong>LEFT JOIN</strong>（左连接）：即使右表中没有匹配，也从左表返回所有的行  <strong>等同于LEFT OUTER JOIN</strong></li><li><strong>RIGHT JOIN</strong>（右连接）：即使左表中没有匹配，也从右表返回所有的行  <strong>等同于LEFT OUTER JOIN</strong></li><li><strong>FULL OUTER JOIN</strong>（全连接）：只要其中一个表中存在匹配，则返回行   <strong>等同于leftjoin+rightjoin结果</strong></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>面试官不错，引导我回答问题；</li><li>有点小紧张；</li><li>继续加油！</li></ul>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>实习</tag>
      
      <tag>大学</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang学习&amp;高性能Go语言发行版优化 ｜ 青训营笔记03</title>
    <link href="/2022/05/17/Golang%E5%AD%A6%E4%B9%A0-%E9%AB%98%E6%80%A7%E8%83%BDGo%E8%AF%AD%E8%A8%80%E5%8F%91%E8%A1%8C%E7%89%88%E4%BC%98%E5%8C%96-%EF%BD%9C-%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B003/"/>
    <url>/2022/05/17/Golang%E5%AD%A6%E4%B9%A0-%E9%AB%98%E6%80%A7%E8%83%BDGo%E8%AF%AD%E8%A8%80%E5%8F%91%E8%A1%8C%E7%89%88%E4%BC%98%E5%8C%96-%EF%BD%9C-%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B003/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="高性能Go语言发行版优化"><a href="#高性能Go语言发行版优化" class="headerlink" title="高性能Go语言发行版优化"></a>高性能Go语言发行版优化</h2><ul><li><h3 id="性能优化是什么"><a href="#性能优化是什么" class="headerlink" title="性能优化是什么?"></a>性能优化是什么?</h3><ul><li>提升软件系统处理能力，减少不必要的消耗，充分发掘计算机算力。</li></ul></li><li><h3 id="为什么要做性能优化"><a href="#为什么要做性能优化" class="headerlink" title="为什么要做性能优化?"></a>为什么要做性能优化?</h3><ul><li>用户体验:带来用户体验的提升——让刷抖音更丝滑，让双十一购物等大流量场景不再卡顿。</li><li>资源高效利用:降低成本，提高效率——很小的优化乘以海量机器会是显著的性能提升和成本。</li></ul></li></ul><h3 id="1-自动内存管理-类似于JVM内存管理和垃圾回收"><a href="#1-自动内存管理-类似于JVM内存管理和垃圾回收" class="headerlink" title="1.自动内存管理(类似于JVM内存管理和垃圾回收)"></a>1.自动内存管理(类似于JVM内存管理和垃圾回收)</h3><ul><li><h5 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h5><ul><li>程序在运行时根据需求动态分配的内存: malloc()</li></ul></li><li><h5 id="自动内存管理-垃圾回收-由程序语言的运行时系统管理动态内存"><a href="#自动内存管理-垃圾回收-由程序语言的运行时系统管理动态内存" class="headerlink" title="自动内存管理(垃圾回收):由程序语言的运行时系统管理动态内存"></a>自动内存管理(垃圾回收):由程序语言的运行时系统管理动态内存</h5><ul><li>避免手动内存管理,专注于实现业务逻辑</li><li>保证内存使用的<strong>正确性</strong>和<strong>安全性</strong>: double-free problem, use-after-free problem</li></ul></li><li><h5 id="三个任务"><a href="#三个任务" class="headerlink" title="三个任务"></a>三个任务</h5><ul><li>为新对象分配空间</li><li>找到存活对象</li><li>回收死亡对象的内存空间</li></ul></li></ul><h4 id="1-1、自动内存管理-相关概念"><a href="#1-1、自动内存管理-相关概念" class="headerlink" title="1.1、自动内存管理-相关概念"></a>1.1、自动内存管理-相关概念</h4><ul><li><p>Mutator:业务线程，分配新对象，修改对象指向关系</p></li><li><p>Collector: GC线程，找到存活对象，回收死亡对象的内存空间.</p></li><li><p>Serial GC:只有一个collector</p></li><li><p>Parallel GC:支持多个collectors同时回收的GC算法</p></li><li><p>Concurrent GC: mutator(s)和collector(s)可以同时执行</p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/16/0788997982d1cabd.png"></p><h4 id="1-2、追踪垃圾回收"><a href="#1-2、追踪垃圾回收" class="headerlink" title="1.2、追踪垃圾回收"></a>1.2、追踪垃圾回收</h4><ul><li><p>对象被回收的条件:指针指向关系不可达的对象</p></li><li><p>标记根对象</p><ul><li>静态变量、全局变量、常量、线程栈等</li></ul></li><li><p>标记:找到可达对象</p><ul><li>求指针指向关系的传递闭包:从根对象出发，找到所有可达对象</li></ul></li><li><p>清理:所有不可达对象</p><ul><li>将存活对象复制到另外的内存空间(Copying Gc)</li><li>将死亡对象的内存标记为阿分配“(Mark-sweep GC)</li><li>移动并整理存活对象(Mark-compact GC)</li></ul></li><li><p>根据对象的生命周期，使用不同的标记和清理策略（分代回收算法！）</p></li></ul><h5 id="1-Copying-GC-将对象复制到另外的内存空间"><a href="#1-Copying-GC-将对象复制到另外的内存空间" class="headerlink" title="1. Copying GC:将对象复制到另外的内存空间"></a>1. Copying GC:将对象复制到另外的内存空间</h5><h5 id="2-Mark-sweep-GC-使用free-list管理空闲内存"><a href="#2-Mark-sweep-GC-使用free-list管理空闲内存" class="headerlink" title="2. Mark-sweep GC:使用free list管理空闲内存"></a>2. Mark-sweep GC:使用free list管理空闲内存</h5><h5 id="3-Compact-GC-原地整理对象"><a href="#3-Compact-GC-原地整理对象" class="headerlink" title="3. Compact GC:原地整理对象"></a>3. Compact GC:原地整理对象</h5><h4 id="1-3、分代GC（Generational-GC）"><a href="#1-3、分代GC（Generational-GC）" class="headerlink" title="1.3、分代GC（Generational GC）"></a>1.3、分代GC（Generational GC）</h4><ul><li><h6 id="年轻代-Young-generation"><a href="#年轻代-Young-generation" class="headerlink" title="年轻代(Young generation)"></a>年轻代(Young generation)</h6><ul><li>常规的对象分配</li><li>由于存活对象很少，可以采用copying collection.</li><li>GC吞吐率很高</li></ul></li><li><h6 id="老年代-Old-generation"><a href="#老年代-Old-generation" class="headerlink" title="老年代(Old generation)"></a>老年代(Old generation)</h6><ul><li>对象趋向于一直活着，反复复制开销较大</li><li>可以采用mark-sweep collection</li></ul></li></ul><h4 id="1-4、引用计数"><a href="#1-4、引用计数" class="headerlink" title="1.4、引用计数"></a>1.4、引用计数</h4><ul><li><p>每个对象都有一个与之关联的引用数目</p></li><li><p>对象存活的条件: 当且仅当引用数大于0</p></li><li><p>优点</p><ul><li>内存管理的操作被平摊到程序执行过程中</li><li>内存管理不需要了解 runtime 的实现细节:C+智能指针(smart pointer)</li></ul></li><li><p>缺点</p><ul><li>维护引用计数的开销较大:通过原子操作保证对引用计数操作的原子性和可见性</li><li>无法回收环形数据结构—— weak reference</li><li>内存开销:每个对象都引入的额外内存空间存储引用数目</li><li>回收内存时依然可能引发暂停</li></ul></li></ul><h3 id="2-Go内存管理记优化"><a href="#2-Go内存管理记优化" class="headerlink" title="2.Go内存管理记优化"></a>2.Go内存管理记优化</h3><h4 id="2-1-Go内存分配——分块"><a href="#2-1-Go内存分配——分块" class="headerlink" title="2.1. Go内存分配——分块"></a>2.1. Go内存分配——分块</h4><ul><li>目标:为对象在heap 上分配内存</li><li>提前将内存分块<ul><li>调用系统调用mma向OS申请一大块内存，例如4 MB；</li><li>先将内存划分成大块，例如8KB，称作mspan；</li><li>再将大块继续划分成特定大小的小块，用于对象分配；</li><li>noscan mspan:分配不包含指针的对象——GC不需要扫描；</li><li>scan mspan:分配包含指针的对象——GC需要扫描。</li></ul></li><li>对象分配:根据对象的大小，选择最合适的块返回</li></ul><h4 id="2-1-Go内存分配——缓存"><a href="#2-1-Go内存分配——缓存" class="headerlink" title="2.1. Go内存分配——缓存"></a>2.1. Go内存分配——缓存</h4><p>g——&gt;m——&gt;p——&gt;内存（Go gmp内存模型）</p><ul><li>TCMalloc: thread caching</li><li>每个p包含一个mcache用于快速分配，用于为绑定于p上的g分配对象</li><li>mcache管理一组mspan</li><li>当mcache中的ms pan分配完毕，向neentral申请带有未分配块的mspan</li><li>当mspan中没有分配的对象，mspan会被缓存在neentral中，而不是立刻释放并归还给Os</li></ul><h4 id="2-2-优化方案：Balanced-GC"><a href="#2-2-优化方案：Balanced-GC" class="headerlink" title="2.2.优化方案：Balanced GC"></a>2.2.优化方案：Balanced GC</h4><ul><li><p>每个g都绑定一大块内存（1 KB)，称作 goroutine allocation buffer (GAB)</p></li><li><p>GAB用于noscan类型的小对象分配:&lt;128 B</p></li><li><p>使用三个指针维护GAB: base, end, top</p></li><li><p>Bump pointer(指针碰撞)风格对象分配</p><ul><li>无须和其他分配请求互斥</li><li>分配动作简单高效</li></ul></li><li><p>GAB对于Go内存管理来说是一个对象</p></li><li><p>本质:将多个小对象的分配合并成一次达对象的分配</p></li><li><p>问题:GAB的对象分配方式会导致内存被延迟释放</p></li><li><p>方案:移动GAB中存活的对象</p><ul><li>当GAB总大小超过一定阈值时，将GAB中存活的对象复制到另外分配的GAB中</li><li>原先的GAB可以释放，避免内存泄漏</li><li>本质:用copying GC的算法管理小对象————<strong>根据对象的生命周期，使用不同的标记和清理策略</strong></li></ul></li></ul><h3 id="3-编译器和静态分析"><a href="#3-编译器和静态分析" class="headerlink" title="3.编译器和静态分析"></a>3.编译器和静态分析</h3><ul><li><p>静态分析:<strong>不执行程序代码</strong>，推导程序的行为，分析程序的性质。</p></li><li><p>控制流(Control flow):程序执行的流程</p></li><li><p>数据流(Data flow):数据在控制流上的传递</p></li><li><p>通过分析控制流和数据流,我们可以知道更多<strong>关于程序的性质</strong>(properties)</p></li><li><p>根据这些性质优化代码</p></li><li><p>过程内分析(Intra-procedural analysis)</p><ul><li><strong>仅在函数内部进行分析</strong></li></ul></li><li><p>过程间分析(Inter-procedural analysis)</p><ul><li><strong>考虑过程调用时参数传递和返回值的数据流和控制流</strong></li></ul></li><li><p>为什么过程间分析是个问题?</p><ul><li>需要通过<strong>数据流分析</strong>得知i的具体类型，才能知道i.foo()调用的是哪个foo（）</li><li>根据i的具体类型，<strong>产生了新的控制流</strong>，A.foo()，分析继续</li><li>过程间分析需要<strong>同时</strong>分析控制流和数据流——<strong>联合求解，比较复杂</strong></li></ul></li></ul><h3 id="4-编译器优化"><a href="#4-编译器优化" class="headerlink" title="4.编译器优化"></a>4.编译器优化</h3><ul><li><p>为什么做编译器优化</p><ul><li>用户无感知，重新编译即可获得性能收益</li><li>通用性优化</li></ul></li><li><p>现状</p><ul><li>采用的优化少</li><li>编译时间较短，没有进行较复杂的代码分析和优化</li></ul></li><li><p>编译优化的思路</p><ul><li>场景:面向后端长期执行任务</li><li>Tradeoff:用编译时间换取更高效的机器码</li></ul></li><li><p>优化方案</p><ul><li>函数内联</li><li>逃逸分析</li></ul></li></ul><h4 id="4-1函数内联-Inlining"><a href="#4-1函数内联-Inlining" class="headerlink" title="4.1函数内联(Inlining)"></a>4.1函数内联(Inlining)</h4><ul><li>内联:将被调用函数的函数体(callee)的副本替换到调用位置(caller)上，同时重写代码以反映参数的绑定</li><li>优点<ul><li>消除函数调用开销，例如传递参数、保存寄存器等</li><li>将过程间分析转化为过程内分析，帮助其他优化，例如逃逸分析</li></ul></li><li>缺点<ul><li>函数体变大，instruction cache (icache)不友好</li><li>编译生成的Go镜像变大</li></ul></li></ul><h4 id="4-2逃逸分析"><a href="#4-2逃逸分析" class="headerlink" title="4.2逃逸分析"></a>4.2逃逸分析</h4><ul><li><p>逃逸分析:分析代码中指针的动态作用域:指针在何处可以被访问</p></li><li><p>大致思路</p><ul><li>从对象分配处出发,沿着控制流,观察对象的数据流</li><li>若发现指针p在当前作用域s:<ul><li>作为参数传递给其他函数</li><li>传递给全局变量</li><li>传递给其他的goroutine</li><li>传递给已逃逸的指针指向的对象</li></ul></li><li>则指针p指向的对象逃逸出s，反之则没有逃逸出s</li></ul></li><li><p>Beast mode:函数内联拓展了函数边界，更多对象不逃逸</p></li><li><p>优化:未逃逸的对象可以在栈上分配</p><ul><li>对象在栈上分配和回收很快:移动sp</li><li>减少在heap 上的分配，降低GC负担</li></ul></li></ul><h3 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h3><ul><li>本节课程:高性能Go语言发行版优化与落地实践</li><li>性能优化<ul><li>自动内存管理</li><li>Go内存管理</li><li>编译器与静态分析</li><li>编译器优化</li></ul></li><li>实践<ul><li>Balanced GC优化对象分配</li><li>Beast mode提升代码性能</li></ul></li><li>分析问题的方法与解决问题的思路，不仅适用于Go 语言，其他语言的优化也同样适用</li></ul>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang学习&amp;高质量编程和性能调优 ｜ 青训营笔记02</title>
    <link href="/2022/05/16/Golang%E5%AD%A6%E4%B9%A0-%E9%AB%98%E8%B4%A8%E9%87%8F%E7%BC%96%E7%A8%8B%E5%92%8C%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98-%EF%BD%9C-%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B002/"/>
    <url>/2022/05/16/Golang%E5%AD%A6%E4%B9%A0-%E9%AB%98%E8%B4%A8%E9%87%8F%E7%BC%96%E7%A8%8B%E5%92%8C%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98-%EF%BD%9C-%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B002/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="高质量编程和性能调优"><a href="#高质量编程和性能调优" class="headerlink" title="高质量编程和性能调优"></a>高质量编程和性能调优</h2><h4 id="1-高质量编程通用原则"><a href="#1-高质量编程通用原则" class="headerlink" title="1.高质量编程通用原则"></a>1.高质量编程通用原则</h4><ul><li><p>简单性<br>消除”多余的复杂性”，以简单清晰的逻辑编写代码。<br>在实际工程项目中，复杂的程序逻辑会让人害怕重构和优化，因为无法明确预知调整造成的影响范围难以理解的逻辑，排查问题时也难以定位，不知道如何修复。</p></li><li><p>可读性<br>可读性很重要，因为代码是写给人看的，而不是机器。<br>在项目不断迭代的过程中，大部分工作是对已有功能的完善或扩展，很少会完全下线某个功能，对应的功能代码实际会生存很长时间。已上线的代码在其生命周期内会被不同的人阅读几十上百次。</p><p>听课时老师经常说的在课堂上不遵守纪律影响全班同学的时间，难以理解的代码会占用后续每一个程序员的时间。</p></li><li><p>生产力<br>编程在当前更多是团队合作，因此团队整体的工作效率是非常重要的一方面。<br>为了降低新成员上手项目代码的成本，Go语言甚至通过工具强制统一所有代码格式。<br>编码在整个项目开发链路中的一个节点，遵循规范，避免常见缺陷的代码能够降低后续联调、测试、验证、上线等各个节点的出现问题的概率，就算出现问题也能快速排查定位。</p></li></ul><h4 id="2-go语言编码规范"><a href="#2-go语言编码规范" class="headerlink" title="2.go语言编码规范"></a>2.go语言编码规范</h4><ul><li>gofmt工具</li></ul><p>Go语言官方提供的工具，能自动格式化Go 语言代码为官方统─风格常见IDE都支持方便的配置</p><ul><li>goimports工具</li></ul><p>也是Go语言官方提供的工具<br>实际等于gofmt加上依赖包管理<br>自动增删依赖的包引用、将依赖包按字母序排序并分类</p><h4 id="3-注释原则和Java大同小异！"><a href="#3-注释原则和Java大同小异！" class="headerlink" title="3.注释原则和Java大同小异！"></a>3.注释原则和Java大同小异！</h4><ul><li>代码是最好的注释。</li><li>注释应该提供代码未表达出的上下文信息。</li><li>简洁清晰的代码对流程注释没有要求，但是对于为什么这么做，代码的相关背景，可以通过注释补充，提供有效信息，在以后工作学习中可以慢体会。</li></ul><h4 id="4-命名规范和Java有所不同"><a href="#4-命名规范和Java有所不同" class="headerlink" title="4.命名规范和Java有所不同"></a>4.命名规范和Java有所不同</h4><ul><li><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/16/0c0de76214479774.png"></p><ul><li><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/16/e3d3e4d82fb0d54d.png"></p><ul><li><h5 id="package"><a href="#package" class="headerlink" title="package"></a>package</h5></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/05/16/a7925a4b1ccda576.png"></p><h4 id="5-错误和异常处理"><a href="#5-错误和异常处理" class="headerlink" title="5.错误和异常处理"></a>5.错误和异常处理</h4><ul><li><h5 id="简单错误"><a href="#简单错误" class="headerlink" title="简单错误"></a>简单错误</h5><ul><li>简单的错误指的是仅出现一次的错误，且在其他地方不需要捕获该错误</li><li>优先使用crrors.New来创建匿名变量来直接表示简单错误</li><li>如果有格式化的需求，使用fmt.Errorf</li></ul></li><li><h5 id="复杂错误"><a href="#复杂错误" class="headerlink" title="复杂错误"></a>复杂错误</h5></li></ul><p>对于复杂的错误，有时候并不能简单描述，应该如何处理?<br>错误的包装提供了一个error嵌套另一个error的能力，生成一个error的跟踪链，同时结合错误的判定方法来确认调用链中是否有关注的错误出现。这个能力的好处是每一层调用方可以补充自己对应的上下文，方便跟踪排查问题，确定问题的根本原因在哪里。<br>在fmt.Errorf中使用: %w关键字来将—个错误wrap至其错误链中。</p><ul><li><h5 id="错误判定"><a href="#错误判定" class="headerlink" title="错误判定"></a>错误判定</h5><ul><li>判定一个错误是否为特定错误，使用errors.Is。</li><li>不同于使用&#x3D;&#x3D;，使用该方法可以判定错误链上的所有错误是否含有特定的错误。</li><li>在错误链上获取特定种类的错误,使用crrors.As。</li></ul></li><li><p>在Go中，比错误更严重的就是panic，它的出现表示程序无法正常工作了，那么在使用时应该注意什么呢?<br>不建议在业务代码中使用panic。因为panic发生后，会向上传播至调用栈顶，如果当前goroutine中所有deferred函数都不包含recover就会造成整个程序崩溃。</p></li><li><p>若问题可以被屏蔽或解决，建议使用error代替panic。</p></li><li><p>特殊地，当程序启动阶段发生不可逆转的错误时，可以在init或main函数中使用panic。因为在这种情况下，服务启动起来也不会有意义比如示例是启动消息队列监听器的逻辑，在创建消费组失败的时候会Panicf，实际打印日志，然后抛出panic。</p></li><li><h5 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h5><ul><li>recover只能在被defer的函数中使用</li><li>嵌套无法生效</li><li>只在当前goroutine生效-</li><li>defer的语句是后进先出</li></ul></li></ul><h4 id="6-性能优化"><a href="#6-性能优化" class="headerlink" title="6.性能优化"></a>6.性能优化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//基准测试命令</span><br><span class="hljs-keyword">go</span> test -bench=.   <span class="hljs-comment">// . 代表测试所有文件，可以单独一个go文件也可以</span><br><span class="hljs-keyword">go</span> test -bench=. -benchmem <span class="hljs-comment">//-benchmem 表示也统计内存信息</span><br></code></pre></td></tr></table></figure><h4 id="7-性能优化工具pprof"><a href="#7-性能优化工具pprof" class="headerlink" title="7.性能优化工具pprof"></a>7.性能优化工具pprof</h4><h5 id="注意：浏览器不能正常显示需要安装graphviz组件"><a href="#注意：浏览器不能正常显示需要安装graphviz组件" class="headerlink" title="注意：浏览器不能正常显示需要安装graphviz组件"></a>注意：浏览器不能正常显示需要安装graphviz组件</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go">浏览器中打开http:<span class="hljs-comment">//localhost:6060/debug/pprof</span><br><br>allocs:内存分配情况<br>blocks:阻塞操作情况<br>cmdline:程序启动命令及<br>goroutine:当前所有<br>goroutine的堆栈信息<br>heap:堆上内存使用情况(同alloc)<br>mutex:锁竞争操作情况<br>profile: CPU占用情况<br>threadcreate:当前所有创建的系统线程的堆栈信息<br>trace:程序运行跟踪信息<br>    <br>使用命令：<span class="hljs-keyword">go</span> tool pprof <span class="hljs-string">&quot;http://localhost:6060/debug/pprof/profile?seconds=10&quot;</span> 启动采样数据<br><br>使用 topN 命令查看资源占用最高的函数<br><br>例如，输入top5，查看CPU占用最高的<span class="hljs-number">5</span>个函数这五列从左到右分别是:<br>Flat:当前函数的占用<br>Flat%:Flat占总量的比例<br>Sum%:上面所有行的Flat%总和<br>Cum (Cumulative):当前函数加上其调用函数的总占用<br>Cum%: Cum占总量的比例<br><br>输入list + 函数名称 查找这个函数，看看具体是哪里出了问题<br>List命令会根据后面给定的正则表达式查找代码，并按行展示出每一行的占用。<br><br>除了这两种视图之外，我们还可以输入web命令，生成一张调用关系图，默认会使用浏览器打开。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小厂实习面试记录-003</title>
    <link href="/2022/05/12/%E5%B0%8F%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95-003/"/>
    <url>/2022/05/12/%E5%B0%8F%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95-003/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-单例模式创建方式"><a href="#1-单例模式创建方式" class="headerlink" title="1.单例模式创建方式"></a>1.单例模式创建方式</h3><p>1.饿汉式（静态常量）【可用】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton INSTANCE=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br> <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-keyword">return</span> INSTANCE;<br> &#125;<br> &#125;<br><br>优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。<br>缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。<br></code></pre></td></tr></table></figure><p>2.饿汉式（静态代码块）【可用】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-keyword">static</span>&#123;<br>         instance=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br>这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，<br>也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。<br></code></pre></td></tr></table></figure><p>3.懒汉式（线程不安全）【不可用】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton&#123;<br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singletons singleton;<br> <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-keyword">if</span>(singleton==<span class="hljs-literal">null</span>)&#123;<br>         singleton=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>     &#125;<br>     <span class="hljs-keyword">return</span> singleton;<br> &#125;<br> &#125;<br> 这种写法起到了LazyLoading的效果，但是只能在单线程下使用。如果在多线程下，<br> 一个线程进入了<span class="hljs-keyword">if</span> (singleton ==<span class="hljs-literal">null</span>)判断语句块，还未来得及往下执行，<br> 另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。<br></code></pre></td></tr></table></figure><p>4.懒汉式（线程安全，同步方法）【不推荐用】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton singleton;<br>     <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>          <span class="hljs-keyword">if</span>(singleton==<span class="hljs-literal">null</span>)&#123;<br>             singleton=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>           &#125;<br>           <span class="hljs-keyword">return</span> singleton;<br>     &#125;<br>&#125;<br>解决上面第三种实现方式的线程不安全问题，做个线程同步就可以了，于是就对getInstance()方法进行了线程同步。<br>缺点：效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。<br>而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接<span class="hljs-keyword">return</span>就行了。<br>方法进行同步效率太低要改进。<br></code></pre></td></tr></table></figure><p>5.懒汉式（线程安全，同步代码块）【不可用】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton singleton;<br>     <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>          <span class="hljs-keyword">if</span>(singleton==<span class="hljs-literal">null</span>)&#123;<br>              <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>                  singleton=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>              &#125;<br>           &#125;<br>           <span class="hljs-keyword">return</span> singleton;<br>     &#125;<br>&#125;<br>由于第四种实现方式同步效率太低，所以摒弃同步方法，改为同步产生实例化的的代码块。<br>但是这种同步并不能起到线程同步的作用。跟第<span class="hljs-number">3</span>种实现方式遇到的情形一致，假如一个线程<br>进入了<span class="hljs-keyword">if</span> (singleton ==<span class="hljs-literal">null</span>)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，<br>这时便会产生多个实例。<br></code></pre></td></tr></table></figure><p>6.双重检查【推荐使用】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton singleton;<br>     <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>          <span class="hljs-keyword">if</span>(singleton==<span class="hljs-literal">null</span>)&#123;<br>              <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>                     <span class="hljs-keyword">if</span>(singleton==<span class="hljs-literal">null</span>)&#123;<br>                          singleton=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>                      &#125;<br>              &#125;<br>           &#125;<br>           <span class="hljs-keyword">return</span> singleton;<br>     &#125;<br>&#125;<br>Double-Check概念对于多线程开发者来说不会陌生，如代码中所示，我们进行了两次<span class="hljs-keyword">if</span> (singleton ==<span class="hljs-literal">null</span>)检查，这样就可以保证线程安全了。这样，实例化代码只用执行一次，后面再次访问时，判断<span class="hljs-keyword">if</span>(singleton == <span class="hljs-literal">null</span>)，直接<span class="hljs-keyword">return</span>实例化对象。<br>优点：线程安全；延迟加载；效率较高。<br></code></pre></td></tr></table></figure><p>7.静态内部类【推荐使用】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>     <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonInstance</span>&#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> Singleton INSTANCE=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>     &#125;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>         <span class="hljs-keyword">return</span> SingletonInstance.INSTANCE;<br>     &#125;<br>&#125;<br>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。<br>不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。<br><br>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。<br><br>优点：避免了线程不安全，延迟加载，效率高。<br></code></pre></td></tr></table></figure><p>8.枚举【推荐使用】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span>&#123;<br>       INSTANCE;<br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>           <span class="hljs-keyword">return</span> INSTANCE;<br>       &#125;<br>&#125;<br>借助JDK1<span class="hljs-number">.5</span>中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。<br></code></pre></td></tr></table></figure><h3 id="2-集合概述"><a href="#2-集合概述" class="headerlink" title="2.集合概述"></a>2.集合概述</h3><p>Java集合类主要由两个接口<strong>Collection</strong>和<strong>Map</strong>派生出来的，Collection有三个子接口：List、Set、Queue。</p><p>Java集合框架图如下：</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/12/7826b38c0b95257a.png"></p><p><img src="https://s3.bmp.ovh/imgs/2022/05/12/510b34f190bdeeb6.png"></p><p>List代表了有序可重复集合，可直接根据元素的索引来访问；</p><p>Set代表无序不可重复集合，只能根据元素本身来访问；</p><p>Queue是队列集合；</p><p>Map代表的是存储key-value对的集合，可根据元素的key来访问value。</p><p>集合体系中常用的实现类有<code>ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap</code>等实现类。</p><h3 id="3-线程创建方式"><a href="#3-线程创建方式" class="headerlink" title="3.线程创建方式"></a>3.线程创建方式</h3><ul><li>通过扩展<code>Thread</code>类来创建多线程</li><li>通过实现<code>Runnable</code>接口来创建多线程</li><li>实现<code>Callable</code>接口，通过<code>FutureTask</code>接口创建线程。</li><li>使用<code>Executor</code>框架来创建线程池。</li></ul><h3 id="4-异常概述"><a href="#4-异常概述" class="headerlink" title="4.异常概述"></a>4.异常概述</h3><h4 id="常见的Exception有哪些？"><a href="#常见的Exception有哪些？" class="headerlink" title="常见的Exception有哪些？"></a>常见的Exception有哪些？</h4><hr><p>常见的RuntimeException：</p><ol><li><code>ClassCastException</code> &#x2F;&#x2F;类型转换异常</li><li><code>IndexOutOfBoundsException</code> &#x2F;&#x2F;数组越界异常</li><li><code>NullPointerException</code> &#x2F;&#x2F;空指针</li><li><code>ArrayStoreException</code> &#x2F;&#x2F;数组存储异常</li><li><code>NumberFormatException</code> &#x2F;&#x2F;数字格式化异常</li><li><code>ArithmeticException</code> &#x2F;&#x2F;数学运算异常</li></ol><p>unchecked Exception：</p><ol><li><code>NoSuchFieldException</code> &#x2F;&#x2F;反射异常，没有对应的字段</li><li><code>ClassNotFoundException</code> &#x2F;&#x2F;类没有找到异常</li><li><code>IllegalAccessException</code> &#x2F;&#x2F;安全权限异常，可能是反射时调用了private方法</li></ol><h4 id="Error和Exception的区别？"><a href="#Error和Exception的区别？" class="headerlink" title="Error和Exception的区别？"></a>Error和Exception的区别？</h4><hr><p><strong>Error</strong>：JVM 无法解决的严重问题，如栈溢出<code>StackOverflowError</code>、内存溢出<code>OOM</code>等。程序无法处理的错误。</p><p><strong>Exception</strong>：其它因编程错误或偶然的外在因素导致的一般性问题。可以在代码中进行处理。如：空指针异常、数组下标越界等。</p><h4 id="运行时异常和非运行时异常（checked）的区别？"><a href="#运行时异常和非运行时异常（checked）的区别？" class="headerlink" title="运行时异常和非运行时异常（checked）的区别？"></a>运行时异常和非运行时异常（checked）的区别？</h4><hr><p><code>unchecked exception</code>包括<code>RuntimeException</code>和<code>Error</code>类，其他所有异常称为检查（checked）异常。</p><ol><li><code>RuntimeException</code>由程序错误导致，应该修正程序避免这类异常发生。</li><li><code>checked Exception</code>由具体的环境（读取的文件不存在或文件为空或sql异常）导致的异常。必须进行处理，不然编译不通过，可以catch或者throws。</li></ol><h3 id="5-SpringMVC的RequestMapping参数"><a href="#5-SpringMVC的RequestMapping参数" class="headerlink" title="5.SpringMVC的RequestMapping参数"></a>5.SpringMVC的RequestMapping参数</h3><ul><li><h4 id="value-代表实际的url"><a href="#value-代表实际的url" class="headerlink" title="value   代表实际的url"></a>value   代表实际的url</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span>&#123;<br>        <span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">&quot;/hello&quot;</span>)<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="param-指定某一种参数名类型，当请求数据中包含该名称的请求参数时，才能进行相应，否则拒绝此次请求。"><a href="#param-指定某一种参数名类型，当请求数据中包含该名称的请求参数时，才能进行相应，否则拒绝此次请求。" class="headerlink" title="param  指定某一种参数名类型，当请求数据中包含该名称的请求参数时，才能进行相应，否则拒绝此次请求。"></a>param  指定某一种参数名类型，当请求数据中包含该名称的请求参数时，才能进行相应，否则拒绝此次请求。</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/findUser&quot;, param = &quot;username&quot;)</span><br></code></pre></td></tr></table></figure><ul><li><h4 id="method-请求方法，支持GET，POST，PUT，DELETE"><a href="#method-请求方法，支持GET，POST，PUT，DELETE" class="headerlink" title="method   请求方法，支持GET，POST，PUT，DELETE"></a>method   请求方法，支持GET，POST，PUT，DELETE</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">&quot;/hello&quot;</span>, method = RequestMethod.GET)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>         <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="consumes-接受的Content-Type类型"><a href="#consumes-接受的Content-Type类型" class="headerlink" title="consumes    接受的Content-Type类型"></a>consumes    接受的Content-Type类型</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">&quot;/hello&quot;</span>, consumes = <span class="hljs-string">&quot;application/json&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>       <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="produces-返回的Content-Type"><a href="#produces-返回的Content-Type" class="headerlink" title="produces    返回的Content-Type"></a>produces    返回的Content-Type</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">&quot;/hello&quot;</span>, produces = <span class="hljs-string">&quot;application/json&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="headers-用于指定某一种请求头类型。"><a href="#headers-用于指定某一种请求头类型。" class="headerlink" title="headers   用于指定某一种请求头类型。"></a>headers   用于指定某一种请求头类型。</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">&quot;/hello&quot;</span>, headers = <span class="hljs-string">&quot;Content-Type:text/html;charset=UTF-8&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-Spring事务和隔离级别"><a href="#6-Spring事务和隔离级别" class="headerlink" title="6.Spring事务和隔离级别"></a>6.Spring事务和隔离级别</h3><h4 id="Spring-事务实现方式有哪些？"><a href="#Spring-事务实现方式有哪些？" class="headerlink" title="Spring 事务实现方式有哪些？"></a>Spring 事务实现方式有哪些？</h4><hr><p>事务就是一系列的操作原子执行。Spring事务机制主要包括声明式事务和编程式事务。</p><ul><li><strong>编程式事务</strong>：通过编程的方式管理事务，这种方式带来了很大的灵活性，但很难维护。</li><li><strong>声明式事务</strong>：将事务管理代码从业务方法中分离出来，通过aop进行封装。Spring声明式事务使得我们无需要去处理获得连接、关闭连接、事务提交和回滚等这些操作。使用 <code>@Transactional</code> 注解开启声明式事务。</li></ul><p><code>@Transactional</code>相关属性如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>可选的限定描述符，指定使用的事务管理器</td></tr><tr><td>propagation</td><td>enum: Propagation</td><td>可选的事务传播行为设置</td></tr><tr><td>isolation</td><td>enum: Isolation</td><td>可选的事务隔离级别设置</td></tr><tr><td>readOnly</td><td>boolean</td><td>读写或只读事务，默认读写</td></tr><tr><td>timeout</td><td>int (in seconds granularity)</td><td>事务超时时间设置</td></tr><tr><td>rollbackFor</td><td>Class对象数组，必须继承自Throwable</td><td>导致事务回滚的异常类数组</td></tr><tr><td>rollbackForClassName</td><td>类名数组，必须继承自Throwable</td><td>导致事务回滚的异常类名字数组</td></tr><tr><td>noRollbackFor</td><td>Class对象数组，必须继承自Throwable</td><td>不会导致事务回滚的异常类数组</td></tr><tr><td>noRollbackForClassName</td><td>类名数组，必须继承自Throwable</td><td>不会导致事务回滚的异常类名字数组</td></tr></tbody></table><h4 id="有哪些事务传播行为？"><a href="#有哪些事务传播行为？" class="headerlink" title="有哪些事务传播行为？"></a>有哪些事务传播行为？</h4><hr><p>在TransactionDefinition接口中定义了七个事务传播行为：</p><ol><li><code>PROPAGATION_REQUIRED</code>如果存在一个事务，则支持当前事务。如果没有事务则开启一个新的事务。如果嵌套调用的两个方法都加了事务注解，并且运行在相同线程中，则这两个方法使用相同的事务中。如果运行在不同线程中，则会开启新的事务。</li><li><code>PROPAGATION_SUPPORTS</code> 如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行。</li><li><code>PROPAGATION_MANDATORY</code> 如果已经存在一个事务，支持当前事务。如果不存在事务，则抛出异常<code>IllegalTransactionStateException</code>。</li><li><code>PROPAGATION_REQUIRES_NEW</code> 总是开启一个新的事务。需要使用JtaTransactionManager作为事务管理器。</li><li><code>PROPAGATION_NOT_SUPPORTED</code> 总是非事务地执行，并挂起任何存在的事务。需要使用JtaTransactionManager作为事务管理器。</li><li><code>PROPAGATION_NEVER</code> 总是非事务地执行，如果存在一个活动事务，则抛出异常。</li><li><code>PROPAGATION_NESTED</code> 如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务, 则按PROPAGATION_REQUIRED 属性执行。</li></ol><p><strong>PROPAGATION_NESTED 与PROPAGATION_REQUIRES_NEW的区别:</strong></p><p>使用<code>PROPAGATION_REQUIRES_NEW</code>时，内层事务与外层事务是两个独立的事务。一旦内层事务进行了提交后，外层事务不能对其进行回滚。两个事务互不影响。</p><p>使用<code>PROPAGATION_NESTED</code>时，外层事务的回滚可以引起内层事务的回滚。而内层事务的异常并不会导致外层事务的回滚，它是一个真正的嵌套事务。</p><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><hr><table><thead><tr><th align="left"><strong>名称</strong></th><th><strong>结果</strong></th><th align="center">脏读</th><th align="center"><strong>不可重复读</strong></th><th align="center"><strong>幻读</strong></th></tr></thead><tbody><tr><td align="left">Read UnCommitted(读未提交)</td><td>什么都不解决</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">Read Committed(读已提交)</td><td>解决了脏读的问题</td><td align="center">–</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">Repeatable Read(可重复读)</td><td>(mysql的默认级别)解决了不可重复读</td><td align="center">–</td><td align="center">–</td><td align="center">√</td></tr><tr><td align="left">Serializable(序列化)</td><td>解决所有问题</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><ul><li><p>READ UNCOMMITTED（读未提交数据）：允许事务读取未被其他事务提交的变更数据，会出现脏读、不可重复读和幻读问题。</p></li><li><p>READ COMMITTED（读已提交数据）：只允许事务读取已经被其他事务提交的变更数据，可避免脏读，仍会出现不可重复读和幻读问题。</p></li><li><p>REPEATABLE READ（可重复读）：确保事务可以多次从一个字段中读取相同的值，在此事务持续期间，禁止其他事务对此字段的更新，可以避免脏读和不可重复读，仍会出现幻读问题。</p></li><li><p>SERIALIZABLE（序列化）：确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入、更新和删除操作，可避免所有并发问题，但性能非常低。</p><h4 id="Spring隔离级别"><a href="#Spring隔离级别" class="headerlink" title="Spring隔离级别"></a>Spring隔离级别</h4><hr></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">ISOLATION_DEFAULT</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;  <span class="hljs-comment">// 默认采用数据库的隔离级</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ISOLATION_READ_UNCOMMITTED</span> <span class="hljs-operator">=</span> Connection.TRANSACTION_READ_UNCOMMITTED;<span class="hljs-comment">//读未提交</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ISOLATION_READ_COMMITTED</span> <span class="hljs-operator">=</span> Connection.TRANSACTION_READ_COMMITTED; <span class="hljs-comment">//读已提交</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ISOLATION_REPEATABLE_READ</span> <span class="hljs-operator">=</span> Connection.TRANSACTION_REPEATABLE_READ; <span class="hljs-comment">//可重复度</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ISOLATION_SERIALIZABLE</span> <span class="hljs-operator">=</span> Connection.TRANSACTION_SERIALIZABLE;   <span class="hljs-comment">//序列化</span><br></code></pre></td></tr></table></figure><h3 id="7-强引用、软引用、弱引用、虚引用是什么，有什么区别？"><a href="#7-强引用、软引用、弱引用、虚引用是什么，有什么区别？" class="headerlink" title="7.强引用、软引用、弱引用、虚引用是什么，有什么区别？"></a>7.强引用、软引用、弱引用、虚引用是什么，有什么区别？</h3><p><strong>强引用</strong>：在程序中普遍存在的引用赋值，类似<code>Object obj = new Object()</code>这种引用关系。只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p><p><strong>软引用</strong>：如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//软引用</span><br>SoftReference&lt;<span class="hljs-keyword">String</span>&gt; softRef = <span class="hljs-keyword">new</span> <span class="hljs-type">SoftReference</span>&lt;<span class="hljs-keyword">String</span>&gt;(str);<br></code></pre></td></tr></table></figure><p><strong>弱引用</strong>：在进行垃圾回收时，不管当前内存空间足够与否，都会回收只具有弱引用的对象。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//弱引用</span><br>WeakReference&lt;<span class="hljs-keyword">String</span>&gt; weakRef = <span class="hljs-keyword">new</span> <span class="hljs-type">WeakReference</span>&lt;<span class="hljs-keyword">String</span>&gt;(str);<br></code></pre></td></tr></table></figure><p><strong>虚引用</strong>：虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。<strong>虚引用主要是为了能在对象被收集器回收时收到一个系统通知</strong>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>突然打来的电话面试，都不知道什么公司，虽然模模糊糊，也努力回答了，不知结果！</li><li>但是学习还是得继续！</li><li>加油！</li></ul>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>实习</tag>
      
      <tag>大学</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang语言初学学习记录和总结 ｜ 青训营笔记01</title>
    <link href="/2022/05/08/Golang%E8%AF%AD%E8%A8%80%E5%88%9D%E5%AD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E5%92%8C%E6%80%BB%E7%BB%93-%EF%BD%9C-%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B001/"/>
    <url>/2022/05/08/Golang%E8%AF%AD%E8%A8%80%E5%88%9D%E5%AD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E5%92%8C%E6%80%BB%E7%BB%93-%EF%BD%9C-%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B001/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Golang语言初学学习记录和总结"><a href="#Golang语言初学学习记录和总结" class="headerlink" title="Golang语言初学学习记录和总结"></a>Golang语言初学学习记录和总结</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h4 id="环境配置篇"><a href="#环境配置篇" class="headerlink" title="环境配置篇"></a>环境配置篇</h4><h3 id="使用IDEA编写Golang语言："><a href="#使用IDEA编写Golang语言：" class="headerlink" title="使用IDEA编写Golang语言："></a>使用IDEA编写Golang语言：</h3><ol><li><p><a href="https://golang.org/dl/">https://golang.org/dl/</a>  点击链接去官网下载golang安装包，下载安装即可，类似于jdk。</p></li><li><p>配置系统环境变量GOROOT为安装目录，Path配置bin目录地址，类似于jdk。</p></li><li><p>IDEA下载Go插件，重启。</p></li><li><p>配置GOROOT即可使用。</p></li></ol><h3 id="运行go文件："><a href="#运行go文件：" class="headerlink" title="运行go文件："></a>运行go文件：</h3><ol><li>go run + go文件路径地址。</li><li>先go build + go文件路径进行编译 再 .&#x2F;对应编译生成的文件即可！</li></ol><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;initial&quot;</span><br><br><span class="hljs-keyword">var</span> b, c <span class="hljs-type">int</span> = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><br><span class="hljs-keyword">var</span> d = <span class="hljs-literal">true</span><br><br>f := <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>go语言是—门强类型语言，每—个变量都有它自己的变量类型。常见的变量类型包括字符串整数浮点型、布尔型等。go 语言的字符串是内置类型，可以直接通过加号拼接，也能够直接用等于号去比较两个字符串。在go语言里面，大部分运算符的使用和优先级都和C或者C++类似，这里就不再概述。<br>下面讲述go语言里面的变量的声明，在go语言里面变量的声明有两种方式，一种是通过var namestig &#x3D;””这种方式来声明变量，声明变量的时候，一般会自动去推导变量的类型。另—种声明变量的方式是:使用变量冒号:&#x3D;等于值。下面来讲说常量。常量的话就是把var改成const，值在一提的是go语言里面的常量，它没有确定的类型，会根据使用的上下文来自动确定类型。</p><h3 id="循环只有for循环，if不用加（），Switch不用break"><a href="#循环只有for循环，if不用加（），Switch不用break" class="headerlink" title="循环只有for循环，if不用加（），Switch不用break"></a>循环只有for循环，if不用加（），Switch不用break</h3><h3 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> a [<span class="hljs-number">5</span>]<span class="hljs-type">int</span><br><br>b := [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="切片要牢记，类似Python"><a href="#切片要牢记，类似Python" class="headerlink" title="切片要牢记，类似Python"></a>切片要牢记，类似Python</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">3</span>)<br>s[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;a&quot;</span><br>s[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;b&quot;</span><br>s[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;c&quot;</span><br>fmt.Println(<span class="hljs-string">&quot;get:&quot;</span>, s[<span class="hljs-number">2</span>])   <span class="hljs-comment">// c</span><br>fmt.Println(<span class="hljs-string">&quot;len:&quot;</span>, <span class="hljs-built_in">len</span>(s)) <span class="hljs-comment">// 3</span><br><br>s = <span class="hljs-built_in">append</span>(s, <span class="hljs-string">&quot;d&quot;</span>)<br>s = <span class="hljs-built_in">append</span>(s, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>)<br>fmt.Println(s) <span class="hljs-comment">// [a b c d e f]</span><br></code></pre></td></tr></table></figure><h3 id="range使用"><a href="#range使用" class="headerlink" title="range使用"></a>range使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">nums := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i, num := <span class="hljs-keyword">range</span> nums &#123;<br>   sum += num<br>   <span class="hljs-keyword">if</span> num == <span class="hljs-number">2</span> &#123;<br>      fmt.Println(<span class="hljs-string">&quot;index:&quot;</span>, i, <span class="hljs-string">&quot;num:&quot;</span>, num) <span class="hljs-comment">// index: 0 num: 2</span><br>   &#125;<br>&#125;<br>fmt.Println(sum) <span class="hljs-comment">// 9</span><br></code></pre></td></tr></table></figure><p>用来更灵活的遍历集合元素</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>返回值在后面，先变量名再变量类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>   <span class="hljs-keyword">return</span> a + b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add2</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>   <span class="hljs-keyword">return</span> a + b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">exists</span><span class="hljs-params">(m <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>, k <span class="hljs-type">string</span>)</span></span> (v <span class="hljs-type">string</span>, ok <span class="hljs-type">bool</span>) &#123;<br>   v, ok = m[k]<br>   <span class="hljs-keyword">return</span> v, ok<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add2ptr</span><span class="hljs-params">(n *<span class="hljs-type">int</span>)</span></span> &#123;<br>   *n += <span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用指针对原数据进行修改，类似于C语言</p><h3 id="结构体方法"><a href="#结构体方法" class="headerlink" title="结构体方法"></a>结构体方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u user)</span></span> checkPassword(password <span class="hljs-type">string</span>) <span class="hljs-type">bool</span> &#123;<br>   u.password = <span class="hljs-string">&quot;zty&quot;</span><br>   <span class="hljs-keyword">return</span> u.password == password<br>&#125;<br></code></pre></td></tr></table></figure><p>在方法名前面添加（结构体名称 结构体类型）即可，可以通过结构体调用该方法。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findUser</span><span class="hljs-params">(users []user, name <span class="hljs-type">string</span>)</span></span> (v *user, err <span class="hljs-type">error</span>) &#123;<br>   <span class="hljs-keyword">for</span> _, u := <span class="hljs-keyword">range</span> users &#123;<br>      <span class="hljs-keyword">if</span> u.name == name &#123;<br>         <span class="hljs-keyword">return</span> &amp;u, <span class="hljs-literal">nil</span><br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;not found&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>通过errors包下面的error进行处理。可以通过方法返回值返回错误。</p><h3 id="strings常用方法"><a href="#strings常用方法" class="headerlink" title="strings常用方法"></a>strings常用方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-string">&quot;hello&quot;</span><br>fmt.Println(strings.Contains(a, <span class="hljs-string">&quot;ll&quot;</span>))                <span class="hljs-comment">// true</span><br>fmt.Println(strings.Count(a, <span class="hljs-string">&quot;l&quot;</span>))                    <span class="hljs-comment">// 2</span><br>fmt.Println(strings.HasPrefix(a, <span class="hljs-string">&quot;he&quot;</span>))               <span class="hljs-comment">// true</span><br>fmt.Println(strings.HasSuffix(a, <span class="hljs-string">&quot;llo&quot;</span>))              <span class="hljs-comment">// true</span><br>fmt.Println(strings.Index(a, <span class="hljs-string">&quot;ll&quot;</span>))                   <span class="hljs-comment">// 2</span><br>fmt.Println(strings.Join([]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;he&quot;</span>, <span class="hljs-string">&quot;llo&quot;</span>&#125;, <span class="hljs-string">&quot;-&quot;</span>)) <span class="hljs-comment">// he-llo</span><br>fmt.Println(strings.Repeat(a, <span class="hljs-number">2</span>))                     <span class="hljs-comment">// hellohello</span><br>fmt.Println(strings.Replace(a, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">-1</span>))         <span class="hljs-comment">// hEllo</span><br>fmt.Println(strings.Split(<span class="hljs-string">&quot;a-b-c&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>))              <span class="hljs-comment">// [a b c]</span><br>fmt.Println(strings.ToLower(a))                       <span class="hljs-comment">// hello</span><br>fmt.Println(strings.ToUpper(a))                       <span class="hljs-comment">// HELLO</span><br>fmt.Println(<span class="hljs-built_in">len</span>(a))                                   <span class="hljs-comment">// 5</span><br>b := <span class="hljs-string">&quot;你好&quot;</span><br>fmt.Println(<span class="hljs-built_in">len</span>(b)) <span class="hljs-comment">// 6  一个中文可能对应多个字符</span><br></code></pre></td></tr></table></figure><h3 id="time包可以获取时间以及常见时间操作"><a href="#time包可以获取时间以及常见时间操作" class="headerlink" title="time包可以获取时间以及常见时间操作"></a>time包可以获取时间以及常见时间操作</h3><h3 id="strconv包可以进行数字和字符串转换"><a href="#strconv包可以进行数字和字符串转换" class="headerlink" title="strconv包可以进行数字和字符串转换"></a>strconv包可以进行数字和字符串转换</h3><h3 id="。。。。。。。"><a href="#。。。。。。。" class="headerlink" title="。。。。。。。"></a>。。。。。。。</h3><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>协程</p><h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><p>导入sync包，使用可以使用锁功能</p><p>协程创建：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(j <span class="hljs-type">int</span>)</span></span> &#123;<span class="hljs-comment">// go必不可少</span><br>   <span class="hljs-keyword">defer</span> wg.Done()<br>   hello(j)<br>&#125;(i)<span class="hljs-comment">//协程名称</span><br></code></pre></td></tr></table></figure><h3 id="CSP（Communicating-Sequential-Processes）"><a href="#CSP（Communicating-Sequential-Processes）" class="headerlink" title="CSP（Communicating Sequential Processes）"></a>CSP（Communicating Sequential Processes）</h3><p>通过通信共享内存。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74e23a4d23ac4e569a6c79ea858b4b44~tplv-k3u1fbpfcp-watermark.image"></p><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>创建信道，给信道赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">src := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<span class="hljs-comment">//无缓冲信道</span><br>dest := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">3</span>)<span class="hljs-comment">//有缓冲信道</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(src)<br>   <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>      src &lt;- i<br>   &#125;<br>&#125;()<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(dest)<br>   <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> src &#123;<br>      dest &lt;- i * i<br>   &#125;<br>&#125;()<br></code></pre></td></tr></table></figure><h3 id="并发安全Lock"><a href="#并发安全Lock" class="headerlink" title="并发安全Lock"></a>并发安全Lock</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">lock:=sync.Mutex&#123;<span class="hljs-comment">//语句&#125;</span><br>lock.Lock()<br>lock.Unlock()<br></code></pre></td></tr></table></figure><h3 id="WaitGroup-类似于Java的CountDown和Semaphore"><a href="#WaitGroup-类似于Java的CountDown和Semaphore" class="headerlink" title="WaitGroup 类似于Java的CountDown和Semaphore"></a>WaitGroup 类似于Java的CountDown和Semaphore</h3><p>计数器<br>开启协程+1;执行结束-1;主协程阻塞直到计数器为0。</p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>GOPATH-&gt;Go Vender-&gt;GO Module</p><p>依赖管理三要素<br>1.配置文件，描述依赖     go.mod<br>2.中心仓库管理依赖库     Proxy<br>3.本地工具     go get&#x2F;mod</p><h3 id="go-mod"><a href="#go-mod" class="headerlink" title="go mod"></a>go mod</h3><p>init  初始化<br>download 下载模块到本地缓存<br>tidy 增加需要的依赖，删除不需要的依赖</p><h3 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h3><p>go get 项目路径&#x2F;pkg  +  后缀</p><ol><li>@update   默认下载最新版</li><li>@none 删除依赖</li><li>@v1.1.2 tag版本，语义版本</li><li>@23dfdd5   特定的commit</li><li>@master   分支的最新commit</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>所有测试文件以_test.go结尾</li><li>func TestXxx(*testing.T)</li><li>初始化逻辑放到TestMain中</li></ul><ol><li>单元测试assert包</li><li>加–cover得到测试代码覆盖率</li><li>Mock设置打桩函数，可以替换内置函数达到不用频繁更换测试数据的目的。</li><li>测试基准，测试服务器运行速率</li><li>其余和Java测试大同小异。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>需要多加练习!</li><li>熟悉各种语法的使用！</li><li>认真听课！</li><li>好好睡觉！</li></ul>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小厂实习面试记录-002</title>
    <link href="/2022/05/08/%E5%B0%8F%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95-002/"/>
    <url>/2022/05/08/%E5%B0%8F%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95-002/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-二叉树的最小深度"><a href="#1-二叉树的最小深度" class="headerlink" title="1.二叉树的最小深度"></a>1.<a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">二叉树的最小深度</a></h3><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> minDepth(root.left);<span class="hljs-comment">//获取左子树深度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> minDepth(root.right);<span class="hljs-comment">//获取右子树深度</span><br>        <span class="hljs-keyword">if</span>(left==<span class="hljs-number">0</span>||right==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//左右没有子节点不能计算深度</span><br>            <span class="hljs-keyword">return</span> left==<span class="hljs-number">0</span>?right+<span class="hljs-number">1</span>:left+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Math.min(left,right)+<span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-有效的括号"><a href="#2-有效的括号" class="headerlink" title="2.有效的括号"></a>2.<a href="https://leetcode-cn.com/problems/valid-parentheses/">有效的括号</a></h3><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String s)</span> &#123;<br>        Stack&lt;Character&gt; stk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(i);<br>            <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;[&#x27;</span>||c==<span class="hljs-string">&#x27;(&#x27;</span>||c==<span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>                <span class="hljs-keyword">switch</span>(c)&#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>: stk.push(<span class="hljs-string">&#x27;]&#x27;</span>);<span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>: stk.push(<span class="hljs-string">&#x27;)&#x27;</span>);<span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#123;&#x27;</span>: stk.push(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(stk.size()==<span class="hljs-number">0</span>||c!=stk.pop())&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stk.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-Integer类了解"><a href="#3-Integer类了解" class="headerlink" title="3.Integer类了解"></a>3.Integer类了解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> main.test02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: main.test02.Test04.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Copyright</span> swpu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: zty-f</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022-05-08 10:37</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: Integer测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//Integer有缓存池  -128~127  可以通过反射调节</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<span class="hljs-comment">//会调用 调⽤Integer.valueOf(12)。而从Integer的valueOf()源码可以看到，这里的实现并不是简单的new Integer，而是用IntegerCache做一个cache。</span><br>        System.out.println(a==b);<span class="hljs-comment">//true</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">999</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">999</span>;<br>        System.out.println(c==d);<span class="hljs-comment">//false</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> -<span class="hljs-number">12</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> -<span class="hljs-number">12</span>;<br>        System.out.println(e==f);<span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-对象交换输出判断"><a href="#4-对象交换输出判断" class="headerlink" title="4.对象交换输出判断"></a>4.对象交换输出判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> main.test02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: main.test02.Test05.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Copyright</span> swpu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: zty-f</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022-05-08 10:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 对象交换输出测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//打印结果如下</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">X:xiaoli</span><br><span class="hljs-comment">Y:xiaoming</span><br><span class="hljs-comment">xiaoming:xiaoming</span><br><span class="hljs-comment">xiaoli:xiaoli</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">People</span> <span class="hljs-variable">xiaoming</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;xiaoming&quot;</span>,<span class="hljs-number">18</span>);<br>        <span class="hljs-type">People</span> <span class="hljs-variable">xiaoli</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;xiaoli&quot;</span>,<span class="hljs-number">18</span>);<br>        swap(xiaoming,xiaoli);<br>        System.out.println(<span class="hljs-string">&quot;xiaoming:&quot;</span>+xiaoming.getName());<br>        System.out.println(<span class="hljs-string">&quot;xiaoli:&quot;</span>+xiaoli.getName());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(People x,People y)</span>&#123;<span class="hljs-comment">//传入的只是引用副本，交换不会对原引用产生变化，可以通过set方法改变对象实体值</span><br>        <span class="hljs-type">People</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> x;<br>        x = y;<br>        y = temp;<br>        System.out.println(<span class="hljs-string">&quot;X:&quot;</span>+x.getName());<br>        System.out.println(<span class="hljs-string">&quot;Y:&quot;</span>+y.getName());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-Error和Exception的区别"><a href="#5-Error和Exception的区别" class="headerlink" title="5.Error和Exception的区别"></a>5.Error和Exception的区别</h3><p><img src="https://s3.bmp.ovh/imgs/2022/05/08/454a8d36e5c44b89.png"></p><p><strong>Error</strong>：JVM 无法解决的严重问题，如栈溢出<code>StackOverflowError</code>、内存溢出<code>OOM</code>等。程序无法处理的错误。</p><p><strong>Exception</strong>：其它因编程错误或偶然的外在因素导致的一般性问题。可以在代码中进行处理。如：空指针异常、数组下标越界等。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>实习</tag>
      
      <tag>大学</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小厂实习面试记录-001</title>
    <link href="/2022/05/06/%E5%B0%8F%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95-001/"/>
    <url>/2022/05/06/%E5%B0%8F%E5%8E%82%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95-001/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-springmvc运行流程"><a href="#1-springmvc运行流程" class="headerlink" title="1.springmvc运行流程"></a>1.springmvc运行流程</h3><p>Spring MVC的处理过程：</p><ol><li>DispatcherServlet 接收用户的请求。</li><li>找到用于处理request的 handler 和 Interceptors，构造成 HandlerExecutionChain 执行链。</li><li>找到 handler 相对应的 HandlerAdapter。</li><li>执行所有注册拦截器的preHandler方法。</li><li>调用 HandlerAdapter 的 handle() 方法处理请求，返回 ModelAndView。</li><li>倒序执行所有注册拦截器的postHandler方法。</li><li>请求视图解析和视图渲染。</li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/05/06/8996a22271cb53df.png"></p><p>处理流程中各个组件的功能：</p><ul><li>前端控制器（DispatcherServlet）：接收用户请求，给用户返回结果。</li><li>处理器映射器（HandlerMapping）：根据请求的url路径，通过注解或者xml配置，寻找匹配的Handler。</li><li>处理器适配器（HandlerAdapter）：Handler 的适配器，调用 handler 的方法处理请求。</li><li>处理器（Handler）：执行相关的请求处理逻辑，并返回相应的数据和视图信息，将其封装到ModelAndView对象中。</li><li>视图解析器（ViewResolver）：将逻辑视图名解析成真正的视图View。</li><li>视图（View）：接口类，实现类可支持不同的View类型（JSP、FreeMarker、Excel等）。</li></ul><h3 id="2-Redis内存优化"><a href="#2-Redis内存优化" class="headerlink" title="2.Redis内存优化"></a>2.Redis内存优化</h3><h5 id="1-压缩值"><a href="#1-压缩值" class="headerlink" title="1.压缩值"></a>1.压缩值</h5><h5 id="2-使用较小的键"><a href="#2-使用较小的键" class="headerlink" title="2.使用较小的键"></a>2.使用较小的键</h5><h5 id="3-切换到32位"><a href="#3-切换到32位" class="headerlink" title="3.切换到32位"></a>3.切换到32位</h5><h5 id="4-升级Redis版本"><a href="#4-升级Redis版本" class="headerlink" title="4.升级Redis版本"></a>4.升级Redis版本</h5><h5 id="5-使用更好的序列化器"><a href="#5-使用更好的序列化器" class="headerlink" title="5.使用更好的序列化器"></a>5.使用更好的序列化器</h5><h5 id="6-将较小的字符串组合为哈希"><a href="#6-将较小的字符串组合为哈希" class="headerlink" title="6.将较小的字符串组合为哈希"></a>6.将较小的字符串组合为哈希</h5><h5 id="7-从Set切换为Intset"><a href="#7-从Set切换为Intset" class="headerlink" title="7.从Set切换为Intset"></a>7.从Set切换为Intset</h5><h5 id="8-切换到bloom-filter或hyperloglog"><a href="#8-切换到bloom-filter或hyperloglog" class="headerlink" title="8.切换到bloom filter或hyperloglog"></a>8.切换到bloom filter或hyperloglog</h5><h5 id="9-大哈希分片成小哈希"><a href="#9-大哈希分片成小哈希" class="headerlink" title="9.大哈希分片成小哈希"></a>9.大哈希分片成小哈希</h5><h5 id="10-将哈希的Hashtable转换为Ziplist"><a href="#10-将哈希的Hashtable转换为Ziplist" class="headerlink" title="10.将哈希的Hashtable转换为Ziplist"></a>10.将哈希的Hashtable转换为Ziplist</h5><h5 id="11-转换为List而不是Hash"><a href="#11-转换为List而不是Hash" class="headerlink" title="11.转换为List而不是Hash"></a>11.转换为List而不是Hash</h5><h5 id="12-压缩字段名"><a href="#12-压缩字段名" class="headerlink" title="12.压缩字段名"></a>12.压缩字段名</h5><h5 id="13-避免动态Lua脚本"><a href="#13-避免动态Lua脚本" class="headerlink" title="13.避免动态Lua脚本"></a>13.避免动态Lua脚本</h5><h5 id="14-启用List压缩"><a href="#14-启用List压缩" class="headerlink" title="14.启用List压缩"></a>14.启用List压缩</h5><h5 id="15-更快地回收过期的键内存"><a href="#15-更快地回收过期的键内存" class="headerlink" title="15.更快地回收过期的键内存"></a>15.更快地回收过期的键内存</h5><h3 id="3-springboot核心配置文件"><a href="#3-springboot核心配置文件" class="headerlink" title="3.springboot核心配置文件"></a>3.springboot核心配置文件</h3><h5 id="⼀、springboot主要配置⽂件种类"><a href="#⼀、springboot主要配置⽂件种类" class="headerlink" title="⼀、springboot主要配置⽂件种类"></a>⼀、springboot主要配置⽂件种类</h5><p>1.bootstrap （.yml或.properties）<br>2.application（.yml或.properties）</p><h5 id="⼆、bootstrap与application的区别"><a href="#⼆、bootstrap与application的区别" class="headerlink" title="⼆、bootstrap与application的区别"></a>⼆、bootstrap与application的区别</h5><p>Spring Cloud项⽬是基于Spring Boot项⽬的，我们创建的Spring Cloud项⽬其实包含了两个Spring容器，⼀个是Spring Cloud的，⼀个是Spring Boot的，Spring Cloud作为⽗容器。这两个容器都是分开进⾏实例化的，最后关联起来。⼀开始是Spring Boot项⽬启动，然后在环境准备阶段会进⼊到BootstrapApplicationListener这个监听器当中，通过这个监听器会创建⼀个属于Spring Cloud的SpringApplication对象（与Spring Boot创建异曲同⼯，只不过有⼀些⾃⼰特别的配置⽽已），执⾏SpringApplication对象的run⽅法就会创建⼀个Spring Cloud的容器对象。</p><h5 id="三、bootstrap与application的应⽤场景"><a href="#三、bootstrap与application的应⽤场景" class="headerlink" title="三、bootstrap与application的应⽤场景"></a>三、bootstrap与application的应⽤场景</h5><p>1.application主要⽤于spring项⽬的⾃动化配置。<br>2.bootstrap主要有以下⼏个应⽤场景：</p><ul><li><p>使⽤ Spring Cloud Config 配置中⼼时，这时需要在 bootstrap 配置⽂件中添加连接到配置中⼼的配置属性来加载外部配置中⼼的配置<br>信息；</p></li><li><p>⼀些固定的不能被覆盖的属性；</p></li><li><p>⼀些加密&#x2F;解密的场景；</p></li></ul><h3 id="4-https"><a href="#4-https" class="headerlink" title="4.https"></a>4.https</h3><h4 id="什么是数字证书？"><a href="#什么是数字证书？" class="headerlink" title="什么是数字证书？"></a>什么是数字证书？</h4><p>服务端可以向证书颁发机构CA申请证书，以避免中间人攻击（防止证书被篡改）。证书包含三部分内容：<strong>证书内容、证书签名算法和签名</strong>，签名是为了验证身份。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/07/2d90f83c87a5f7a8.png"></p><p>服务端把证书传输给浏览器，浏览器从证书里取公钥。证书可以证明该公钥对应本网站。</p><p><strong>数字签名的制作过程</strong>：</p><ol><li>CA使用证书签名算法对证书内容进行<strong>hash运算</strong>。</li><li>对hash后的值<strong>用CA的私钥加密</strong>，得到数字签名。</li></ol><p><strong>浏览器验证过程</strong>：</p><ol><li>获取证书，得到证书内容、证书签名算法和数字签名。</li><li>用CA机构的公钥<strong>对数字签名解密</strong>（由于是浏览器信任的机构，所以浏览器会保存它的公钥）。</li><li>用证书里的签名算法<strong>对证书内容进行hash运算</strong>。</li><li>比较解密后的数字签名和对证书内容做hash运算后得到的哈希值，相等则表明证书可信。</li></ol><h4 id="HTTPS原理"><a href="#HTTPS原理" class="headerlink" title="HTTPS原理"></a>HTTPS原理</h4><p>首先是TCP三次握手，然后客户端发起一个HTTPS连接建立请求，客户端先发一个<code>Client Hello</code>的包，然后服务端响应<code>Server Hello</code>，接着再给客户端发送它的证书，然后双方经过密钥交换，最后使用交换的密钥加解密数据。</p><ol><li><p><strong>协商加密算法</strong> 。在<code>Client Hello</code>里面客户端会告知服务端自己当前的一些信息，包括客户端要使用的TLS版本，支持的加密算法，要访问的域名，给服务端生成的一个随机数（Nonce）等。需要提前告知服务器想要访问的域名以便服务器发送相应的域名的证书过来。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/07/fcb2805f61722619.png"></p></li><li><p>服务端响应<code>Server Hello</code>，告诉客户端服务端<strong>选中的加密算法</strong>。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/07/95f0278eaeb5d70d.png"></p></li><li><p>接着服务端给客户端发来了2个证书。第二个证书是第一个证书的签发机构（CA）的证书。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/07/48638c71c57432b5.png"></p></li><li><p>客户端使用证书的认证机构CA公开发布的RSA公钥<strong>对该证书进行验证</strong>，下图表明证书认证成功。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/07/e8fd94475ee90472.png"></p></li><li><p>验证通过之后，浏览器和服务器通过<strong>密钥交换算法</strong>产生共享的<strong>对称密钥</strong>。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/07/f9f9e2614b0d60df.png"></p><p><img src="https://s3.bmp.ovh/imgs/2022/05/07/78c0ce347ad9d681.png"></p></li><li><p>开始传输数据，使用同一个对称密钥来加解密。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/07/8a92d1601f24a520.png"></p></li></ol><h3 id="5-301-302状态码代表什么"><a href="#5-301-302状态码代表什么" class="headerlink" title="5.301  302状态码代表什么"></a>5.301  302状态码代表什么</h3><p><img src="https://s3.bmp.ovh/imgs/2022/05/06/92b8a21555b04bc8.png"></p><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/8df4a0cabe29ec2c.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>实习</tag>
      
      <tag>大学</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用配置文件总结</title>
    <link href="/2022/05/03/Java%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%80%BB%E7%BB%93/"/>
    <url>/2022/05/03/Java%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用配置文件"><a href="#常用配置文件" class="headerlink" title="常用配置文件"></a><strong>常用配置文件</strong></h1><h1 id="mybatis-xml"><a href="#mybatis-xml" class="headerlink" title="mybatis.xml"></a>mybatis.xml</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!DOCTYPE configuration PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <br>                <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;<br>&lt;configuration&gt;<br>    <br>      &lt;settings&gt;<br>&lt;!--      开启二级缓存--&gt;<br>      &lt;setting name=<span class="hljs-string">&quot;cacheEnabled&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br>  &lt;/settings&gt;<br>    <br>    &lt;environments <span class="hljs-keyword">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;<br>        &lt;environment id=<span class="hljs-string">&quot;development&quot;</span>&gt;<br>            &lt;!-- 配置mysql事务处理 --&gt;<br>            &lt;transactionManager type=<span class="hljs-string">&quot;JDBC&quot;</span> /&gt;<br>            &lt;!-- 配置数据库连接信息 并启用Mybatis的连接池--&gt;<br>            &lt;dataSource type=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;<br>                &lt;property name=<span class="hljs-string">&quot;driver&quot;</span> value=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;<br>                &lt;property name=<span class="hljs-string">&quot;url&quot;</span>        value=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/数据库名字&quot;</span> /&gt;<br>                &lt;property name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;root&quot;</span> /&gt;<br>                &lt;property name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;123456&quot;</span> /&gt;<br>            &lt;/dataSource&gt;<br>        &lt;/environment&gt;<br>    &lt;/environments&gt;<br><br>    &lt;mappers&gt;<br>        &lt;!-- 配置选择以xml文件的方式使用mybatis --&gt;<br>        &lt;!-- &lt;mapper resource=<span class="hljs-string">&quot;com/mapping/UserMapper.xml&quot;</span>/&gt; --&gt;<br>        &lt;!-- 以注解的方式来使用MyBatis 把所有的接口都在这里声明 --&gt;<br>        &lt;mapper class=<span class="hljs-string">&quot;com.dao.UserMapper&quot;</span>/&gt; <br>    &lt;/mappers&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><h1 id="spring-xml"><a href="#spring-xml" class="headerlink" title="spring.xml"></a>spring.xml</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xmk">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;<br>    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br>    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;<br>    xsi:schemaLocation=&quot;<br>        http://www.springframework.org/schema/beans <br>        http://www.springframework.org/schema/beans/spring-beans.xsd<br>        http://www.springframework.org/schema/context <br>        http://www.springframework.org/schema/context/spring-context.xsd<br>        http://www.springframework.org/schema/aop <br>        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;<br><br>    &lt;!-- <br>    项目选用注解来标识bean对象，因此需要配置spring框架扫描注解的包路径<br>     --&gt;<br>    &lt;context:component-scan base-package=&quot;com.dao&quot;&gt;&lt;/context:component-scan&gt;<br>    &lt;context:component-scan base-package=&quot;com.service&quot;&gt;&lt;/context:component-scan&gt;<br>    &lt;context:component-scan base-package=&quot;com.web.controller&quot;&gt;&lt;/context:component-scan&gt;<br><br>    &lt;!-- <br>        告知spring数据库jdbc.properties的位置<br>     --&gt;<br>    &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;<br><br>    &lt;!-- <br>           配置数据库连接用的连接池信息   选用dbcp连接池<br>     --&gt;<br>    &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;&gt;<br>        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;<br>        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;<br>        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;<br>        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;<br>        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;jdbc.initialSize&#125;&quot;&gt;&lt;/property&gt;<br>        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;jdbc.maxActive&#125;&quot;&gt;&lt;/property&gt;<br>    &lt;/bean&gt;<br><br>    &lt;!-- 加上spring jdbctemplate的配置项 --&gt;<br>    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;<br>        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;<br>    &lt;/bean&gt;<br><br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><h1 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码<br>log4j.rootLogger=DEBUG,console,file<br><br>#控制台输出的相关设置<br>log4j.appender.console = org.apache.log4j.ConsoleAppender<br>log4j.appender.console.Target = System.out<br>log4j.appender.console.Threshold=DEBUG<br>log4j.appender.console.layout = org.apache.log4j.PatternLayout<br>log4j.appender.console.layout.ConversionPattern=【%c】-%m%n<br><br>#文件输出的相关设置<br>log4j.appender.file = org.apache.log4j.RollingFileAppender<br>log4j.appender.file.File=./log/zty.log<br>log4j.appender.file.MaxFileSize=10mb<br>log4j.appender.file.Threshold=DEBUG<br>log4j.appender.file.layout=org.apache.log4j.PatternLayout<br>log4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n<br><br>#日志输出级别<br>log4j.logger.org.mybatis=DEBUG<br>log4j.logger.java.sql=DEBUG<br>log4j.logger.java.sql.Statement=DEBUG<br>log4j.logger.java.sql.ResultSet=DEBUG<br>log4j.logger.java.sql.PreparedStatement=DEBUG<br></code></pre></td></tr></table></figure><h1 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">jdbc.driverClass=com.mysql.jdbc.Driver<br>jdbc.jdbcUrl=jdbc\:mysql\://localhost\:3306/luasedu2?characterEncoding=utf8<br>jdbc.user=root<br>jdbc.password=root<br>jdbc.initialPoolSize=10<br>jdbc.maxPoolSize=100<br>jdbc.minPoolSize=10<br>jdbc.acquireIncrement=10<br><br></code></pre></td></tr></table></figure><h1 id="Mapper-xml"><a href="#Mapper-xml" class="headerlink" title="Mapper.xml"></a>Mapper.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zty.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from user_fo<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserById&quot;</span>  <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from user_fo where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from user_fo where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Maven镜像配置文件"><a href="#Maven镜像配置文件" class="headerlink" title="Maven镜像配置文件"></a>Maven镜像配置文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        thymeleaf模板--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">thymeleaf命名空间<br>xmlns:th=&quot;http://www.thymeleaf.org<br></code></pre></td></tr></table></figure><h1 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xm">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;<br>         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee<br>         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;<br>         version=&quot;4.0&quot;<br>         metadata-complete=&quot;true&quot;&gt;<br><br>&lt;/web-app&gt;<br></code></pre></td></tr></table></figure><h1 id="pom-xml资源过滤"><a href="#pom-xml资源过滤" class="headerlink" title="pom.xml资源过滤"></a>pom.xml资源过滤</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在build中配置resuorces，来防止我们的资源导出失败--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources/<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>配置文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础随记</title>
    <link href="/2022/05/03/Java%E5%9F%BA%E7%A1%80%E9%9A%8F%E8%AE%B0/"/>
    <url>/2022/05/03/Java%E5%9F%BA%E7%A1%80%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java基础随记"><a href="#Java基础随记" class="headerlink" title="Java基础随记"></a>Java基础随记</h1><ol><li>抽象类不能被实例化。</li><li>抽象类可以有构造函数，抽象方法不能被声明为静态。</li><li>抽象方法只需申明，而无需实现，抽象类中可以允许普通方法有主体</li><li>含有抽象方法的类必须申明为抽象类</li><li>抽象的子类必须实现抽象类中所有抽象方法，否则这个子类也是抽象类。</li></ol><h2 id="一-基本数据类型"><a href="#一-基本数据类型" class="headerlink" title="一.基本数据类型"></a>一.基本数据类型</h2><p><img src="https://s3.bmp.ovh/imgs/2022/05/25/8a717bc8b0c62f41.png"></p><h2 id="二、包装类"><a href="#二、包装类" class="headerlink" title="二、包装类"></a><strong>二、包装类</strong></h2><p>2.1 Java为每种基本数据类型分别设计了对应的类，称之为包装类。</p><table><thead><tr><th>基本数据类型</th><th>对应的包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p>每个包装类的对象可以封装一个相应的基本数据类型的数据，并提供了其他一些有用的方法。包装类对象一经创建，其内容不可改变。</p><p>基本数据类型与包装类的相互交换：</p><ul><li><p>由基本数据类型向对应的包装类转换称为<strong>装箱</strong>，例如把int包装成integer类的对象。</p></li><li><p>由包装类相对应的基本数据类型转换称为<strong>拆箱</strong>，例如把integer类的对象重新简化为int。</p></li><li><p>数据对象：xxxDO，xxx 即为数据表名。</p></li><li><p>数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</p></li><li><p>展示对象：xxxVO，xxx 一般为网页名称。</p></li></ul><p><strong>1） 待办事宜（TODO）</strong>:（标记人，标记时间，[预计处理时间]）</p><p>表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc 还没</p><p>有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。</p><p><strong>2） 错误，不能工作（FIXME）</strong>:（标记人，标记时间，[预计处理时间]）</p><p>在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</p><h2 id="编写单元测试代码遵守-BCDE-原则，以保证被测试模块的交付质量。"><a href="#编写单元测试代码遵守-BCDE-原则，以保证被测试模块的交付质量。" class="headerlink" title="编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。"></a><strong>编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。</strong></h2><ul><li><p><strong>B：</strong>Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</p></li><li><p><strong>C：</strong>Correct，正确的输入，并得到预期的结果。</p></li><li><p><strong>D：</strong>Design，与设计文档相结合，来编写单元测试。</p></li><li><p><strong>E：</strong>Error，强制错误信息输入（如：非法数据、异常流程、业务允许外等），并得到预期的结果。</p></li></ul><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限<img src="https://s3.bmp.ovh/imgs/2022/05/07/427cf6637e4dd9b0.png" alt="image-20220507095912390"></h2><h2 id="死锁排查"><a href="#死锁排查" class="headerlink" title="死锁排查"></a>死锁排查</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//死锁排查    重点！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1.使用 jsp -l 命令获取该类对应的线程号</span><br><span class="hljs-comment">        2.使用 jstack + 端口号  获取堆栈信息排查死锁位置</span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure><h2 id="项目遇到问题："><a href="#项目遇到问题：" class="headerlink" title="项目遇到问题："></a>项目遇到问题：</h2><ul><li>项目部署时候mysql版本问题，5.7和8支持的字符集类型不同</li><li>Nginx配置服务器缓存问题</li><li>数据库权限设置问题</li><li>域名配置和DNS解析配置问题</li></ul><h2 id="用过processlist吗？"><a href="#用过processlist吗？" class="headerlink" title="用过processlist吗？"></a>用过processlist吗？</h2><p><code>show processlist</code> 或 <code>show full processlist</code> 可以查看当前 MySQL 是否有压力，正在运行的<code>SQL</code>，有没有慢<code>SQL</code>正在执行。返回参数如下：</p><ol><li><p><strong>id</strong>：线程ID，可以用<code>kill id</code>杀死某个线程</p></li><li><p><strong>db</strong>：数据库名称</p></li><li><p><strong>user</strong>：数据库用户</p></li><li><p><strong>host</strong>：数据库实例的IP</p></li><li><p><strong>command</strong>：当前执行的命令，比如<code>Sleep</code>，<code>Query</code>，<code>Connect </code>等</p></li><li><p><strong>time</strong>：消耗时间，单位秒</p></li><li><p>state</p><p>：执行状态，主要有以下状态：</p><ul><li>Sleep，线程正在等待客户端发送新的请求</li><li>Locked，线程正在等待锁</li><li>Sending data，正在处理<code>SELECT</code>查询的记录，同时把结果发送给客户端</li><li>Kill，正在执行<code>kill</code>语句，杀死指定线程</li><li>Connect，一个从节点连上了主节点</li><li>Quit，线程正在退出</li><li>Sorting for group，正在为<code>GROUP BY</code>做排序</li><li>Sorting for order，正在为<code>ORDER BY</code>做排序</li></ul></li><li><p><strong>info</strong>：正在执行的<code>SQL</code>语句</p></li></ol><p><strong>SDK:</strong>  Software Development Kit 的缩写，中文意思就是【软件开发工具包】。这是一个覆盖面相当广泛的名词，可以这么说：辅助开发某一类软件的相关文档、范例和工具的集合都可以叫做【SDK】。</p><p>**CDN:**Content Delivery Network，翻译成中文就是内容分发网络。CDN依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取内容，降低网络延迟，提高访问速度。简单来讲，CDN是用来进行加速的，它可以让用户更快获得所需的数据。</p><p><strong>DBMS:</strong> 数据库管理系统</p><p><strong>RDBMS：</strong>关系数据库管理系统</p><p><img src="https://s3.bmp.ovh/imgs/2022/06/06/2545c0b5346d8c0e.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字节暑假实习面试记录~</title>
    <link href="/2022/05/03/%E5%AD%97%E8%8A%82%E6%9A%91%E5%81%87%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/05/03/%E5%AD%97%E8%8A%82%E6%9A%91%E5%81%87%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="字节暑假实习面试记录-补-2022-3-4"><a href="#字节暑假实习面试记录-补-2022-3-4" class="headerlink" title="字节暑假实习面试记录(补)  2022.3.4"></a>字节暑假实习面试记录(补)  2022.3.4</h2><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p>1.MySQL有哪些存储引擎？<br>2.引擎之间的区别<br>3.MySQL索引类型<br>4.聚集索引和非聚集索引有什么区别？<br>5.MySQL事务acid什么意思？<br>6.锁的volatile关键字有没有使用过。</p><p>7.synchronized实现原理。</p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>1.为什么要使用Redis？<br>2.为什么Redis比较快，单线程就一定快吗？<br>3.Redis数据结构有哪些。<br>4.Zset和Java的set有什么区别？<br>5.Zset底层实现是什么？</p><h4 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h4><p>1.HashMap和Hashtable的区别。<br>2.&#x3D;&#x3D;和equals的区别。<br>3.抽象类和接口的区别</p><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><p>1.什么是微服务？<br>2.为什么要使用微服务呢？</p><p>3.CAP什么意思？</p><h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><p>1.Http的状态码有哪些？各代表什么意思？<br>2.300状态码代表什么？<br>2.三次握手四次挥手。<br>3.两次握手不可以吗？<br>4.Tcp是什么？<br>5.post和get有什么区别？<br>6.tcp为什么是可靠性传输？怎么理解？</p><h4 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h4><p>#写出一个数组的全排列。123全排列如下:<br>123 132 231 213 312 321</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.没有充分准备。</p><p>2.算法基础还不扎实。</p><p>3.还得继续学习！</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>实习</tag>
      
      <tag>大学</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My-First-Blog</title>
    <link href="/2022/05/02/zty-f/"/>
    <url>/2022/05/02/zty-f/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="个人博客创建！！！！！"><a href="#个人博客创建！！！！！" class="headerlink" title="个人博客创建！！！！！"></a>个人博客创建！！！！！</h2><p>2022.5.2 </p><p><img src="https://s3.bmp.ovh/imgs/2022/05/04/b5e23919b5bdb1d0.png"></p><h3 id="其他项目地址："><a href="#其他项目地址：" class="headerlink" title="其他项目地址："></a>其他项目地址：</h3><ul><li>[知识库系统] <a href="http://wiki.zruler.fun/">http://wiki.zruler.fun/</a></li><li>[商品秒杀系统] <a href="http://seckill.zruler.fun/">http://seckill.zruler.fun/</a></li><li>[超市订单管理系统] <a href="http://smbms.zruler.fun/">http://smbms.zruler.fun/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
